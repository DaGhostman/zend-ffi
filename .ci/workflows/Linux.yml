name: Linux

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'What version to compile and commit to repo?'
        required: true
        default: 0.0.0
        type: number

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        container:
        - {os: 'ubuntu:18.04', cli: 'DEBIAN_FRONTEND=noninteractive apt-get', dev: 'cmake build-essential -y', dep: 'apt-get install software-properties-common', pre: 'add-apt-repository ppa:ondrej/php -y && add-apt-repository ppa:git-core/ppa -y && apt-get update -y' , extra: 'ls', name: ubuntu18.04}
        - {os: 'ubuntu:latest', cli: 'DEBIAN_FRONTEND=noninteractive apt-get', dev: 'cmake build-essential -y', dep: 'apt-get install software-properties-common', pre: 'add-apt-repository ppa:ondrej/php -y', extra: 'ls', name: ubuntu20.04}
        - {os: 'centos:7', cli: 'yum', dev: 'cmake ninja-build -y && cp -f /usr/bin/cmake3 /usr/bin/cmake && yum groupinstall "Development Tools" -y', dep: 'yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm https://rpms.remirepo.net/enterprise/remi-release-7.rpm -y && yum install epel-release cmake3 -y', pre: "yum-config-manager --disable 'remi-php*' && yum-config-manager --enable remi-php80 && yum install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm -y", extra: 'ls', name: centos7}
        - {os: 'centos:latest', cli: 'dnf', dev: 'cmake -y', dep: 'dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm https://rpms.remirepo.net/enterprise/remi-release-8.rpm -y', pre: 'dnf module reset php && dnf module install php:remi-8.0 -y && dnf group install "Development Tools" -y', extra: "dnf --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos -y && dnf distro-sync -y", name: centos8+}
      env:
        version: ${{ github.event.inputs.version }}
    runs-on: ubuntu-latest
    continue-on-error: true
    container: ${{ matrix.container.os }}
    env:
      VERSION: ${{ github.event.inputs.version }}
    steps:
      - name: Install Build tools
        run: |
          ${{ matrix.container.extra }}
          ${{ matrix.container.cli }} update -y
          ${{ matrix.container.dep }} -y
          ${{ matrix.container.pre }}
          ${{ matrix.container.cli }} install sudo git libtool curl ${{ matrix.container.dev }}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure for ${{ matrix.container.os }}
        run: |
          curl -L https://github.com/some_repo/some_repo/archive/v${{ env.VERSION }}.tar.gz | tar xzf -
          cd some_repo-${{ env.VERSION }}
          mkdir build
          cd build
          cmake .. -DBUILD_TESTING=
        env:
          VERSION: ${{ github.event.inputs.version }}
      - name: Build
        run: |
          cd some_repo-${{ env.VERSION }}
          cmake --build build
          ls -lh build
      - name: Upload/Commit to Repo
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull
          mkdir -p lib/Linux/${{ matrix.container.name }}
          cp some_repo-${{ env.VERSION }}/build/some_repo.so.1.0.0 lib/Linux/${{ matrix.container.name }}/
          git add lib
          git commit -m "created some_repo.so.1.0.0 - for ${{ matrix.container.os }}"
          git push -q

  qemu:
    runs-on: ubuntu-latest
    continue-on-error: true
    name: cross-build-qemu-${{ matrix.config.target }}
    env:
      VERSION: ${{ github.event.inputs.version }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {target: aarch64, toolchain: gcc-aarch64-linux-gnu, cc: aarch64-linux-gnu-gcc, qemu: qemu-aarch64-static}
    steps:
      - uses: actions/checkout@v2
      - name: Install QEMU
        # this ensure install latest qemu on ubuntu, apt get version is old
        env:
          QEMU_SRC: "http://archive.ubuntu.com/ubuntu/pool/universe/q/qemu"
          QEMU_VER: "qemu-user-static_4\\.2-.*_amd64.deb$"
        run: |
          DEB=`curl -s $QEMU_SRC/ | grep -o -E 'href="([^"#]+)"' | cut -d'"' -f2 | grep $QEMU_VER | tail -1`
          wget $QEMU_SRC/$DEB
          sudo dpkg -i $DEB
      - name: Install ${{ matrix.config.toolchain }}
        run: |
          sudo apt update
          sudo apt install ${{ matrix.config.toolchain }} -y
      - name: Configure with ${{ matrix.config.cc }}
        run: |
          curl -L https://github.com/some_repo/some_repo/archive/v${{ env.VERSION }}.tar.gz | tar xzf -
          cd some_repo-${{ env.VERSION }}
          mkdir build
          cd build
          cmake .. -DBUILD_TESTING=ON -DQEMU=ON -DCMAKE_C_COMPILER=${{ matrix.config.cc }}
      - name: Build
        run: |
          cd some_repo-${{ env.VERSION }}
          cmake --build build
          ls -lh build
      - name: Upload/Commit to Repo
        run: |
          git pull
          git config user.name github-actions
          git config user.email github-actions@github.com
          mkdir -p lib/Linux/raspberry/
          cp some_repo-${{ env.VERSION }}/build/some_repo.so.1.0.0 lib/Linux/raspberry/
          git add lib
          git commit -m "created some_repo.so.1.0.0 - for Raspberry Pi 4"
          git push -q
