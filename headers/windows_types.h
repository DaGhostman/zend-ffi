#define FFI_SCOPE "__windows__"
#define FFI_LIB "C:\\Windows\\System32\\msvcrt.dll"

typedef signed long int __int64;
typedef unsigned int uintptr_t;
typedef char *va_list;
typedef unsigned int size_t;
typedef int ptrdiff_t;
typedef int intptr_t;
typedef _Bool __vcrt_bool;
typedef unsigned short wchar_t;
typedef _Bool __crt_bool;
typedef int errno_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef __int64 __time64_t;

typedef struct __crt_locale_data_public
{
    unsigned short const *_locale_pctype;
    int _locale_mb_cur_max;
    unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data *locinfo;
    struct __crt_multibyte_data *mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers *_locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;
typedef __time64_t time_t;
typedef size_t rsize_t;
typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;
typedef intptr_t ssize_t;
typedef enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
struct _EXCEPTION_RECORD;
struct _CONTEXT;

typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void *LPVOID;
typedef const void *LPCVOID;

typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;
typedef unsigned long POINTER_64_INT;
typedef signed char INT8;
typedef INT8 *PINT8;
typedef signed short INT16;
typedef INT16 *PINT16;
typedef signed int INT32;
typedef INT32 *PINT32;
typedef __int64 INT64;
typedef INT64 *PINT64;
typedef unsigned char UINT8;
typedef UINT8 *PUINT8;
typedef unsigned short UINT16;
typedef UINT16 *PUINT16;
typedef unsigned int UINT32;
typedef UINT32 *PUINT32;
typedef unsigned long int UINT64;
typedef UINT64 *PUINT64;
typedef signed int LONG32;
typedef LONG32 *PLONG32;
typedef unsigned int ULONG32;
typedef ULONG32 *PULONG32;
typedef unsigned int DWORD32;
typedef DWORD32 *PDWORD32;

typedef int INT_PTR;
typedef INT_PTR *PINT_PTR;
typedef unsigned int UINT_PTR;
typedef UINT_PTR *PUINT_PTR;

typedef long LONG_PTR;
typedef LONG_PTR *PLONG_PTR;
typedef unsigned long ULONG_PTR;
typedef ULONG_PTR *PULONG_PTR;
typedef unsigned short UHALF_PTR;
typedef UHALF_PTR *PUHALF_PTR;
typedef short HALF_PTR;
typedef HALF_PTR *PHALF_PTR;
typedef long SHANDLE_PTR;
typedef unsigned long HANDLE_PTR;
typedef ULONG_PTR SIZE_T;
typedef SIZE_T *PSIZE_T;
typedef LONG_PTR SSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef ULONG_PTR DWORD_PTR;
typedef DWORD_PTR *PDWORD_PTR;
typedef __int64 LONG64;
typedef LONG64 *PLONG64;

typedef unsigned long int ULONG64;
typedef ULONG64 *PULONG64;
typedef unsigned long long int DWORD64;
typedef DWORD64 *PDWORD64;

typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;
typedef void *PVOID;
typedef void *PVOID64;
typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;

typedef wchar_t WCHAR;
typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const PCWSTR *PCZPCWSTR;
typedef const WCHAR *LPCUWSTR, *PCUWSTR;

typedef WCHAR *PZZWSTR;
typedef const WCHAR *PCZZWSTR;
typedef WCHAR *PUZZWSTR;
typedef const WCHAR *PCUZZWSTR;

typedef WCHAR *PNZWCH;
typedef const WCHAR *PCNZWCH;
typedef WCHAR *PUNZWCH;
typedef const WCHAR *PCUNZWCH;

typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR *LPCUWCHAR, *PCUWCHAR;

typedef unsigned long UCSCHAR;
typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR *PCUUCSSTR;

typedef UCSCHAR *PUUCSCHAR;
typedef const UCSCHAR *PCUUCSCHAR;

typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef const PCSTR *PCZPCSTR;

typedef CHAR *PZZSTR;
typedef const CHAR *PCZZSTR;

typedef CHAR *PNZCH;
typedef const CHAR *PCNZCH;
typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE, *PTBYTE;

typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PZPSTR PZPTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;

typedef SHORT *PSHORT;
typedef LONG *PLONG;

typedef struct _PROCESSOR_NUMBER
{
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;

typedef struct _GROUP_AFFINITY
{
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
typedef void *HANDLE;
typedef HANDLE *PHANDLE;

typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;

typedef long HRESULT;
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;

typedef enum
{
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID,
    *PCOMPARTMENT_ID;
typedef struct _FLOAT128
{
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;
typedef double LONGLONG;
typedef double ULONGLONG;

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;

typedef LONGLONG USN;

typedef union _LARGE_INTEGER
{
    struct
    {
        DWORD LowPart;
        LONG HighPart;
    } s;
    struct
    {
        DWORD LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;

typedef union _ULARGE_INTEGER
{
    struct
    {
        DWORD LowPart;
        DWORD HighPart;
    } s;
    struct
    {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;

typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;
typedef LONG RTL_REFERENCE_COUNT32, *PRTL_REFERENCE_COUNT32;

typedef struct _LUID
{
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;

typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;

typedef struct _LIST_ENTRY
{
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, *PRLIST_ENTRY;

typedef struct _SINGLE_LIST_ENTRY
{
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;

typedef struct LIST_ENTRY32
{
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64
{
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;
typedef struct _GUID
{
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[8];
} GUID;
typedef GUID *LPGUID;
typedef const GUID *LPCGUID;

typedef GUID IID;
typedef IID *LPIID;

typedef GUID CLSID;
typedef CLSID *LPCLSID;

typedef GUID FMTID;
typedef FMTID *LPFMTID;

typedef struct _OBJECTID
{
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;

typedef EXCEPTION_DISPOSITION EXCEPTION_ROUTINE(
    struct _EXCEPTION_RECORD *ExceptionRecord,
    PVOID EstablisherFrame,
    struct _CONTEXT *ContextRecord,
    PVOID DispatcherContext);

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;

typedef struct _M128A
{
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;

typedef struct _XSAVE_FORMAT
{
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
    M128A XmmRegisters[8];
    BYTE Reserved4[224];
} XSAVE_FORMAT, *PXSAVE_FORMAT;

typedef struct _XSAVE_CET_U_FORMAT
{
    DWORD64 Ia32CetUMsr;
    DWORD64 Ia32Pl3SspMsr;
} XSAVE_CET_U_FORMAT, *PXSAVE_CET_U_FORMAT;

typedef struct _XSAVE_AREA_HEADER
{
    DWORD64 Mask;
    DWORD64 CompactionMask;
    DWORD64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct _XSAVE_AREA
{
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT
{
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
    PXSAVE_AREA Area;
    DWORD Reserved2;

    PVOID Buffer;

    DWORD Reserved3;

} XSTATE_CONTEXT, *PXSTATE_CONTEXT;

typedef struct _SCOPE_TABLE_AMD64
{
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;
typedef struct _SCOPE_TABLE_ARM
{
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;
typedef struct _SCOPE_TABLE_ARM64
{
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM64, *PSCOPE_TABLE_ARM64;
typedef struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64
{

    PDWORD64 X19;
    PDWORD64 X20;
    PDWORD64 X21;
    PDWORD64 X22;
    PDWORD64 X23;
    PDWORD64 X24;
    PDWORD64 X25;
    PDWORD64 X26;
    PDWORD64 X27;
    PDWORD64 X28;
    PDWORD64 Fp;
    PDWORD64 Lr;

    PDWORD64 D8;
    PDWORD64 D9;
    PDWORD64 D10;
    PDWORD64 D11;
    PDWORD64 D12;
    PDWORD64 D13;
    PDWORD64 D14;
    PDWORD64 D15;

} KNONVOLATILE_CONTEXT_POINTERS_ARM64, *PKNONVOLATILE_CONTEXT_POINTERS_ARM64;

typedef struct _FLOATING_SAVE_AREA
{
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Spare0;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
typedef struct _CONTEXT
{
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];

} CONTEXT;

typedef CONTEXT *PCONTEXT;

typedef struct _LDT_ENTRY
{
    WORD LimitLow;
    WORD BaseLow;
    union
    {
        struct
        {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct
        {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

typedef struct _KNONVOLATILE_CONTEXT_POINTERS
{
    DWORD Dummy;
} KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS;

typedef struct _WOW64_FLOATING_SAVE_AREA
{
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

typedef struct _WOW64_CONTEXT
{
    DWORD ContextFlags;

    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;

    WOW64_FLOATING_SAVE_AREA FloatSave;

    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;

    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;

    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;

    BYTE ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;

typedef struct _WOW64_LDT_ENTRY
{
    WORD LimitLow;
    WORD BaseLow;
    union
    {
        struct
        {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct
        {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY
{
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
typedef struct _EXCEPTION_RECORD
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
} EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;

typedef struct _EXCEPTION_POINTERS
{
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef PVOID PCLAIMS_BLOB;
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
typedef struct _GENERIC_MAPPING
{
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;

typedef struct _LUID_AND_ATTRIBUTES
{
    LUID Luid;
    DWORD Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

typedef struct _SID_IDENTIFIER_AUTHORITY
{
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;

typedef struct _SID
{
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;

    DWORD SubAuthority[1];

} SID, *PISID;
typedef union _SE_SID
{
    SID Sid;
    BYTE Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
} SE_SID, *PSE_SID;

typedef enum _SID_NAME_USE
{
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel,
    SidTypeLogonSession
} SID_NAME_USE,
    *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES
{

    PSID Sid;

    DWORD Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;

typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH
{
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
typedef enum
{

    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
    WinBuiltinDeviceOwnersSid = 119,
} WELL_KNOWN_SID_TYPE;
typedef struct _ACL
{
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
typedef struct _ACE_HEADER
{
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
typedef struct _ACCESS_ALLOWED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;

typedef struct _SYSTEM_ACCESS_FILTER_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ACCESS_FILTER_ACE, *PSYSTEM_ACCESS_FILTER_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
typedef enum _ACL_INFORMATION_CLASS
{
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;

typedef struct _ACL_REVISION_INFORMATION
{
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

typedef struct _ACL_SIZE_INFORMATION
{
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;

} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

typedef struct _SECURITY_OBJECT_AI_PARAMS
{
    DWORD Size;
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;
typedef struct _OBJECT_TYPE_LIST
{
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
typedef enum _AUDIT_EVENT_TYPE
{
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE,
    *PAUDIT_EVENT_TYPE;
typedef struct _PRIVILEGE_SET
{
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET;
typedef enum _ACCESS_REASON_TYPE
{

    AccessReasonNone = 0x00000000,

    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,

    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,

    AccessReasonNotGrantedByCape = 0x00050000,
    AccessReasonNotGrantedByParentCape = 0x00060000,

    AccessReasonNotGrantedToAppContainer = 0x00070000,

    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,

    AccessReasonIntegrityLevel = 0x00300000,

    AccessReasonOwnership = 0x00400000,

    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,

    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000,

    AccessReasonTrustLabel = 0x00900000,

    AccessReasonFilterAce = 0x00a00000
} ACCESS_REASON_TYPE;
typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS
{
    ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;

typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET *Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
typedef enum _SECURITY_IMPERSONATION_LEVEL
{
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL,
    *PSECURITY_IMPERSONATION_LEVEL;
typedef enum _TOKEN_TYPE
{
    TokenPrimary = 1,
    TokenImpersonation
} TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;

typedef enum _TOKEN_ELEVATION_TYPE
{
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE,
    *PTOKEN_ELEVATION_TYPE;

typedef enum _TOKEN_INFORMATION_CLASS
{
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    TokenPrivateNameSpace,
    TokenSingletonAttributes,
    TokenBnoIsolation,
    TokenChildProcessFlags,
    TokenIsLessPrivilegedAppContainer,
    TokenIsSandboxed,
    TokenOriginatingProcessTrustLevel,
    MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS,
    *PTOKEN_INFORMATION_CLASS;

typedef struct _TOKEN_USER
{
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _SE_TOKEN_USER
{
    union
    {
        TOKEN_USER TokenUser;
        SID_AND_ATTRIBUTES User;
    } u;

    union
    {
        SID Sid;
        BYTE Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
    } u2;

} SE_TOKEN_USER, PSE_TOKEN_USER;

typedef struct _TOKEN_GROUPS
{
    DWORD GroupCount;

    SID_AND_ATTRIBUTES Groups[1];

} TOKEN_GROUPS, *PTOKEN_GROUPS;

typedef struct _TOKEN_PRIVILEGES
{
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;

typedef struct _TOKEN_OWNER
{
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;

typedef struct _TOKEN_PRIMARY_GROUP
{
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;

typedef struct _TOKEN_DEFAULT_DACL
{
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS
{
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS
{
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES
{
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN
{
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION
{
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL
{
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
typedef struct _TOKEN_MANDATORY_POLICY
{
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;

typedef struct _TOKEN_ACCESS_INFORMATION
{
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
    PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;

typedef struct _TOKEN_AUDIT_POLICY
{
    BYTE PerUserPolicy[(((59)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;

typedef struct _TOKEN_SOURCE
{
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;

typedef struct _TOKEN_STATISTICS
{
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;

typedef struct _TOKEN_CONTROL
{
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN
{
    LUID OriginatingLogonSession;
} TOKEN_ORIGIN, *PTOKEN_ORIGIN;

typedef enum _MANDATORY_LEVEL
{
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL,
    *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION
{
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;

typedef struct _TOKEN_SID_INFORMATION
{
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;

typedef struct _TOKEN_BNO_ISOLATION_INFORMATION
{
    PWSTR IsolationPrefix;
    BOOLEAN IsolationEnabled;
} TOKEN_BNO_ISOLATION_INFORMATION, *PTOKEN_BNO_ISOLATION_INFORMATION;
typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
{
    DWORD64 Version;
    PWSTR Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;

typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
    PVOID pValue;
    DWORD ValueLength;
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1
{

    PWSTR Name;

    WORD ValueType;

    WORD Reserved;

    DWORD Flags;

    DWORD ValueCount;

    union
    {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;

typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
{

    DWORD Name;

    WORD ValueType;

    WORD Reserved;

    DWORD Flags;

    DWORD ValueCount;

    union
    {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
{

    WORD Version;

    WORD Reserved;

    DWORD AttributeCount;
    union
    {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;

typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
    *PSECURITY_CONTEXT_TRACKING_MODE;

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;

typedef struct _SE_IMPERSONATION_STATE
{
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;

typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
typedef BYTE SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL;
typedef enum _SE_IMAGE_SIGNATURE_TYPE
{
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded,
    SeImageSignatureCache,
    SeImageSignatureCatalogCached,
    SeImageSignatureCatalogNotCached,
    SeImageSignatureCatalogHint,
    SeImageSignaturePackageCatalog,
} SE_IMAGE_SIGNATURE_TYPE,
    *PSE_IMAGE_SIGNATURE_TYPE;

typedef enum _SE_LEARNING_MODE_DATA_TYPE
{
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;

typedef struct _SECURITY_CAPABILITIES
{

    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;

    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;
typedef struct _JOB_SET_ARRAY
{
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB
{
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    PVOID FiberData;

    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;

typedef struct _NT_TIB32
{
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;

    DWORD FiberData;

    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64
{
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;

    DWORD64 FiberData;

    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;

typedef struct _UMS_CREATE_THREAD_ATTRIBUTES
{
    DWORD UmsVersion;
    PVOID UmsContext;
    PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;

typedef struct _WOW64_ARCHITECTURE_INFORMATION
{
    DWORD Machine : 16;
    DWORD KernelMode : 1;
    DWORD UserMode : 1;
    DWORD Native : 1;
    DWORD Process : 1;
    DWORD ReservedZero0 : 12;
} WOW64_ARCHITECTURE_INFORMATION;
typedef struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET
{
    ULONG_PTR TargetAddress;
    ULONG_PTR Flags;
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGET, *PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET;

typedef struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION
{
    WORD NumberOfTargets;
    WORD Reserved;
    DWORD Reserved2;
    PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets;
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION, *PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
typedef struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE
{
    ULONG_PTR BaseAddress;
    SIZE_T Size;
    DWORD Flags;
} PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE, *PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;

typedef struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION
{
    WORD NumberOfRanges;
    WORD Reserved;
    DWORD Reserved2;
    PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges;
} PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION, *PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;

typedef struct _QUOTA_LIMITS
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;

typedef union _RATE_QUOTA_LIMIT
{
    DWORD RateData;
    struct
    {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    } s;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS
{
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;

typedef enum _HARDWARE_COUNTER_TYPE
{
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE,
    *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY
{
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    ProcessSystemCallFilterPolicy,
    ProcessPayloadRestrictionPolicy,
    ProcessChildProcessPolicy,
    ProcessSideChannelIsolationPolicy,
    ProcessUserShadowStackPolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY,
    *PPROCESS_MITIGATION_POLICY;

typedef struct _PROCESS_MITIGATION_ASLR_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        } s;
    } u;
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        } s;
    } u;
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        } s;
    } u;
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD AuditDisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 30;
        } s;
    } u;
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        } s;
    } u;
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD ProhibitDynamicCode : 1;
            DWORD AllowThreadOptOut : 1;
            DWORD AllowRemoteDowngrade : 1;
            DWORD AuditProhibitDynamicCode : 1;
            DWORD ReservedFlags : 28;
        } s;
    } u;
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD EnableControlFlowGuard : 1;
            DWORD EnableExportSuppression : 1;
            DWORD StrictMode : 1;
            DWORD ReservedFlags : 29;
        } s;
    } u;
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, *PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD MicrosoftSignedOnly : 1;
            DWORD StoreSignedOnly : 1;
            DWORD MitigationOptIn : 1;
            DWORD AuditMicrosoftSignedOnly : 1;
            DWORD AuditStoreSignedOnly : 1;
            DWORD ReservedFlags : 27;
        } s;
    } u;
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD DisableNonSystemFonts : 1;
            DWORD AuditNonSystemFontLoading : 1;
            DWORD ReservedFlags : 30;
        } s;
    } u;
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD NoRemoteImages : 1;
            DWORD NoLowMandatoryLabelImages : 1;
            DWORD PreferSystem32Images : 1;
            DWORD AuditNoRemoteImages : 1;
            DWORD AuditNoLowMandatoryLabelImages : 1;
            DWORD ReservedFlags : 27;
        } s;
    } u;
} PROCESS_MITIGATION_IMAGE_LOAD_POLICY, *PPROCESS_MITIGATION_IMAGE_LOAD_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD FilterId : 4;
            DWORD ReservedFlags : 28;
        } s;
    } u;
} PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;

typedef struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD EnableExportAddressFilter : 1;
            DWORD AuditExportAddressFilter : 1;

            DWORD EnableExportAddressFilterPlus : 1;
            DWORD AuditExportAddressFilterPlus : 1;

            DWORD EnableImportAddressFilter : 1;
            DWORD AuditImportAddressFilter : 1;

            DWORD EnableRopStackPivot : 1;
            DWORD AuditRopStackPivot : 1;

            DWORD EnableRopCallerCheck : 1;
            DWORD AuditRopCallerCheck : 1;

            DWORD EnableRopSimExec : 1;
            DWORD AuditRopSimExec : 1;

            DWORD ReservedFlags : 20;
        } s;
    } u;
} PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY, *PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;

typedef struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD NoChildProcessCreation : 1;
            DWORD AuditNoChildProcessCreation : 1;
            DWORD AllowSecureProcessCreation : 1;
            DWORD ReservedFlags : 29;
        } s;
    } u;
} PROCESS_MITIGATION_CHILD_PROCESS_POLICY, *PPROCESS_MITIGATION_CHILD_PROCESS_POLICY;

typedef struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {

            DWORD SmtBranchTargetIsolation : 1;
            DWORD IsolateSecurityDomain : 1;

            DWORD DisablePageCombine : 1;

            DWORD SpeculativeStoreBypassDisable : 1;

            DWORD ReservedFlags : 28;

        } s;
    } u;
} PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY, *PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;

typedef struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY
{
    union
    {
        DWORD Flags;
        struct
        {
            DWORD EnableUserShadowStack : 1;
            DWORD AuditUserShadowStack : 1;
            DWORD SetContextIpValidation : 1;
            DWORD AuditSetContextIpValidation : 1;
            DWORD EnableUserShadowStackStrictMode : 1;
            DWORD BlockNonCetBinaries : 1;
            DWORD BlockNonCetBinariesNonEhcont : 1;
            DWORD AuditBlockNonCetBinaries : 1;
            DWORD CetDynamicApisOutOfProcOnly : 1;
            DWORD SetContextIpValidationRelaxedMode : 1;
            DWORD ReservedFlags : 22;

        } s;
    } u;
} PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY, *PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;

typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
    DWORD SecurityLimitFlags;
    HANDLE JobToken;
    PTOKEN_GROUPS SidsToDisable;
    PTOKEN_PRIVILEGES PrivilegesToDelete;
    PTOKEN_GROUPS RestrictedSids;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION
{
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE
{
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE,
    *PJOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
{
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    *PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
{
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2
{
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    union
    {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } u;

    union
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } u2;

    union
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
        CpuRateControlToleranceInterval;
    } u3;

    DWORD LimitFlags;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
{
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2
{
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    union
    {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } u;

    union
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } u2;

    union
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    } u3;

    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
{
    DWORD ControlFlags;
    union
    {
        DWORD CpuRate;
        DWORD Weight;
        struct
        {
            WORD MinRate;
            WORD MaxRate;
        } s;
    } u;
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7
} JOB_OBJECT_NET_RATE_CONTROL_FLAGS;

typedef char __C_ASSERT__[(JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS == (JOB_OBJECT_NET_RATE_CONTROL_ENABLE + JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH + JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG)) ? 1 : -1];
typedef struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION
{
    DWORD64 MaxBandwidth;
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
    BYTE DscpTag;
} JOBOBJECT_NET_RATE_CONTROL_INFORMATION;

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 0x2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 0x4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 0x8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = JOB_OBJECT_IO_RATE_CONTROL_ENABLE |
                                             JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME |
                                             JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL |
                                             JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP
} JOB_OBJECT_IO_RATE_CONTROL_FLAGS;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;

typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
    LONG64 SoftMaxIops;
    LONG64 SoftMaxBandwidth;
    LONG64 SoftMaxTimePercent;
    LONG64 LimitExcessNotifyIops;
    LONG64 LimitExcessNotifyBandwidth;
    LONG64 LimitExcessNotifyTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;

typedef enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS
{
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 0x1,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 0x2,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 0x3
} JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_STATS
{

    ULONG_PTR IoCount;
    ULONGLONG TotalNonOverlappedQueueTime;
    ULONGLONG TotalNonOverlappedServiceTime;
    ULONGLONG TotalSize;

} JOBOBJECT_IO_ATTRIBUTION_STATS, *PJOBOBJECT_IO_ATTRIBUTION_STATS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION
{
    DWORD ControlFlags;

    JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
    JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;

} JOBOBJECT_IO_ATTRIBUTION_INFORMATION, *PJOBOBJECT_IO_ATTRIBUTION_INFORMATION;
typedef enum _JOBOBJECTINFOCLASS
{
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    JobObjectReserved10Information,
    JobObjectReserved11Information,
    JobObjectReserved12Information,
    JobObjectReserved13Information,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation,
    JobObjectNotificationLimitInformation2,
    JobObjectLimitViolationInformation2,
    JobObjectCreateSilo,
    JobObjectSiloBasicInformation,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;

typedef struct _SILOOBJECT_BASIC_INFORMATION
{
    DWORD SiloId;
    DWORD SiloParentId;
    DWORD NumberOfProcesses;
    BOOLEAN IsInServerSilo;
    BYTE Reserved[3];
} SILOOBJECT_BASIC_INFORMATION, *PSILOOBJECT_BASIC_INFORMATION;

typedef enum _SERVERSILO_STATE
{
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED,
    SERVERSILO_SHUTTING_DOWN,
    SERVERSILO_TERMINATING,
    SERVERSILO_TERMINATED,
} SERVERSILO_STATE,
    *PSERVERSILO_STATE;

typedef struct _SERVERSILO_BASIC_INFORMATION
{
    DWORD ServiceSessionId;
    SERVERSILO_STATE State;
    DWORD ExitStatus;
    BOOLEAN IsDownlevelContainer;
    PVOID ApiSetSchema;
    PVOID HostApiSetSchema;
} SERVERSILO_BASIC_INFORMATION, *PSERVERSILO_BASIC_INFORMATION;

typedef enum _FIRMWARE_TYPE
{
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE,
    *PFIRMWARE_TYPE;
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;

typedef enum _PROCESSOR_CACHE_TYPE
{
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;

typedef struct _CACHE_DESCRIPTOR
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union
    {
        struct
        {
            BYTE Flags;
        } ProcessorCore;
        struct
        {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } u;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP
{
    BYTE Flags;
    BYTE EfficiencyClass;
    BYTE Reserved[20];
    WORD GroupCount;
    GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP
{
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO
{
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP
{
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union
    {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } u;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

typedef enum _CPU_SET_INFORMATION_TYPE
{
    CpuSetInformation
} CPU_SET_INFORMATION_TYPE,
    *PCPU_SET_INFORMATION_TYPE;

struct _SYSTEM_CPU_SET_INFORMATION
{
    DWORD Size;
    CPU_SET_INFORMATION_TYPE Type;
    union
    {
        struct
        {
            DWORD Id;
            WORD Group;
            BYTE LogicalProcessorIndex;
            BYTE CoreIndex;
            BYTE LastLevelCacheIndex;
            BYTE NumaNodeIndex;
            BYTE EfficiencyClass;
            union
            {

                BYTE AllFlags;
                struct
                {
                    BYTE Parked : 1;
                    BYTE Allocated : 1;
                    BYTE AllocatedToTargetProcess : 1;
                    BYTE RealTime : 1;
                    BYTE ReservedFlags : 4;
                } s;
            } u2;

            union
            {
                DWORD Reserved;
                BYTE SchedulingClass;
            };

            DWORD64 AllocationTag;
        } CpuSet;
    } u;
};

typedef struct _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION, *PSYSTEM_CPU_SET_INFORMATION;

typedef struct _SYSTEM_POOL_ZEROING_INFORMATION
{
    BOOLEAN PoolZeroingSupportPresent;
} SYSTEM_POOL_ZEROING_INFORMATION, *PSYSTEM_POOL_ZEROING_INFORMATION;

typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
{
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
typedef struct _XSTATE_FEATURE
{
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION
{

    DWORD64 EnabledFeatures;

    DWORD64 EnabledVolatileFeatures;

    DWORD Size;

    union
    {
        DWORD ControlFlags;
        struct
        {
            DWORD OptimizedSave : 1;
            DWORD CompactionEnabled : 1;
        };
    };

    XSTATE_FEATURE Features[(64)];

    DWORD64 EnabledSupervisorFeatures;

    DWORD64 AlignedFeatures;

    DWORD AllFeatureSize;

    DWORD AllFeatures[(64)];

    DWORD64 EnabledUserVisibleSupervisorFeatures;

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;

typedef struct _MEMORY_BASIC_INFORMATION
{
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32
{
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct _MEMORY_BASIC_INFORMATION64
{
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
typedef struct _CFG_CALL_TARGET_INFO
{
    ULONG_PTR Offset;
    ULONG_PTR Flags;
} CFG_CALL_TARGET_INFO, *PCFG_CALL_TARGET_INFO;
typedef struct _MEM_ADDRESS_REQUIREMENTS
{
    PVOID LowestStartingAddress;
    PVOID HighestEndingAddress;
    SIZE_T Alignment;
} MEM_ADDRESS_REQUIREMENTS, *PMEM_ADDRESS_REQUIREMENTS;
typedef enum MEM_EXTENDED_PARAMETER_TYPE
{
    MemExtendedParameterInvalidType = 0,
    MemExtendedParameterAddressRequirements,
    MemExtendedParameterNumaNode,
    MemExtendedParameterPartitionHandle,
    MemExtendedParameterUserPhysicalHandle,
    MemExtendedParameterAttributeFlags,
    MemExtendedParameterMax
} MEM_EXTENDED_PARAMETER_TYPE,
    *PMEM_EXTENDED_PARAMETER_TYPE;

typedef struct MEM_EXTENDED_PARAMETER
{

    struct
    {
        DWORD64 Type : 8;
        DWORD64 Reserved : 64 - 8;
    } s;

    union
    {
        DWORD64 ULong64;
        PVOID Pointer;
        SIZE_T Size;
        HANDLE Handle;
        DWORD ULong;
    } u;

} MEM_EXTENDED_PARAMETER, *PMEM_EXTENDED_PARAMETER;
typedef enum MEM_SECTION_EXTENDED_PARAMETER_TYPE
{
    MemSectionExtendedParameterInvalidType = 0,
    MemSectionExtendedParameterUserPhysicalFlags,
    MemSectionExtendedParameterNumaNode,
    MemSectionExtendedParameterMax
} MEM_SECTION_EXTENDED_PARAMETER_TYPE,
    *PMEM_SECTION_EXTENDED_PARAMETER_TYPE;

typedef struct _ENCLAVE_CREATE_INFO_SGX
{
    BYTE Secs[4096];
} ENCLAVE_CREATE_INFO_SGX, *PENCLAVE_CREATE_INFO_SGX;

typedef struct _ENCLAVE_INIT_INFO_SGX
{
    BYTE SigStruct[1808];
    BYTE Reserved1[240];
    BYTE EInitToken[304];
    BYTE Reserved2[1744];
} ENCLAVE_INIT_INFO_SGX, *PENCLAVE_INIT_INFO_SGX;

typedef struct _ENCLAVE_CREATE_INFO_VBS
{
    DWORD Flags;
    BYTE OwnerID[32];
} ENCLAVE_CREATE_INFO_VBS, *PENCLAVE_CREATE_INFO_VBS;

typedef struct _ENCLAVE_CREATE_INFO_VBS_BASIC
{
    DWORD Flags;
    BYTE OwnerID[32];
} ENCLAVE_CREATE_INFO_VBS_BASIC, *PENCLAVE_CREATE_INFO_VBS_BASIC;

typedef struct _ENCLAVE_LOAD_DATA_VBS_BASIC
{
    DWORD PageType;
} ENCLAVE_LOAD_DATA_VBS_BASIC, *PENCLAVE_LOAD_DATA_VBS_BASIC;

typedef struct _ENCLAVE_INIT_INFO_VBS_BASIC
{
    BYTE FamilyId[16];
    BYTE ImageId[16];
    ULONGLONG EnclaveSize;
    DWORD EnclaveSvn;
    DWORD Reserved;
    union
    {
        HANDLE SignatureInfoHandle;
        ULONGLONG Unused;
    } u;
} ENCLAVE_INIT_INFO_VBS_BASIC, *PENCLAVE_INIT_INFO_VBS_BASIC;

typedef struct _ENCLAVE_INIT_INFO_VBS
{
    DWORD Length;
    DWORD ThreadCount;
} ENCLAVE_INIT_INFO_VBS, *PENCLAVE_INIT_INFO_VBS;

typedef PVOID(ENCLAVE_TARGET_FUNCTION)(PVOID);
typedef ENCLAVE_TARGET_FUNCTION(*PENCLAVE_TARGET_FUNCTION);
typedef PENCLAVE_TARGET_FUNCTION LPENCLAVE_TARGET_FUNCTION;
typedef struct _FILE_ID_128
{
    BYTE Identifier[16];
} FILE_ID_128, *PFILE_ID_128;

typedef struct _FILE_NOTIFY_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;

typedef struct _FILE_NOTIFY_EXTENDED_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD Action;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastModificationTime;
    LARGE_INTEGER LastChangeTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER AllocatedLength;
    LARGE_INTEGER FileSize;
    DWORD FileAttributes;
    DWORD ReparsePointTag;
    LARGE_INTEGER FileId;
    LARGE_INTEGER ParentFileId;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_EXTENDED_INFORMATION, *PFILE_NOTIFY_EXTENDED_INFORMATION;
typedef union _FILE_SEGMENT_ELEMENT
{
    PVOID64 Buffer;
    ULONGLONG Alignment;
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
typedef struct _REPARSE_GUID_DATA_BUFFER
{
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct
    {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
typedef struct _REARRANGE_FILE_DATA
{

    ULONGLONG SourceStartingOffset;

    ULONGLONG TargetOffset;

    HANDLE SourceFileHandle;

    DWORD Length;

    DWORD Flags;

} REARRANGE_FILE_DATA, *PREARRANGE_FILE_DATA;

typedef enum _SYSTEM_POWER_STATE
{
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE,
    *PSYSTEM_POWER_STATE;

typedef enum
{
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject,
    PowerActionDisplayOff
} POWER_ACTION,
    *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE
{
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE,
    *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE
{
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE,
    *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE
{
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE,
    *PUSER_ACTIVITY_PRESENCE;

typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum
{
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;
typedef enum _POWER_REQUEST_TYPE
{
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE,
    *PPOWER_REQUEST_TYPE;
typedef struct CM_Power_Data_s
{
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;

typedef enum
{
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerRequestActionInternal,
    BatteryDeviceState,
    PowerInformationInternal,
    ThermalStandby,
    SystemHiberFileType,
    PhysicalPowerButtonPress,
    QueryPotentialDripsConstraint,
    EnergyTrackerCreate,
    EnergyTrackerQuery,
    UpdateBlackBoxRecorder,
    SessionAllowExternalDmaDevices,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;

typedef enum
{
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE,
    *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE
{
    POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;

typedef struct _POWER_SESSION_CONNECT
{
    BOOLEAN Connected;
    BOOLEAN Console;
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS
{
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;

typedef struct _POWER_SESSION_RIT_STATE
{
    BOOLEAN Active;
    DWORD LastInputTime;
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;

typedef struct _POWER_SESSION_WINLOGON
{
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;

typedef struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES
{
    BOOLEAN IsAllowed;
} POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES, *PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;

typedef struct _POWER_IDLE_RESILIENCY
{
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;

typedef enum
{
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonGracePeriod,
    MonitorRequestReasonPnP,
    MonitorRequestReasonDP,
    MonitorRequestReasonSxTransition,
    MonitorRequestReasonSystemIdle,
    MonitorRequestReasonNearProximity,
    MonitorRequestReasonThermalStandby,
    MonitorRequestReasonResumePdc,
    MonitorRequestReasonResumeS4,
    MonitorRequestReasonTerminal,
    MonitorRequestReasonPdcSignal,
    MonitorRequestReasonAcDcDisplayBurstSuppressed,
    MonitorRequestReasonSystemStateEntered,

    MonitorRequestReasonWinrt,
    MonitorRequestReasonUserInputKeyboard,
    MonitorRequestReasonUserInputMouse,
    MonitorRequestReasonUserInputTouch,
    MonitorRequestReasonUserInputPen,
    MonitorRequestReasonUserInputAccelerometer,
    MonitorRequestReasonUserInputHid,
    MonitorRequestReasonUserInputPoUserPresent,
    MonitorRequestReasonUserInputSessionSwitch,
    MonitorRequestReasonUserInputInitialization,
    MonitorRequestReasonPdcSignalWindowsMobilePwrNotif,
    MonitorRequestReasonPdcSignalWindowsMobileShell,
    MonitorRequestReasonPdcSignalHeyCortana,
    MonitorRequestReasonPdcSignalHolographicShell,
    MonitorRequestReasonPdcSignalFingerprint,
    MonitorRequestReasonDirectedDrips,
    MonitorRequestReasonDim,
    MonitorRequestReasonBuiltinPanel,
    MonitorRequestReasonDisplayRequiredUnDim,
    MonitorRequestReasonBatteryCountChangeSuppressed,
    MonitorRequestReasonResumeModernStandby,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;

typedef enum _POWER_MONITOR_REQUEST_TYPE
{
    MonitorRequestTypeOff,
    MonitorRequestTypeOnAndPresent,
    MonitorRequestTypeToggleOn
} POWER_MONITOR_REQUEST_TYPE;

typedef struct _POWER_MONITOR_INVOCATION
{
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;

typedef struct _RESUME_PERFORMANCE
{
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;

typedef enum
{
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct
{

    DWORD Version;

    GUID Guid;

    SYSTEM_POWER_CONDITION PowerCondition;

    DWORD DataLength;

    BYTE Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;

typedef struct
{
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;

typedef struct _APPLICATIONLAUNCH_SETTING_VALUE
{

    LARGE_INTEGER ActivationTime;

    DWORD Flags;

    DWORD ButtonInstanceID;

} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;

typedef enum _POWER_PLATFORM_ROLE
{
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleSlate,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE,
    *PPOWER_PLATFORM_ROLE;
typedef struct _POWER_PLATFORM_INFORMATION
{
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;

typedef struct
{
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;

typedef struct
{
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct
{
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct
{
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct
{
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct
{
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct
{
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct
{
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;

typedef struct
{
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct
{
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;

typedef struct
{
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct
{
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct
{
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;

typedef struct
{
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct
{
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct
{
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct
{
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;
#pragma warning(push)
#pragma warning(disable : 4121)

typedef struct
{
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;
#pragma warning(pop)

typedef struct
{
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
typedef struct
{
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;

typedef struct _SYSTEM_POWER_POLICY
{
    DWORD Revision;

    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;

    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;

    BYTE DynamicThrottle;
    BYTE Spare2[2];

    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;

    DWORD Spare3;

    DWORD DozeS4Timeout;

    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];

    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];

    DWORD SpindownTimeout;

    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;

typedef struct
{
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct
{
    WORD Revision;
    union
    {
        WORD AsWORD;
        struct
        {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        } s;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
typedef struct _PROCESSOR_POWER_POLICY_INFO
{

    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;

    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];

    DWORD AllowDemotion : 1;
    DWORD AllowPromotion : 1;
    DWORD Reserved : 30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;

typedef struct _PROCESSOR_POWER_POLICY
{
    DWORD Revision;

    BYTE DynamicThrottle;
    BYTE Spare[3];

    DWORD DisableCStates : 1;
    DWORD Reserved : 31;

    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;

typedef struct
{
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union
    {
        BYTE Spare;
        union
        {
            BYTE AsBYTE;
            struct
            {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy : 2;
                BYTE DecreasePolicy : 2;
                BYTE Reserved : 3;
            } s;
        } Flags;
    } u;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;

typedef struct _ADMINISTRATOR_POWER_POLICY
{

    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;

    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;

    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;

typedef enum _HIBERFILE_BUCKET_SIZE
{
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB,
    HiberFileBucket4GB,
    HiberFileBucket8GB,
    HiberFileBucket16GB,
    HiberFileBucket32GB,
    HiberFileBucketUnlimited,
    HiberFileBucketMax
} HIBERFILE_BUCKET_SIZE,
    *PHIBERFILE_BUCKET_SIZE;

typedef struct _HIBERFILE_BUCKET
{
    DWORD64 MaxPhysicalMemory;
    DWORD PhysicalMemoryPercent[0x03];
} HIBERFILE_BUCKET, *PHIBERFILE_BUCKET;

typedef struct
{

    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;

    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;

    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BOOLEAN Hiberboot;
    BOOLEAN WakeAlarmPresent;
    BOOLEAN AoAc;

    BOOLEAN DiskSpinDown;

    BYTE spare3[8];
    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];

    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct
{
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[3];

    BYTE Tag;

    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;

    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
#pragma pack(4)
#pragma pack(2)
typedef struct _IMAGE_DOS_HEADER
{
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER
{
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER
{
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;

typedef struct _IMAGE_FILE_HEADER
{
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_DATA_DIRECTORY
{
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

typedef struct _IMAGE_OPTIONAL_HEADER
{

    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;

    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;

typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;

typedef struct _IMAGE_NT_HEADERS64
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS
{
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;

typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
typedef struct ANON_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ
{

    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;

    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;

typedef struct _IMAGE_SECTION_HEADER
{
    BYTE Name[8];
    union
    {
        DWORD PhysicalAddress;
        DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
#pragma pack(2)

typedef struct _IMAGE_SYMBOL
{
    union
    {
        BYTE ShortName[8];
        struct
        {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;

typedef struct _IMAGE_SYMBOL_EX
{
    union
    {
        BYTE ShortName[8];
        struct
        {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;
#pragma pack(2)

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF
{
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef union _IMAGE_AUX_SYMBOL
{
    struct
    {
        DWORD TagIndex;
        union
        {
            struct
            {
                WORD Linenumber;
                WORD Size;
            } LnSz;
            DWORD TotalSize;
        } Misc;
        union
        {
            struct
            {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct
            {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct
    {
        BYTE Name[18];
    } File;
    struct
    {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct
    {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX
{
    struct
    {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct
    {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct
    {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct
    {
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    } s;
    struct
    {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE
{
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
typedef struct _IMAGE_RELOCATION
{
    union
    {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } u;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
typedef struct _IMAGE_LINENUMBER
{
    union
    {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;

typedef struct _IMAGE_BASE_RELOCATION
{
    DWORD VirtualAddress;
    DWORD SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_EXPORT_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;

typedef struct _IMAGE_IMPORT_BY_NAME
{
    WORD Hint;
    CHAR Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;
#pragma pack(8)

typedef struct _IMAGE_THUNK_DATA64
{
    union
    {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;

typedef struct _IMAGE_THUNK_DATA32
{
    union
    {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
typedef void (*PIMAGE_TLS_CALLBACK)(
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved);

typedef struct _IMAGE_TLS_DIRECTORY64
{
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union
    {
        DWORD Characteristics;
        struct
        {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } s;
    } u;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32
{
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union
    {
        DWORD Characteristics;
        struct
        {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } s;
    } u;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;

typedef struct _IMAGE_IMPORT_DESCRIPTOR
{
    union
    {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } u;
    DWORD TimeDateStamp;

    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR
{
    union
    {
        DWORD AllAttributes;
        struct
        {
            DWORD RvaBased : 1;
            DWORD ReservedAttributes : 31;
        } s;
    } Attributes;

    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;

} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;
typedef struct _IMAGE_RESOURCE_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
    union
    {
        struct
        {
            DWORD NameOffset : 31;
            DWORD NameIsString : 1;
        } s;
        DWORD Name;
        WORD Id;
    } u;
    union
    {
        DWORD OffsetToData;
        struct
        {
            DWORD OffsetToDirectory : 31;
            DWORD DataIsDirectory : 1;
        } s2;
    } u2;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING
{
    WORD Length;
    CHAR NameString[1];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;

typedef struct _IMAGE_RESOURCE_DIR_STRING_U
{
    WORD Length;
    WCHAR NameString[1];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY
{
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY
{
    WORD Flags;
    WORD Catalog;
    DWORD CatalogOffset;
    DWORD Reserved;
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;

typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE
{
    DWORD Version;
    DWORD Size;

} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE;

typedef struct _IMAGE_DYNAMIC_RELOCATION32
{
    DWORD Symbol;
    DWORD BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION32, *PIMAGE_DYNAMIC_RELOCATION32;

typedef struct _IMAGE_DYNAMIC_RELOCATION64
{
    ULONGLONG Symbol;
    DWORD BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION64, *PIMAGE_DYNAMIC_RELOCATION64;

typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2
{
    DWORD HeaderSize;
    DWORD FixupInfoSize;
    DWORD Symbol;
    DWORD SymbolGroup;
    DWORD Flags;

} IMAGE_DYNAMIC_RELOCATION32_V2, *PIMAGE_DYNAMIC_RELOCATION32_V2;

typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2
{
    DWORD HeaderSize;
    DWORD FixupInfoSize;
    ULONGLONG Symbol;
    DWORD SymbolGroup;
    DWORD Flags;

} IMAGE_DYNAMIC_RELOCATION64_V2, *PIMAGE_DYNAMIC_RELOCATION64_V2;

typedef IMAGE_DYNAMIC_RELOCATION32 IMAGE_DYNAMIC_RELOCATION;
typedef PIMAGE_DYNAMIC_RELOCATION32 PIMAGE_DYNAMIC_RELOCATION;
typedef IMAGE_DYNAMIC_RELOCATION32_V2 IMAGE_DYNAMIC_RELOCATION_V2;
typedef PIMAGE_DYNAMIC_RELOCATION32_V2 PIMAGE_DYNAMIC_RELOCATION_V2;

typedef struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER
{
    BYTE PrologueByteCount;

} IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER *PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;

typedef struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER
{
    DWORD EpilogueCount;
    BYTE EpilogueByteCount;
    BYTE BranchDescriptorElementSize;
    WORD BranchDescriptorCount;

} IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER *PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;

typedef struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
{
    DWORD PageRelativeOffset : 12;
    DWORD IndirectCall : 1;
    DWORD IATIndex : 19;
} IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION *PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;

typedef struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
{
    WORD PageRelativeOffset : 12;
    WORD IndirectCall : 1;
    WORD RexWPrefix : 1;
    WORD CfgCheck : 1;
    WORD Reserved : 1;
} IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION *PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;

typedef struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
{
    WORD PageRelativeOffset : 12;
    WORD RegisterNumber : 4;
} IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
typedef IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION *PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
    DWORD GuardCFCheckFunctionPointer;
    DWORD GuardCFDispatchFunctionPointer;
    DWORD GuardCFFunctionTable;
    DWORD GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    DWORD GuardAddressTakenIatEntryTable;
    DWORD GuardAddressTakenIatEntryCount;
    DWORD GuardLongJumpTargetTable;
    DWORD GuardLongJumpTargetCount;
    DWORD DynamicValueRelocTable;
    DWORD CHPEMetadataPointer;
    DWORD GuardRFFailureRoutine;
    DWORD GuardRFFailureRoutineFunctionPointer;
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    DWORD GuardRFVerifyStackPointerFunctionPointer;
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    DWORD EnclaveConfigurationPointer;
    DWORD VolatileMetadataPointer;
    DWORD GuardEHContinuationTable;
    DWORD GuardEHContinuationCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
    ULONGLONG GuardCFCheckFunctionPointer;
    ULONGLONG GuardCFDispatchFunctionPointer;
    ULONGLONG GuardCFFunctionTable;
    ULONGLONG GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONGLONG GuardAddressTakenIatEntryTable;
    ULONGLONG GuardAddressTakenIatEntryCount;
    ULONGLONG GuardLongJumpTargetTable;
    ULONGLONG GuardLongJumpTargetCount;
    ULONGLONG DynamicValueRelocTable;
    ULONGLONG CHPEMetadataPointer;
    ULONGLONG GuardRFFailureRoutine;
    ULONGLONG GuardRFFailureRoutineFunctionPointer;
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    ULONGLONG EnclaveConfigurationPointer;
    ULONGLONG VolatileMetadataPointer;
    ULONGLONG GuardEHContinuationTable;
    ULONGLONG GuardEHContinuationCount;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;

typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;

typedef struct _IMAGE_HOT_PATCH_INFO
{
    DWORD Version;
    DWORD Size;
    DWORD SequenceNumber;
    DWORD BaseImageList;
    DWORD BaseImageCount;
    DWORD BufferOffset;
    DWORD ExtraPatchSize;
} IMAGE_HOT_PATCH_INFO, *PIMAGE_HOT_PATCH_INFO;

typedef struct _IMAGE_HOT_PATCH_BASE
{
    DWORD SequenceNumber;
    DWORD Flags;
    DWORD OriginalTimeDateStamp;
    DWORD OriginalCheckSum;
    DWORD CodeIntegrityInfo;
    DWORD CodeIntegritySize;
    DWORD PatchTable;
    DWORD BufferOffset;
} IMAGE_HOT_PATCH_BASE, *PIMAGE_HOT_PATCH_BASE;

typedef struct _IMAGE_HOT_PATCH_HASHES
{
    BYTE SHA256[32];
    BYTE SHA1[20];
} IMAGE_HOT_PATCH_HASHES, *PIMAGE_HOT_PATCH_HASHES;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    union
    {
        DWORD UnwindData;
        struct
        {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } s;
    } u;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef enum ARM64_FNPDATA_FLAGS
{
    PdataRefToFullXdata = 0,
    PdataPackedUnwindFunction = 1,
    PdataPackedUnwindFragment = 2,
} ARM64_FNPDATA_FLAGS;

typedef enum ARM64_FNPDATA_CR
{
    PdataCrUnchained = 0,
    PdataCrUnchainedSavedLr = 1,
    PdataCrChainedWithPac = 2,
    PdataCrChained = 3,
} ARM64_FNPDATA_CR;

typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    union
    {
        DWORD UnwindData;
        struct
        {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD RegF : 3;
            DWORD RegI : 4;
            DWORD H : 1;
            DWORD CR : 2;
            DWORD FrameSize : 9;
        } s;
    } u;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;

typedef union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA
{
    DWORD HeaderData;
    struct
    {
        DWORD FunctionLength : 18;
        DWORD Version : 2;
        DWORD ExceptionDataPresent : 1;
        DWORD EpilogInHeader : 1;
        DWORD EpilogCount : 5;
        DWORD CodeWords : 5;
    };
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    union
    {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } u;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ENCLAVE_CONFIG32
{
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    DWORD EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG32, *PIMAGE_ENCLAVE_CONFIG32;

typedef struct _IMAGE_ENCLAVE_CONFIG64
{
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    ULONGLONG EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG64, *PIMAGE_ENCLAVE_CONFIG64;

typedef IMAGE_ENCLAVE_CONFIG32 IMAGE_ENCLAVE_CONFIG;
typedef PIMAGE_ENCLAVE_CONFIG32 PIMAGE_ENCLAVE_CONFIG;

typedef struct _IMAGE_ENCLAVE_IMPORT
{
    DWORD MatchType;
    DWORD MinimumSecurityVersion;
    BYTE UniqueOrAuthorID[32];
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImportName;
    DWORD Reserved;
} IMAGE_ENCLAVE_IMPORT, *PIMAGE_ENCLAVE_IMPORT;
typedef struct _IMAGE_DEBUG_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER
{
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;

typedef struct _FPO_DATA
{
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;

typedef struct _IMAGE_DEBUG_MISC
{
    DWORD DataType;
    DWORD Length;

    BOOLEAN Unicode;
    BYTE Reserved[3];
    BYTE Data[1];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;

typedef struct _IMAGE_FUNCTION_ENTRY
{
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64
{
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union
    {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } u;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER
{
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO
{
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;

} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
typedef struct _ImageArchitectureHeader
{
    unsigned int AmaskValue : 1;

    int : 7;
    unsigned int AmaskShift : 8;
    int : 16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry
{
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

typedef struct IMPORT_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union
    {
        WORD Ordinal;
        WORD Hint;
    } u;

    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,

    IMPORT_OBJECT_NAME_EXPORTAS = 4,
} IMPORT_OBJECT_NAME_TYPE;

typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY = 0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,
    COMIMAGE_FLAGS_32BITPREFERRED = 0x00020000,

    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,

    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,

    IMAGE_COR_MIH_METHODRVA = 0x01,
    IMAGE_COR_MIH_EHRVA = 0x02,
    IMAGE_COR_MIH_BASICBLOCK = 0x08,

    COR_VTABLE_32BIT = 0x01,
    COR_VTABLE_64BIT = 0x02,
    COR_VTABLE_FROM_UNMANAGED = 0x04,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x08,
    COR_VTABLE_CALL_MOST_DERIVED = 0x10,

    IMAGE_COR_EATJ_THUNK_SIZE = 32,

    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024,
} ReplacesCorHdrNumericDefines;

typedef struct IMAGE_COR20_HEADER
{

    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;

    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;

    union
    {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } u;

    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;

    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;

    IMAGE_DATA_DIRECTORY ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY, *PSLIST_ENTRY;
typedef union _SLIST_HEADER
{
    ULONGLONG Alignment;
    struct
    {
        SLIST_ENTRY Next;
        WORD Depth;
        WORD CpuId;
    } s;
} SLIST_HEADER, *PSLIST_HEADER;
typedef union _RTL_RUN_ONCE
{
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;

typedef struct _RTL_BARRIER
{
    DWORD Reserved1;
    DWORD Reserved2;
    ULONG_PTR Reserved3[2];
    DWORD Reserved4;
    DWORD Reserved5;
} RTL_BARRIER, *PRTL_BARRIER;
typedef struct _MESSAGE_RESOURCE_ENTRY
{
    WORD Length;
    WORD Flags;
    BYTE Text[1];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;

typedef struct _MESSAGE_RESOURCE_BLOCK
{
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA
{
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[1];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;

typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;

typedef struct _OSVERSIONINFOEXA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[128];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;

typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
typedef enum _RTL_UMS_THREAD_INFO_CLASS
{
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS,
    *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON
{
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON,
    *PRTL_UMS_SCHEDULER_REASON;

typedef

    void

    RTL_UMS_SCHEDULER_ENTRY_POINT(
        RTL_UMS_SCHEDULER_REASON Reason,
        ULONG_PTR ActivationPayload,
        PVOID SchedulerParam);

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
typedef enum _IMAGE_POLICY_ENTRY_TYPE
{
    ImagePolicyEntryTypeNone = 0,
    ImagePolicyEntryTypeBool,
    ImagePolicyEntryTypeInt8,
    ImagePolicyEntryTypeUInt8,
    ImagePolicyEntryTypeInt16,
    ImagePolicyEntryTypeUInt16,
    ImagePolicyEntryTypeInt32,
    ImagePolicyEntryTypeUInt32,
    ImagePolicyEntryTypeInt64,
    ImagePolicyEntryTypeUInt64,
    ImagePolicyEntryTypeAnsiString,
    ImagePolicyEntryTypeUnicodeString,
    ImagePolicyEntryTypeOverride,
    ImagePolicyEntryTypeMaximum
} IMAGE_POLICY_ENTRY_TYPE;

typedef enum _IMAGE_POLICY_ID
{
    ImagePolicyIdNone = 0,
    ImagePolicyIdEtw,
    ImagePolicyIdDebug,
    ImagePolicyIdCrashDump,
    ImagePolicyIdCrashDumpKey,
    ImagePolicyIdCrashDumpKeyGuid,
    ImagePolicyIdParentSd,
    ImagePolicyIdParentSdRev,
    ImagePolicyIdSvn,
    ImagePolicyIdDeviceId,
    ImagePolicyIdCapability,
    ImagePolicyIdScenarioId,
    ImagePolicyIdMaximum
} IMAGE_POLICY_ID;

typedef struct _IMAGE_POLICY_ENTRY
{
    IMAGE_POLICY_ENTRY_TYPE Type;
    IMAGE_POLICY_ID PolicyId;
    union
    {
        const void *None;
        BOOLEAN BoolValue;
        INT8 Int8Value;
        UINT8 UInt8Value;
        INT16 Int16Value;
        UINT16 UInt16Value;
        INT32 Int32Value;
        UINT32 UInt32Value;
        INT64 Int64Value;
        UINT64 UInt64Value;
        PCSTR AnsiStringValue;
        PCWSTR UnicodeStringValue;
    } u;
} IMAGE_POLICY_ENTRY;
typedef const IMAGE_POLICY_ENTRY *PCIMAGE_POLICY_ENTRY;
typedef struct _IMAGE_POLICY_METADATA
{
    BYTE Version;
    BYTE Reserved0[7];
    ULONGLONG ApplicationId;
    IMAGE_POLICY_ENTRY Policies[];
} IMAGE_POLICY_METADATA;
typedef const IMAGE_POLICY_METADATA *PCIMAGE_POLICY_METADATA;
typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;

typedef struct _RTL_CRITICAL_SECTION
{
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

typedef struct _RTL_SRWLOCK
{
    PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;

typedef struct _RTL_CONDITION_VARIABLE
{
    PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;

typedef void (*PAPCFUNC)(
    ULONG_PTR Parameter);
typedef LONG (*PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo);

typedef enum _HEAP_INFORMATION_CLASS
{

    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1
} HEAP_INFORMATION_CLASS;
typedef void (*WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN);
typedef void (*WORKERCALLBACKFUNC)(PVOID);
typedef void (*APC_CALLBACK_FUNCTION)(DWORD, PVOID, PVOID);
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef void (*PFLS_CALLBACK_FUNCTION)(
    PVOID lpFlsData);

typedef BOOLEAN (*PSECURE_MEMORY_CACHE_CALLBACK)(
    PVOID Addr,
    SIZE_T Range);

typedef enum _ACTIVATION_CONTEXT_INFO_CLASS
{
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,

    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;

typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX
{
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, *PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;

typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;

typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
{
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT
{
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
    ULONGLONG MaxVersionTested;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;
typedef struct _SUPPORTED_OS_INFO
{
    WORD MajorVersion;
    WORD MinorVersion;
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _MAXVERSIONTESTED_INFO
{
    ULONGLONG MaxVersionTested;
} MAXVERSIONTESTED_INFO, *PMAXVERSIONTESTED_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef struct _HARDWARE_COUNTER_DATA
{
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;

typedef struct _PERFORMANCE_DATA
{
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;

typedef struct _EVENTLOGRECORD
{
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
} EVENTLOGRECORD, *PEVENTLOGRECORD;

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;

typedef enum _CM_SERVICE_NODE_TYPE
{
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE
{
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE
{
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
typedef struct _TAPE_ERASE
{
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
typedef struct _TAPE_PREPARE
{
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;

typedef struct _TAPE_WRITE_MARKS
{
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;

typedef struct _TAPE_GET_POSITION
{
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION
{
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
typedef struct _TAPE_GET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;

typedef struct _TAPE_SET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;

typedef struct _TAPE_GET_MEDIA_PARAMETERS
{
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;

typedef struct _TAPE_SET_MEDIA_PARAMETERS
{
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;

typedef struct _TAPE_CREATE_PARTITION
{
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
typedef struct _TAPE_WMI_OPERATIONS
{
    DWORD Method;
    DWORD DataBufferSize;
    PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;

typedef enum _TAPE_DRIVE_PROBLEM_TYPE
{
    TapeDriveProblemNone,
    TapeDriveReadWriteWarning,
    TapeDriveReadWriteError,
    TapeDriveReadWarning,
    TapeDriveWriteWarning,
    TapeDriveReadError,
    TapeDriveWriteError,
    TapeDriveHardwareError,
    TapeDriveUnsupportedMedia,
    TapeDriveScsiConnectionError,
    TapeDriveTimetoClean,
    TapeDriveCleanDriveNow,
    TapeDriveMediaLifeExpired,
    TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;

typedef GUID UOW;
typedef UOW *PUOW;
typedef GUID CRM_PROTOCOL_ID;
typedef CRM_PROTOCOL_ID *PCRM_PROTOCOL_ID;
typedef ULONG NOTIFICATION_MASK;

typedef struct _TRANSACTION_NOTIFICATION
{
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
{
    GUID EnlistmentId;
    UOW uow;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
{
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID;
typedef SAVEPOINT_ID *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
{
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
{
    ULONG PropagationCookie;
    GUID uow;
    GUID TmIdentity;
    ULONG BufferLength;

} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
{
    ULONG MarshalCookie;
    GUID uow;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
typedef TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;

typedef struct _KCRM_MARSHAL_HEADER
{
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, *PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB
{
    UOW uow;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, *PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB
{
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, *PRKCRM_PROTOCOL_BLOB;
typedef enum _TRANSACTION_OUTCOME
{
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;

typedef enum _TRANSACTION_STATE
{
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;

typedef struct _TRANSACTION_BASIC_INFORMATION
{
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION
{
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION
{
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION
{
    DWORD LogPathLength;
    WCHAR LogPath[1];

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION
{
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION
{
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;

typedef struct _TRANSACTION_PROPERTIES_INFORMATION
{
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;

typedef struct _TRANSACTION_BIND_INFORMATION
{
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR
{
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION
{
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
{
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

typedef struct _RESOURCEMANAGER_BASIC_INFORMATION
{
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION
{
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;

typedef enum _TRANSACTION_INFORMATION_CLASS
{
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation,
    TransactionBindInformation,
    TransactionDTCPrivateInformation,
} TRANSACTION_INFORMATION_CLASS;

typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS
{
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4,
    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5
} TRANSACTIONMANAGER_INFORMATION_CLASS;

typedef enum _RESOURCEMANAGER_INFORMATION_CLASS
{
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;

typedef struct _ENLISTMENT_BASIC_INFORMATION
{
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION
{
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;

typedef enum _ENLISTMENT_INFORMATION_CLASS
{
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY
{
    UOW uow;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION
{
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;

typedef enum _KTMOBJECT_TYPE
{

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE,
    *PKTMOBJECT_TYPE;

typedef struct _KTMOBJECT_CURSOR
{

    GUID LastQuery;

    DWORD ObjectIdCount;

    GUID ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;
typedef DWORD TP_VERSION, *PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (*PTP_SIMPLE_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context);

typedef struct _TP_POOL TP_POOL, *PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY
{
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION
{
    SIZE_T StackReserve;
    SIZE_T StackCommit;
} TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;

typedef void (*PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
    PVOID ObjectContext,
    PVOID CleanupContext);
typedef struct _TP_CALLBACK_ENVIRON_V1
{
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union
    {
        DWORD Flags;
        struct
        {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
} TP_CALLBACK_ENVIRON_V1;

typedef TP_CALLBACK_ENVIRON_V1 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (*PTP_TIMER_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PTP_TIMER Timer);

typedef DWORD TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (*PTP_WAIT_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PTP_WAIT Wait,
    TP_WAIT_RESULT WaitResult);

typedef struct _TP_IO TP_IO, *PTP_IO;
typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;
typedef int (*FARPROC)();
typedef int (*NEARPROC)();
typedef int (*PROC)();
typedef WORD ATOM;

struct HKEY__
{
    int unused;
};
typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__
{
    int unused;
};
typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__
{
    int unused;
};
typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;
struct HRGN__
{
    int unused;
};
typedef struct HRGN__ *HRGN;
struct HRSRC__
{
    int unused;
};
typedef struct HRSRC__ *HRSRC;
struct HSPRITE__
{
    int unused;
};
typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__
{
    int unused;
};
typedef struct HLSURF__ *HLSURF;
struct HSTR__
{
    int unused;
};
typedef struct HSTR__ *HSTR;
struct HTASK__
{
    int unused;
};
typedef struct HTASK__ *HTASK;
struct HWINSTA__
{
    int unused;
};
typedef struct HWINSTA__ *HWINSTA;
struct HKL__
{
    int unused;
};
typedef struct HKL__ *HKL;

typedef int HFILE;
typedef struct _FILETIME
{
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;

struct HWND__
{
    int unused;
};
typedef struct HWND__ *HWND;
struct HHOOK__
{
    int unused;
};
typedef struct HHOOK__ *HHOOK;

typedef void *HGDIOBJ;
struct HACCEL__
{
    int unused;
};
typedef struct HACCEL__ *HACCEL;

struct HBITMAP__
{
    int unused;
};
typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__
{
    int unused;
};
typedef struct HBRUSH__ *HBRUSH;

struct HCOLORSPACE__
{
    int unused;
};
typedef struct HCOLORSPACE__ *HCOLORSPACE;

struct HDC__
{
    int unused;
};
typedef struct HDC__ *HDC;

struct HGLRC__
{
    int unused;
};
typedef struct HGLRC__ *HGLRC;
struct HDESK__
{
    int unused;
};
typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__
{
    int unused;
};
typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__
{
    int unused;
};
typedef struct HFONT__ *HFONT;

struct HICON__
{
    int unused;
};
typedef struct HICON__ *HICON;

struct HMENU__
{
    int unused;
};
typedef struct HMENU__ *HMENU;

struct HPALETTE__
{
    int unused;
};
typedef struct HPALETTE__ *HPALETTE;
struct HPEN__
{
    int unused;
};
typedef struct HPEN__ *HPEN;

struct HWINEVENTHOOK__
{
    int unused;
};
typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;

struct HMONITOR__
{
    int unused;
};
typedef struct HMONITOR__ *HMONITOR;

struct HUMPD__
{
    int unused;
};
typedef struct HUMPD__ *HUMPD;

typedef HICON HCURSOR;
typedef DWORD COLORREF;

typedef DWORD *LPCOLORREF;

typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef const RECT *LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL *LPCRECTL;

typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT x;
    SHORT y;
} POINTS, *PPOINTS, *LPPOINTS;

typedef struct APP_LOCAL_DEVICE_ID
{
    BYTE value[32];
} APP_LOCAL_DEVICE_ID;

struct DPI_AWARENESS_CONTEXT__
{
    int unused;
};
typedef struct DPI_AWARENESS_CONTEXT__ *DPI_AWARENESS_CONTEXT;

typedef enum DPI_AWARENESS
{
    DPI_AWARENESS_INVALID = -1,
    DPI_AWARENESS_UNAWARE = 0,
    DPI_AWARENESS_SYSTEM_AWARE = 1,
    DPI_AWARENESS_PER_MONITOR_AWARE = 2
} DPI_AWARENESS;

typedef enum DPI_HOSTING_BEHAVIOR
{
    DPI_HOSTING_BEHAVIOR_INVALID = -1,
    DPI_HOSTING_BEHAVIOR_DEFAULT = 0,
    DPI_HOSTING_BEHAVIOR_MIXED = 1
} DPI_HOSTING_BEHAVIOR;
typedef struct _SECURITY_ATTRIBUTES
{
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED
{
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union
    {
        struct
        {
            DWORD Offset;
            DWORD OffsetHigh;
        } s;
        PVOID Pointer;
    } u;

    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY
{
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
typedef struct _SYSTEMTIME
{
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;

typedef struct _WIN32_FIND_DATAA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[260];
    CHAR cAlternateFileName[14];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;

typedef enum _FINDEX_INFO_LEVELS
{
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;
typedef enum _FINDEX_SEARCH_OPS
{
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
typedef enum _GET_FILEEX_INFO_LEVELS
{
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;

typedef enum _FILE_INFO_BY_HANDLE_CLASS
{
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS,
    *PFILE_INFO_BY_HANDLE_CLASS;

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef void (*LPOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPOVERLAPPED lpOverlapped);

typedef struct _PROCESS_HEAP_ENTRY
{
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union
    {
        struct
        {
            HANDLE hMem;
            DWORD dwReserved[3];
        } Block;
        struct
        {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } u;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;

typedef struct _REASON_CONTEXT
{
    ULONG Version;
    DWORD Flags;
    union
    {
        struct
        {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
typedef DWORD (*PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter);
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef LPVOID (*PENCLAVE_ROUTINE)(
    LPVOID lpThreadParameter);
typedef PENCLAVE_ROUTINE LPENCLAVE_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO
{
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO
{
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO
{
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO
{
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO
{
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO
{
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO
{
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO
{
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO
{
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;

typedef struct _DEBUG_EVENT
{
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union
    {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;

typedef PCONTEXT LPCONTEXT;
typedef struct DISK_SPACE_INFORMATION
{
    ULONGLONG ActualTotalAllocationUnits;
    ULONGLONG ActualAvailableAllocationUnits;
    ULONGLONG ActualPoolUnavailableAllocationUnits;
    ULONGLONG CallerTotalAllocationUnits;
    ULONGLONG CallerAvailableAllocationUnits;
    ULONGLONG CallerPoolUnavailableAllocationUnits;

    ULONGLONG UsedAllocationUnits;

    ULONGLONG TotalReservedAllocationUnits;

    ULONGLONG VolumeStorageReserveAllocationUnits;
    ULONGLONG AvailableCommittedAllocationUnits;

    ULONGLONG PoolAvailableAllocationUnits;

    DWORD SectorsPerAllocationUnit;
    DWORD BytesPerSector;

} DISK_SPACE_INFORMATION;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

typedef struct _BY_HANDLE_FILE_INFORMATION
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

typedef enum _STREAM_INFO_LEVELS
{

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA
{

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[260 + 36];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

typedef LONG (*PTOP_LEVEL_EXCEPTION_FILTER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo);

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

typedef struct _HEAP_SUMMARY
{
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;

typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
typedef BOOL (*PINIT_ONCE_FN)(
    PINIT_ONCE InitOnce,
    PVOID Parameter,
    PVOID *Context);

typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;

typedef struct _PROCESS_INFORMATION
{
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA
{
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW
{
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;

typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;

typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

typedef enum _THREAD_INFORMATION_CLASS
{
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadDynamicCodePolicy,
    ThreadPowerThrottling,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;
typedef struct _THREAD_POWER_THROTTLING_STATE
{
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
} THREAD_POWER_THROTTLING_STATE;

typedef enum _PROCESS_INFORMATION_CLASS
{
    ProcessMemoryPriority,
    ProcessMemoryExhaustionInfo,
    ProcessAppMemoryInfo,
    ProcessInPrivateInfo,
    ProcessPowerThrottling,
    ProcessReservedValue1,
    ProcessTelemetryCoverageInfo,
    ProcessProtectionLevelInfo,
    ProcessLeapSecondInfo,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;

typedef struct _APP_MEMORY_INFORMATION
{
    ULONG64 AvailableCommit;
    ULONG64 PrivateCommitUsage;
    ULONG64 PeakPrivateCommitUsage;
    ULONG64 TotalCommitUsage;
} APP_MEMORY_INFORMATION, *PAPP_MEMORY_INFORMATION;

typedef enum _PROCESS_MEMORY_EXHAUSTION_TYPE
{
    PMETypeFailFastOnCommitFailure,
    PMETypeMax
} PROCESS_MEMORY_EXHAUSTION_TYPE,
    *PPROCESS_MEMORY_EXHAUSTION_TYPE;

typedef struct _PROCESS_MEMORY_EXHAUSTION_INFO
{
    USHORT Version;
    USHORT Reserved;
    PROCESS_MEMORY_EXHAUSTION_TYPE Type;
    ULONG_PTR Value;
} PROCESS_MEMORY_EXHAUSTION_INFO, *PPROCESS_MEMORY_EXHAUSTION_INFO;

typedef struct _PROCESS_POWER_THROTTLING_STATE
{
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
} PROCESS_POWER_THROTTLING_STATE, *PPROCESS_POWER_THROTTLING_STATE;

typedef struct PROCESS_PROTECTION_LEVEL_INFORMATION
{
    DWORD ProtectionLevel;
} PROCESS_PROTECTION_LEVEL_INFORMATION;

typedef struct _PROCESS_LEAP_SECOND_INFO
{
    ULONG Flags;
    ULONG Reserved;
} PROCESS_LEAP_SECOND_INFO, *PPROCESS_LEAP_SECOND_INFO;

typedef struct _SYSTEM_INFO
{
    union
    {
        DWORD dwOemId;
        struct
        {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } s;
    } u;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;

typedef struct _MEMORYSTATUSEX
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

typedef enum _COMPUTER_NAME_FORMAT
{
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT;

typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE
{
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

typedef void (*PTP_WIN32_IO_CALLBACK)(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID Context,
    PVOID Overlapped,
    ULONG IoResult,
    ULONG_PTR NumberOfBytesTransferred,
    PTP_IO Io);

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PCWSTR VolumeName;
    ULONG BaseIoSize;
    ULONG ControlFlags;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION;

typedef struct tagENUMUILANG
{
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;

typedef BOOL (*ENUMRESLANGPROCA)(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    WORD wLanguage,
    LONG_PTR lParam);
typedef BOOL (*ENUMRESLANGPROCW)(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    WORD wLanguage,
    LONG_PTR lParam);

typedef BOOL (*ENUMRESNAMEPROCA)(
    HMODULE hModule,
    LPCSTR lpType,
    LPSTR lpName,
    LONG_PTR lParam);
typedef BOOL (*ENUMRESNAMEPROCW)(
    HMODULE hModule,
    LPCWSTR lpType,
    LPWSTR lpName,
    LONG_PTR lParam);

typedef BOOL (*ENUMRESTYPEPROCA)(
    HMODULE hModule,
    LPSTR lpType,
    LONG_PTR lParam);
typedef BOOL (*ENUMRESTYPEPROCW)(
    HMODULE hModule,
    LPWSTR lpType,
    LONG_PTR lParam);

typedef BOOL (*PGET_MODULE_HANDLE_EXA)(
    DWORD dwFlags,
    LPCSTR lpModuleName,
    HMODULE *phModule);
typedef BOOL (*PGET_MODULE_HANDLE_EXW)(
    DWORD dwFlags,
    LPCWSTR lpModuleName,
    HMODULE *phModule);

typedef struct _REDIRECTION_FUNCTION_DESCRIPTOR
{
    PCSTR DllName;
    PCSTR FunctionName;
    PVOID RedirectionTarget;
} REDIRECTION_FUNCTION_DESCRIPTOR, *PREDIRECTION_FUNCTION_DESCRIPTOR;

typedef const REDIRECTION_FUNCTION_DESCRIPTOR *PCREDIRECTION_FUNCTION_DESCRIPTOR;

typedef struct _REDIRECTION_DESCRIPTOR
{
    ULONG Version;
    ULONG FunctionCount;
    PCREDIRECTION_FUNCTION_DESCRIPTOR Redirections;
} REDIRECTION_DESCRIPTOR, *PREDIRECTION_DESCRIPTOR;

typedef const REDIRECTION_DESCRIPTOR *PCREDIRECTION_DESCRIPTOR;

typedef void (*PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter);
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (*PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter);

typedef PLDT_ENTRY LPLDT_ENTRY;
typedef struct _COMMPROP
{
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP, *LPCOMMPROP;

typedef struct _COMSTAT
{
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
typedef struct _DCB
{
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary : 1;
    DWORD fParity : 1;
    DWORD fOutxCtsFlow : 1;
    DWORD fOutxDsrFlow : 1;
    DWORD fDtrControl : 2;
    DWORD fDsrSensitivity : 1;
    DWORD fTXContinueOnXoff : 1;
    DWORD fOutX : 1;
    DWORD fInX : 1;
    DWORD fErrorChar : 1;
    DWORD fNull : 1;
    DWORD fRtsControl : 2;
    DWORD fAbortOnError : 1;
    DWORD fDummy2 : 17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS
{
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS, *LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG
{
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG, *LPCOMMCONFIG;

typedef struct _MEMORYSTATUS
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;

typedef struct _JIT_DEBUG_INFO
{
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO32 *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64;
typedef JIT_DEBUG_INFO64 *LPJIT_DEBUG_INFO64;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;

typedef struct _OFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;

typedef enum _PROC_THREAD_ATTRIBUTE_NUM
{
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeHandleList = 2,
    ProcThreadAttributeProtectionLevel = 11,
    ProcThreadAttributeMitigationAuditPolicy = 24,

} PROC_THREAD_ATTRIBUTE_NUM;

typedef UINT (*PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR lpBuffer, UINT uSize);
typedef UINT (*PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR lpBuffer, UINT uSize);

typedef DWORD (*LPPROGRESS_ROUTINE)(
    LARGE_INTEGER TotalFileSize,
    LARGE_INTEGER TotalBytesTransferred,
    LARGE_INTEGER StreamSize,
    LARGE_INTEGER StreamBytesTransferred,
    DWORD dwStreamNumber,
    DWORD dwCallbackReason,
    HANDLE hSourceFile,
    HANDLE hDestinationFile,
    LPVOID lpData);

typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
} EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

typedef struct tagHW_PROFILE_INFOA
{
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW
{
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;

typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;

typedef struct _TIME_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[128];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

typedef struct _SYSTEM_POWER_STATUS
{
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE SystemStatusFlag;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

typedef struct tagACTCTXA
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;

typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;

typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;

typedef PCACTCTXA PCACTCTX;

typedef struct tagACTCTX_SECTION_KEYED_DATA_2600
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;

typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef BOOL (*PQUERYACTCTXW_FUNC)(
    DWORD dwFlags,
    HANDLE hActCtx,
    PVOID pvSubInstance,
    ULONG ulInfoClass,
    PVOID pvBuffer,
    SIZE_T cbBuffer,
    SIZE_T *pcbWrittenOrRequired);

typedef DWORD (*APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
typedef struct _FILE_BASIC_INFO
{
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO
{
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO
{
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef struct _FILE_CASE_SENSITIVE_INFO
{
    ULONG Flags;
} FILE_CASE_SENSITIVE_INFO, *PFILE_CASE_SENSITIVE_INFO;

typedef struct _FILE_RENAME_INFO
{

    union
    {
        BOOLEAN ReplaceIfExists;
        DWORD Flags;
    } u;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO
{
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO
{
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO
{
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO
{
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO
{
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO
{
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;
typedef struct _FILE_DISPOSITION_INFO_EX
{
    DWORD Flags;
} FILE_DISPOSITION_INFO_EX, *PFILE_DISPOSITION_INFO_EX;

typedef struct _FILE_ID_BOTH_DIR_INFO
{
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT
{
    IoPriorityHintVeryLow = 0,
    IoPriorityHintLow,
    IoPriorityHintNormal,
    MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO
{
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;
typedef struct _FILE_REMOTE_PROTOCOL_INFO
{

    USHORT StructureVersion;
    USHORT StructureSize;

    ULONG Protocol;

    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;

    ULONG Flags;

    struct
    {
        ULONG Reserved[8];
    } GenericReserved;

    struct
    {
        ULONG Reserved[16];
    } ProtocolSpecificReserved;
} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

typedef enum _FILE_ID_TYPE
{
    FileIdType,
    ObjectIdType,
    ExtendedFileIdType,
    MaximumFileIdType
} FILE_ID_TYPE,
    *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR
{
    DWORD dwSize;
    FILE_ID_TYPE Type;
    union
    {
        LARGE_INTEGER FileId;
        GUID ObjectId;
    } u;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

typedef struct _DRAWPATRECT
{
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;

typedef struct _PSINJECTDATA
{

    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;

} PSINJECTDATA, *PPSINJECTDATA;

typedef struct _PSFEATURE_OUTPUT
{

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;
typedef struct _PSFEATURE_CUSTPAPER
{

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;

typedef struct tagXFORM
{
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
} XFORM, *PXFORM, *LPXFORM;

typedef struct tagBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
} BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;

typedef struct tagRGBTRIPLE
{
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;

typedef struct tagRGBQUAD
{
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
} RGBQUAD;

typedef RGBQUAD *LPRGBQUAD;
typedef LONG LCSCSTYPE;

typedef LONG LCSGAMUTMATCH;
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;

typedef struct tagCIEXYZ
{
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
} CIEXYZ;

typedef CIEXYZ *LPCIEXYZ;

typedef struct tagICEXYZTRIPLE
{
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;

typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;

typedef struct tagLOGCOLORSPACEA
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;

typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;

typedef struct tagBITMAPCOREHEADER
{
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

typedef struct tagBITMAPINFOHEADER
{
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

typedef struct
{
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;

typedef struct
{
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;

typedef struct tagBITMAPINFO
{
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;

typedef struct tagBITMAPCOREINFO
{
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

typedef struct tagBITMAPFILEHEADER
{
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;

typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;

typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;

typedef struct tagHANDLETABLE
{
    HGDIOBJ objectHandle[1];
} HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

typedef struct tagMETARECORD
{
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
} METARECORD;

typedef struct tagMETARECORD *PMETARECORD;
typedef struct tagMETARECORD *LPMETARECORD;

typedef struct tagMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
} METAFILEPICT, *LPMETAFILEPICT;

typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETAHEADER *LPMETAHEADER;

typedef struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;

    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;

    WORD sReserved;
    DWORD nDescription;

    DWORD offDescription;

    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;

    DWORD cbPixelFormat;

    DWORD offPixelFormat;

    DWORD bOpenGL;

    SIZEL szlMicrometers;

} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

typedef BYTE BCHAR;

typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;

typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;

typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;

typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;

typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXW;

typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;

typedef struct tagPELARRAY
{
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
} PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;

typedef struct tagLOGBRUSH
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
} LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
} LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;

typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN *NPPATTERN;
typedef PATTERN *LPPATTERN;

typedef struct tagLOGPEN
{
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
} LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;

typedef struct tagEXTLOGPEN
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;

typedef struct tagEXTLOGPEN32
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;

typedef struct tagPALETTEENTRY
{
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;

typedef struct tagLOGPALETTE
{
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;

typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;

typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;

typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, *LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, *LPENUMLOGFONTW;

typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;

typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;

typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;

typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, *LPPANOSE;
typedef struct tagEXTLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;

typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;

typedef struct _devicemodeA
{
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union
    {

        struct
        {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        } s;

        struct
        {
            POINTL dmPosition;
            DWORD dmDisplayOrientation;
            DWORD dmDisplayFixedOutput;
        } s2;
    } u;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union
    {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    } u2;
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;

} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW
{
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union
    {

        struct
        {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        } s;

        struct
        {
            POINTL dmPosition;
            DWORD dmDisplayOrientation;
            DWORD dmDisplayFixedOutput;
        } s2;
    } u;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union
    {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    } u2;
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;

} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;

typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;

typedef struct _DISPLAY_DEVICEA
{
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW
{
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;

typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;

typedef struct _RGNDATAHEADER
{
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA
{
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;

typedef struct _ABC
{
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, *NPABC, *LPABC;

typedef struct _ABCFLOAT
{
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;

typedef struct _OUTLINETEXTMETRICA
{
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW
{
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;

typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;

typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;

typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;

typedef struct _FIXED
{
    WORD fract;
    short value;
} FIXED;

typedef struct _MAT2
{
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
} MAT2, *LPMAT2;

typedef struct _GLYPHMETRICS
{
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;

typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, *LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, *LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, *LPTTPOLYGONHEADER;

typedef struct tagGCP_RESULTSA
{
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
} GCP_RESULTSA, *LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
{
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
} GCP_RESULTSW, *LPGCP_RESULTSW;

typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;

typedef struct _RASTERIZER_STATUS
{
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;

typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;

typedef int (*OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (*OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;

typedef FONTENUMPROCA FONTENUMPROC;

typedef int (*GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (*LINEDDAPROC)(int, int, LPARAM);
typedef UINT (*LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD (*LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;

typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;

typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;

typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;

typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;

typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;

typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;

typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;

typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;

typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
} TRIVERTEX, *PTRIVERTEX, *LPTRIVERTEX;

typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE, *PGRADIENT_TRIANGLE, *LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
} GRADIENT_RECT, *PGRADIENT_RECT, *LPGRADIENT_RECT;

typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
} BLENDFUNCTION, *PBLENDFUNCTION;

typedef int (*MFENUMPROC)(HDC hdc, HANDLETABLE *lpht, METARECORD *lpMR, int nObj, LPARAM param);
typedef int (*ENHMFENUMPROC)(HDC hdc, HANDLETABLE *lpht, const ENHMETARECORD *lpmr, int nHandles, LPARAM data);

typedef struct tagDIBSECTION
{
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;

typedef struct tagCOLORADJUSTMENT
{
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;

typedef BOOL (*ABORTPROC)(HDC, int);
typedef struct _DOCINFOA
{
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;

    LPCSTR lpszDatatype;
    DWORD fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW
{
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;

    LPCWSTR lpszDatatype;
    DWORD fwType;

} DOCINFOW, *LPDOCINFOW;

typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;

typedef struct tagKERNINGPAIR
{
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

typedef int (*ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (*ICMENUMPROCW)(LPWSTR, LPARAM);

typedef struct tagEMR
{
    DWORD iType;
    DWORD nSize;

} EMR, *PEMR;

typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;

} EMRTEXT, *PEMRTEXT;

typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
    EMRBEGINPATH, *PEMRBEGINPATH,
    EMRENDPATH, *PEMRENDPATH,
    EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
    EMRFLATTENPATH, *PEMRFLATTENPATH,
    EMRWIDENPATH, *PEMRWIDENPATH,
    EMRSETMETARGN, *PEMRSETMETARGN,
    EMRSAVEDC, *PEMRSAVEDC,
    EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
    EMRSETBKMODE, *PEMRSETBKMODE,
    EMRSETMAPMODE, *PEMRSETMAPMODE,

    EMRSETLAYOUT, *PEMRSETLAYOUT,

    EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
    EMRSETROP2, *PEMRSETROP2,
    EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
    EMRSETICMMODE, *PEMRSETICMMODE,
    EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;

} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
    EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
    EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;

} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO, EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH, EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH, EMRSTROKEPATH, *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT, EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX, EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX, EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
    EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
    EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE,
    EMRRECTANGLE, *PEMRRECTANGLE;

typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
    EMRARCTO, *PEMRARCTO,
    EMRCHORD, *PEMRCHORD,
    EMRPIE, *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
    EMRPOLYBEZIER, *PEMRPOLYBEZIER,
    EMRPOLYGON, *PEMRPOLYGON,
    EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
    EMRPOLYLINETO, *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
    EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
    EMRPOLYGON16, *PEMRPOLYGON16,
    EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
    EMRPOLYLINETO16, *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
    EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
    EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
    EMRPAINTRGN, *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;

} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
    EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];

} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
    EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;

} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;

    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN32 elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;

} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;

    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;

} EMRFORMAT, *PEMRFORMAT;

typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
    EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
    EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;

typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
} EMREXTESCAPE, *PEMREXTESCAPE,
    EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;

typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
    EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
    EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;

typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;

typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
} EMRGRADIENTFILL, *PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;

typedef struct _POINTFLOAT
{
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT
{
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;

typedef struct tagLAYERPLANEDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;

typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;

typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;

typedef MENUTEMPLATEA MENUTEMPLATE;

typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;

typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
typedef LRESULT (*WNDPROC)(HWND, UINT, WPARAM, LPARAM);
typedef INT_PTR (*DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (*TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);

typedef BOOL (*GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (*WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (*HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (*SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (*PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (*PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (*PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (*PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (*EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (*EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);

typedef BOOL (*DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);

typedef PROPENUMPROCA PROPENUMPROC;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;

typedef BOOL (*NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (*NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
typedef WINSTAENUMPROCA WINSTAENUMPROC;
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;

typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;
typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;
typedef struct
{
    HWND hwnd;
    RECT rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;
typedef struct tagEVENTMSG
{
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;
typedef struct tagCWPSTRUCT
{
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;
typedef struct tagCWPRETSTRUCT
{
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;
typedef struct tagKBDLLHOOKSTRUCT
{
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;
typedef struct tagMSLLHOOKSTRUCT
{
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, *LPDEBUGHOOKINFO;
typedef struct tagMOUSEHOOKSTRUCT
{
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;

typedef struct tagMOUSEHOOKSTRUCTEX
{
    MOUSEHOOKSTRUCT s;
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;
typedef struct tagHARDWAREHOOKSTRUCT
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
typedef struct tagMOUSEMOVEPOINT
{
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, *LPMOUSEMOVEPOINT;

typedef struct tagWNDCLASSEXA
{
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW
{
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;

typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;

typedef struct tagWNDCLASSA
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;

typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
typedef struct tagMSG
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
} MSG, *PMSG, *NPMSG, *LPMSG;

typedef struct tagMINMAXINFO
{
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;

typedef struct tagCOPYDATASTRUCT
{
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;

typedef struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, *PMDINEXTMENU, *LPMDINEXTMENU;

typedef struct
{
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;

typedef struct tagWINDOWPOS
{
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;
typedef struct tagNCCALCSIZE_PARAMS
{
    RECT rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;

typedef struct tagTRACKMOUSEEVENT
{
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

typedef struct tagACCEL
{

    BYTE fVirt;
    WORD key;
    WORD cmd;
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT
{
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;

typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;

typedef struct tagWINDOWPLACEMENT
{
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;

typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
} NMHDR;

typedef NMHDR *LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, *LPSTYLESTRUCT;

typedef struct tagMEASUREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;
typedef struct tagDRAWITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;
typedef struct tagDELETEITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;
typedef struct tagCOMPAREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;

typedef struct
{
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;

typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;

typedef PVOID HPOWERNOTIFY;
typedef HPOWERNOTIFY *PHPOWERNOTIFY;

typedef BOOLEAN (*PREGISTERCLASSNAMEW)(LPCWSTR);

typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT *pptDst;
    const SIZE *psize;
    HDC hdcSrc;
    const POINT *pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION *pblend;
    DWORD dwFlags;
    const RECT *prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;

typedef struct
{
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

typedef struct
{
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;

typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

typedef LPDLGTEMPLATEA LPDLGTEMPLATE;

typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
typedef struct
{
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;

typedef enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
{
    DCDC_DEFAULT = 0x0000,
    DCDC_DISABLE_FONT_UPDATE = 0x0001,
    DCDC_DISABLE_RELAYOUT = 0x0002,
} DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;

typedef enum DIALOG_DPI_CHANGE_BEHAVIORS
{
    DDC_DEFAULT = 0x0000,
    DDC_DISABLE_ALL = 0x0001,
    DDC_DISABLE_RESIZE = 0x0002,
    DDC_DISABLE_CONTROL_RELAYOUT = 0x0004,
} DIALOG_DPI_CHANGE_BEHAVIORS;

typedef struct tagMOUSEINPUT
{
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, *LPMOUSEINPUT;

typedef struct tagKEYBDINPUT
{
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, *LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT
{
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, *LPHARDWAREINPUT;

typedef struct tagINPUT
{
    DWORD type;

    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    } u;
} INPUT, *PINPUT, *LPINPUT;

typedef struct tagLASTINPUTINFO
{
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, *PLASTINPUTINFO;

typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;

typedef struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;

typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, *PMENUGETOBJECTINFO;
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOW, *LPMENUITEMINFOW;

typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;

typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

typedef LPCMENUITEMINFOA LPCMENUITEMINFO;

typedef struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;

typedef struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;

typedef struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
} HELPINFO, *LPHELPINFO;

typedef void (*MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;

typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;

typedef struct
{
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct
{
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;

typedef struct _ICONINFO
{
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

typedef struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;

typedef struct _ICONINFOEXA
{
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW
{
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
} ICONINFOEXW, *PICONINFOEXW;

typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;

typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;

typedef struct tagMDICREATESTRUCTA
{
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW
{
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;

typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;

typedef struct tagCLIENTCREATESTRUCT
{
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA
{

    DWORD mkSize;
    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW
{

    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;

typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;

typedef struct tagHELPWININFOA
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;

typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;

typedef struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, *LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, *LPNONCLIENTMETRICSW;

typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;

typedef struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;

typedef struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;

typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;

typedef struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;

typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;

typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;

typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;

typedef struct _VIDEOPARAMETERS
{
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;

typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;

typedef struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;

typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;

typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;

typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;

typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;

typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;

typedef struct tagAUDIODESCRIPTION
{
    UINT cbSize;
    BOOL Enabled;
    LCID Locale;
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;

typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;
typedef struct tagMONITORINFOEXA
{
    MONITORINFO s;
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW
{
    MONITORINFO s;
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;

typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;

typedef BOOL (*MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

typedef void (*WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD idEventThread,
    DWORD dwmsEventTime);

typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, *LPGUITHREADINFO;

typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;

typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;

typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;
typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    BOOL fBarFocused : 1;
    BOOL fFocused : 1;
    BOOL fUnused : 30;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

struct HRAWINPUT__
{
    int unused;
};
typedef struct HRAWINPUT__ *HRAWINPUT;
typedef struct tagRAWINPUTHEADER
{
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;

typedef struct tagRAWMOUSE
{
    USHORT usFlags;
    union
    {
        ULONG ulButtons;
        struct
        {
            USHORT usButtonFlags;
            USHORT usButtonData;
        } s;
    } u;
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;

typedef struct tagRAWKEYBOARD
{
    USHORT MakeCode;
    USHORT Flags;

    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;

} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;

typedef struct tagRAWHID
{
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;

typedef struct tagRAWINPUT
{
    RAWINPUTHEADER header;
    union
    {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;

typedef struct tagRID_DEVICE_INFO_MOUSE
{
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD
{
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID
{
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO
{
    DWORD cbSize;
    DWORD dwType;
    union
    {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    } u;
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

typedef struct tagRAWINPUTDEVICE
{
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE *PCRAWINPUTDEVICE;

typedef struct tagRAWINPUTDEVICELIST
{
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

typedef struct _cpinfoexA
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;

typedef struct _cpinfoexW
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;

typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;

typedef struct _numberfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;

typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;

typedef struct _currencyfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;

typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;

enum SYSNLS_FUNCTION
{
    COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;
typedef struct _nlsversioninfo
{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;

typedef struct _nlsversioninfoex
{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;
enum SYSGEOTYPE
{
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME = 0x0008,
    GEO_OFFICIALNAME = 0x0009,
    GEO_TIMEZONES = 0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER = 0x000C,
    GEO_PARENT = 0x000D,
    GEO_DIALINGCODE = 0x000E,
    GEO_CURRENCYCODE = 0x000F,
    GEO_CURRENCYSYMBOL = 0x0010,
};

enum SYSGEOCLASS
{
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
};

typedef BOOL (*LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (*LOCALE_ENUMPROCW)(LPWSTR);

typedef enum _NORM_FORM
{
    NormalizationOther = 0,
    NormalizationC = 0x1,
    NormalizationD = 0x2,
    NormalizationKC = 0x5,

    NormalizationKD = 0x6

} NORM_FORM;

typedef DWORD LGRPID;
typedef DWORD CALID;
typedef LONG GEOID;
typedef BOOL (*LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);

typedef BOOL (*LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (*UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (*CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (*DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (*DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (*TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (*CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (*CALINFO_ENUMPROCEXA)(LPSTR, CALID);

typedef BOOL (*LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);

typedef BOOL (*LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (*UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (*CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (*DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (*DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (*TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (*CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (*CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (*GEO_ENUMPROC)(GEOID);

typedef struct _FILEMUIINFO
{
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO;

typedef BOOL (*CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);
typedef BOOL (*DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);
typedef BOOL (*TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);
typedef BOOL (*LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

typedef struct _COORD
{
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT
{
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD
{
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union
    {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
typedef struct _MOUSE_EVENT_RECORD
{
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
typedef struct _WINDOW_BUFFER_SIZE_RECORD
{
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD
{
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD
{
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD
{
    WORD EventType;
    union
    {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;
typedef struct _CHAR_INFO
{
    union
    {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;

typedef struct _CONSOLE_FONT_INFO
{
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;

typedef void *HPCON;

typedef struct _CONSOLE_READCONSOLE_CONTROL
{
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

typedef BOOL (*PHANDLER_ROUTINE)(
    DWORD CtrlType);

typedef struct _CONSOLE_CURSOR_INFO
{
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFO
{
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_FONT_INFOEX
{
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;

typedef struct _CONSOLE_SELECTION_INFO
{
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;

typedef struct _CONSOLE_HISTORY_INFO
{
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

typedef struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;

typedef LONG LSTATUS;

typedef ACCESS_MASK REGSAM;

struct val_context
{
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
};

typedef struct val_context *PVALCONTEXT;

typedef struct pvalueA
{
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
} PVALUEA, *PPVALUEA;
typedef struct pvalueW
{
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
} PVALUEW, *PPVALUEW;

typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;

typedef DWORD QUERYHANDLER(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
                           LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);

typedef QUERYHANDLER *PQUERYHANDLER;

typedef struct provider_info
{
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
} REG_PROVIDER;

typedef struct provider_info *PPROVIDER;

typedef struct value_entA
{
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
} VALENTA, *PVALENTA;
typedef struct value_entW
{
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
} VALENTW, *PVALENTW;

typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
typedef struct _NETRESOURCEA
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment;
    LPSTR lpProvider;
} NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment;
    LPWSTR lpProvider;
} NETRESOURCEW, *LPNETRESOURCEW;

typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;

typedef struct _CONNECTDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;

typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;

typedef struct _DISCDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;

typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;

typedef struct _UNIVERSAL_NAME_INFOA
{
    LPSTR lpUniversalName;
} UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW
{
    LPWSTR lpUniversalName;
} UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;

typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;

typedef struct _REMOTE_NAME_INFOA
{
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
} REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW
{
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
} REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;

typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;

typedef struct _NETINFOSTRUCT
{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;

typedef struct
{

    unsigned short bAppReturnCode : 8,
        reserved : 6,
        fBusy : 1,
        fAck : 1;
} DDEACK;
typedef struct
{

    unsigned short reserved : 14,
        fDeferUpd : 1,
        fAckReq : 1;
    short cfFormat;
} DDEADVISE;
typedef struct
{

    unsigned short unused : 12,
        fResponse : 1,
        fRelease : 1,
        reserved : 1,
        fAckReq : 1;
    short cfFormat;
    BYTE Value[1];
} DDEDATA;
typedef struct
{

    unsigned short unused : 13,

        fRelease : 1,
        fReserved : 2;
    short cfFormat;
    BYTE Value[1];

} DDEPOKE;
typedef struct
{

    unsigned short unused : 13,
        fRelease : 1,
        fDeferUpd : 1,
        fAckReq : 1;
    short cfFormat;
} DDELN;

typedef struct
{

    unsigned short unused : 12,
        fAck : 1,
        fRelease : 1,
        fReserved : 1,
        fAckReq : 1;
    short cfFormat;
    BYTE rgb[1];
} DDEUP;

struct HCONVLIST__
{
    int unused;
};
typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__
{
    int unused;
};
typedef struct HCONV__ *HCONV;
struct HSZ__
{
    int unused;
};
typedef struct HSZ__ *HSZ;
struct HDDEDATA__
{
    int unused;
};
typedef struct HDDEDATA__ *HDDEDATA;

typedef struct tagHSZPAIR
{
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR, *PHSZPAIR;
typedef struct tagCONVCONTEXT
{
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
} CONVCONTEXT, *PCONVCONTEXT;

typedef struct tagCONVINFO
{
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
} CONVINFO, *PCONVINFO;
typedef HDDEDATA FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
                            HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef HDDEDATA (*PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
                                HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef struct tagDDEML_MSG_HOOK_DATA
{
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD Data[8];
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;

typedef struct tagMONMSGSTRUCT
{
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT
{
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD Data[8];
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA
{
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW
{
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;

typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;

typedef struct tagMONERRSTRUCT
{
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT
{
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    BOOL fEstablished;
    BOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    BOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT
{
    UINT cb;
    BOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
} MONCONVSTRUCT, *PMONCONVSTRUCT;

typedef struct tagCRGB
{
    BYTE bRed;
    BYTE bGreen;
    BYTE bBlue;
    BYTE bExtra;
} CRGB;

typedef UINT MMVERSION;
typedef UINT MMRESULT;

typedef UINT *LPUINT;

typedef struct mmtime_tag
{
    UINT wType;
    union
    {
        DWORD ms;
        DWORD sample;
        DWORD cb;
        DWORD ticks;

        struct
        {
            BYTE hour;
            BYTE min;
            BYTE sec;
            BYTE frame;
            BYTE fps;
            BYTE dummy;

            BYTE pad[2];

        } smpte;

        struct
        {
            DWORD songptrpos;
        } midi;
    } u;
} MMTIME, *PMMTIME, *NPMMTIME, *LPMMTIME;
struct HDRVR__
{
    int unused;
};
typedef struct HDRVR__ *HDRVR;
typedef void(DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef DRVCALLBACK *LPDRVCALLBACK;

typedef DRVCALLBACK *PDRVCALLBACK;
typedef DWORD MCIERROR;

typedef UINT MCIDEVICEID;

typedef UINT (*YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);

typedef struct tagMCI_GENERIC_PARMS
{
    DWORD_PTR dwCallback;
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS, *LPMCI_GENERIC_PARMS;

typedef struct tagMCI_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;

typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
typedef struct tagMCI_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS, *LPMCI_PLAY_PARMS;

typedef struct tagMCI_SEEK_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS, *LPMCI_SEEK_PARMS;

typedef struct tagMCI_STATUS_PARMS
{
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS, *LPMCI_STATUS_PARMS;

typedef struct tagMCI_INFO_PARMSA
{
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSA, *LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW
{
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSW, *LPMCI_INFO_PARMSW;

typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
typedef struct tagMCI_GETDEVCAPS_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS, *LPMCI_GETDEVCAPS_PARMS;

typedef struct tagMCI_SYSINFO_PARMSA
{
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, *LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW
{
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, *LPMCI_SYSINFO_PARMSW;

typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
typedef struct tagMCI_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
} MCI_SET_PARMS, *PMCI_SET_PARMS, *LPMCI_SET_PARMS;

typedef struct tagMCI_BREAK_PARMS
{
    DWORD_PTR dwCallback;

    int nVirtKey;
    HWND hwndBreak;
} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS, *LPMCI_BREAK_PARMS;

typedef struct tagMCI_SAVE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, *LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, *LPMCI_SAVE_PARMSW;

typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
typedef struct tagMCI_LOAD_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, *LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, *LPMCI_LOAD_PARMSW;

typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
typedef struct tagMCI_RECORD_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_RECORD_PARMS, *LPMCI_RECORD_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS, *LPMCI_VD_PLAY_PARMS;

typedef struct tagMCI_VD_STEP_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS, *LPMCI_VD_STEP_PARMS;

typedef struct tagMCI_VD_ESCAPE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;

typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
typedef struct tagMCI_WAVE_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;

typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS, *LPMCI_WAVE_DELETE_PARMS;

typedef struct tagMCI_WAVE_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;

    UINT wInput;
    UINT wOutput;
    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS, *LPMCI_WAVE_SET_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS, *LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_ANIM_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;

typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
typedef struct tagMCI_ANIM_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS, *LPMCI_ANIM_PLAY_PARMS;

typedef struct tagMCI_ANIM_STEP_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS, *LPMCI_ANIM_STEP_PARMS;

typedef struct tagMCI_ANIM_WINDOW_PARMSA
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, *LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, *LPMCI_ANIM_WINDOW_PARMSW;

typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS
{
    DWORD_PTR dwCallback;

    RECT rc;

} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;

typedef struct tagMCI_ANIM_UPDATE_PARMS
{
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS, *LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_OVLY_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;

typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
typedef struct tagMCI_OVLY_WINDOW_PARMSA
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, *LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, *LPMCI_OVLY_WINDOW_PARMSW;

typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS
{
    DWORD_PTR dwCallback;

    RECT rc;

} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS, *LPMCI_OVLY_RECT_PARMS;

typedef struct tagMCI_OVLY_SAVE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, *LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, *LPMCI_OVLY_SAVE_PARMSW;

typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, *LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, *LPMCI_OVLY_LOAD_PARMSW;

typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;

typedef struct DRVCONFIGINFOEX
{
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX, *NPDRVCONFIGINFOEX, *LPDRVCONFIGINFOEX;
typedef struct tagDRVCONFIGINFO
{
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
} DRVCONFIGINFO, *PDRVCONFIGINFO, *NPDRVCONFIGINFO, *LPDRVCONFIGINFO;
typedef LRESULT (*DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

typedef DWORD (*DRIVERMSGPROC)(DWORD, DWORD, DWORD_PTR, DWORD_PTR, DWORD_PTR);

typedef DWORD FOURCC;
typedef char *HPSTR;
struct HMMIO__
{
    int unused;
};
typedef struct HMMIO__ *HMMIO;
typedef LRESULT(MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
                          LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC *LPMMIOPROC;

typedef struct _MMIOINFO
{

    DWORD dwFlags;
    FOURCC fccIOProc;
    LPMMIOPROC pIOProc;
    UINT wErrorRet;
    HTASK htask;

    LONG cchBuffer;
    HPSTR pchBuffer;
    HPSTR pchNext;
    HPSTR pchEndRead;
    HPSTR pchEndWrite;
    LONG lBufOffset;

    LONG lDiskOffset;
    DWORD adwInfo[3];

    DWORD dwReserved1;
    DWORD dwReserved2;
    HMMIO hmmio;
} MMIOINFO, *PMMIOINFO, *NPMMIOINFO, *LPMMIOINFO;
typedef const MMIOINFO *LPCMMIOINFO;

typedef struct _MMCKINFO
{
    FOURCC ckid;
    DWORD cksize;
    FOURCC fccType;
    DWORD dwDataOffset;
    DWORD dwFlags;
} MMCKINFO, *PMMCKINFO, *NPMMCKINFO, *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;

typedef void(TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
typedef TIMECALLBACK *LPTIMECALLBACK;

struct HWAVE__
{
    int unused;
};
typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__
{
    int unused;
};
typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__
{
    int unused;
};
typedef struct HWAVEOUT__ *HWAVEOUT;
typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
typedef struct wavehdr_tag
{
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD_PTR reserved;
} WAVEHDR, *PWAVEHDR, *NPWAVEHDR, *LPWAVEHDR;
typedef struct tagWAVEOUTCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;

typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;

typedef struct tagWAVEOUTCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;

typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
typedef struct tagWAVEINCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;

typedef WAVEINCAPSA WAVEINCAPS;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef LPWAVEINCAPSA LPWAVEINCAPS;

typedef struct tagWAVEINCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;

typedef WAVEINCAPS2A WAVEINCAPS2;
typedef PWAVEINCAPS2A PWAVEINCAPS2;
typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
typedef struct waveformat_tag
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
} WAVEFORMAT, *PWAVEFORMAT, *NPWAVEFORMAT, *LPWAVEFORMAT;

typedef struct pcmwaveformat_tag
{
    WAVEFORMAT wf;
    WORD wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT, *NPPCMWAVEFORMAT, *LPPCMWAVEFORMAT;
typedef struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;

} WAVEFORMATEX, *PWAVEFORMATEX, *NPWAVEFORMATEX, *LPWAVEFORMATEX;

typedef const WAVEFORMATEX *LPCWAVEFORMATEX;

struct HMIDI__
{
    int unused;
};
typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__
{
    int unused;
};
typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__
{
    int unused;
};
typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__
{
    int unused;
};
typedef struct HMIDISTRM__ *HMIDISTRM;
typedef HMIDI *LPHMIDI;
typedef HMIDIIN *LPHMIDIIN;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HMIDISTRM *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD *LPKEYARRAY;
typedef struct tagMIDIOUTCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;

typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;

typedef struct tagMIDIOUTCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;

typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
typedef struct tagMIDIINCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];

    DWORD dwSupport;

} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];

    DWORD dwSupport;

} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;

typedef MIDIINCAPSA MIDIINCAPS;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef LPMIDIINCAPSA LPMIDIINCAPS;

typedef struct tagMIDIINCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];

    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];

    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;

typedef MIDIINCAPS2A MIDIINCAPS2;
typedef PMIDIINCAPS2A PMIDIINCAPS2;
typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
typedef struct midihdr_tag
{
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    struct midihdr_tag *lpNext;
    DWORD_PTR reserved;

    DWORD dwOffset;
    DWORD_PTR dwReserved[8];

} MIDIHDR, *PMIDIHDR, *NPMIDIHDR, *LPMIDIHDR;

typedef struct midievent_tag
{
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD dwParms[1];
} MIDIEVENT;

typedef struct midistrmbuffver_tag
{
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
} MIDISTRMBUFFVER;
typedef struct midiproptimediv_tag
{
    DWORD cbStruct;
    DWORD dwTimeDiv;
} MIDIPROPTIMEDIV, *LPMIDIPROPTIMEDIV;

typedef struct midiproptempo_tag
{
    DWORD cbStruct;
    DWORD dwTempo;
} MIDIPROPTEMPO, *LPMIDIPROPTEMPO;

typedef struct tagAUXCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;

typedef AUXCAPSA AUXCAPS;
typedef PAUXCAPSA PAUXCAPS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef LPAUXCAPSA LPAUXCAPS;

typedef struct tagAUXCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;

typedef AUXCAPS2A AUXCAPS2;
typedef PAUXCAPS2A PAUXCAPS2;
typedef NPAUXCAPS2A NPAUXCAPS2;
typedef LPAUXCAPS2A LPAUXCAPS2;

struct HMIXEROBJ__
{
    int unused;
};
typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef HMIXEROBJ *LPHMIXEROBJ;

struct HMIXER__
{
    int unused;
};
typedef struct HMIXER__ *HMIXER;
typedef HMIXER *LPHMIXER;

typedef struct tagMIXERCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;

typedef MIXERCAPSA MIXERCAPS;
typedef PMIXERCAPSA PMIXERCAPS;
typedef LPMIXERCAPSA LPMIXERCAPS;

typedef struct tagMIXERCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;

typedef MIXERCAPS2A MIXERCAPS2;
typedef PMIXERCAPS2A PMIXERCAPS2;
typedef LPMIXERCAPS2A LPMIXERCAPS2;

typedef struct tagMIXERLINEA
{
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR szShortName[16];
    CHAR szName[64];
    struct
    {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW
{
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR szShortName[16];
    WCHAR szName[64];
    struct
    {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;

typedef MIXERLINEA MIXERLINE;
typedef PMIXERLINEA PMIXERLINE;
typedef LPMIXERLINEA LPMIXERLINE;

typedef struct tagMIXERCONTROLA
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR szShortName[16];
    CHAR szName[64];
    union
    {
        struct
        {
            LONG lMinimum;
            LONG lMaximum;
        } s;
        struct
        {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } s2;
        DWORD dwReserved[6];
    } Bounds;
    union
    {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR szShortName[16];
    WCHAR szName[64];
    union
    {
        struct
        {
            LONG lMinimum;
            LONG lMaximum;
        } s;
        struct
        {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } s2;
        DWORD dwReserved[6];
    } Bounds;
    union
    {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;

typedef MIXERCONTROLA MIXERCONTROL;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
typedef struct tagMIXERLINECONTROLSA
{
    DWORD cbStruct;
    DWORD dwLineID;
    union
    {
        DWORD dwControlID;
        DWORD dwControlType;
    } u;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW
{
    DWORD cbStruct;
    DWORD dwLineID;
    union
    {
        DWORD dwControlID;
        DWORD dwControlType;
    } u;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;

typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;

typedef struct tMIXERCONTROLDETAILS
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    union
    {
        HWND hwndOwner;
        DWORD cMultipleItems;
    } u;
    DWORD cbDetails;
    LPVOID paDetails;
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS, *LPMIXERCONTROLDETAILS;

typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA
{
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW
{
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;

typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN
{
    LONG fValue;
} MIXERCONTROLDETAILS_BOOLEAN,
    *PMIXERCONTROLDETAILS_BOOLEAN,
    *LPMIXERCONTROLDETAILS_BOOLEAN;

typedef struct tMIXERCONTROLDETAILS_SIGNED
{
    LONG lValue;
} MIXERCONTROLDETAILS_SIGNED,
    *PMIXERCONTROLDETAILS_SIGNED,
    *LPMIXERCONTROLDETAILS_SIGNED;

typedef struct tMIXERCONTROLDETAILS_UNSIGNED
{
    DWORD dwValue;
} MIXERCONTROLDETAILS_UNSIGNED,
    *PMIXERCONTROLDETAILS_UNSIGNED,
    *LPMIXERCONTROLDETAILS_UNSIGNED;

typedef struct timecaps_tag
{
    UINT wPeriodMin;
    UINT wPeriodMax;
} TIMECAPS, *PTIMECAPS, *NPTIMECAPS, *LPTIMECAPS;

typedef struct tagJOYCAPSA
{
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;

    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];

} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW
{
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;

    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];

} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;

typedef JOYCAPSA JOYCAPS;
typedef PJOYCAPSA PJOYCAPS;
typedef NPJOYCAPSA NPJOYCAPS;
typedef LPJOYCAPSA LPJOYCAPS;

typedef struct tagJOYCAPS2A
{
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W
{
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;

typedef JOYCAPS2A JOYCAPS2;
typedef PJOYCAPS2A PJOYCAPS2;
typedef NPJOYCAPS2A NPJOYCAPS2;
typedef LPJOYCAPS2A LPJOYCAPS2;
typedef struct joyinfo_tag
{
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
} JOYINFO, *PJOYINFO, *NPJOYINFO, *LPJOYINFO;

typedef struct joyinfoex_tag
{
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
} JOYINFOEX, *PJOYINFOEX, *NPJOYINFOEX, *LPJOYINFOEX;

typedef struct _NCB
{
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR ncb_callname[16];
    UCHAR ncb_name[16];
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void (*ncb_post)(struct _NCB *);
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;

    UCHAR ncb_reserve[10];

    HANDLE ncb_event;

} NCB, *PNCB;
typedef struct _ADAPTER_STATUS
{
    UCHAR adapter_address[6];
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;

    WORD iframe_recv_err;

    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;

    WORD iframe_xmit_err;

    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

typedef struct _NAME_BUFFER
{
    UCHAR name[16];
    UCHAR name_num;
    UCHAR name_flags;
} NAME_BUFFER, *PNAME_BUFFER;
typedef struct _SESSION_HEADER
{
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;

typedef struct _SESSION_BUFFER
{
    UCHAR lsn;
    UCHAR state;
    UCHAR local_name[16];
    UCHAR remote_name[16];
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;
typedef struct _LANA_ENUM
{
    UCHAR length;
    UCHAR lana[254 + 1];
} LANA_ENUM, *PLANA_ENUM;
typedef struct _FIND_NAME_HEADER
{
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;

typedef struct _FIND_NAME_BUFFER
{
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR destination_addr[6];
    UCHAR source_addr[6];
    UCHAR routing_info[18];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;
typedef struct _ACTION_HEADER
{
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
} ACTION_HEADER, *PACTION_HEADER;

typedef void *I_RPC_HANDLE;

typedef long RPC_STATUS;

typedef unsigned char *RPC_CSTR;

typedef unsigned short *RPC_WSTR;
typedef const unsigned short *RPC_CWSTR;

typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
typedef GUID UUID;

typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;

typedef struct _UUID_VECTOR
{
    unsigned long Count;
    UUID *Uuid[1];
} UUID_VECTOR;

typedef void *RPC_IF_HANDLE;

typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;

typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char *Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short *Protseq[1];
} RPC_PROTSEQ_VECTORW;
typedef struct _RPC_POLICY
{
    unsigned int Length;
    unsigned long EndpointFlags;
    unsigned long NICFlags;
} RPC_POLICY, *PRPC_POLICY;

typedef void
RPC_OBJECT_INQ_FN(
    UUID *ObjectUuid,
    UUID *TypeUuid,
    RPC_STATUS *Status);

typedef RPC_STATUS
RPC_IF_CALLBACK_FN(
    RPC_IF_HANDLE InterfaceUuid,
    void *Context);

typedef void
RPC_SECURITY_CALLBACK_FN(
    void *Context);

typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;

typedef struct
{
    unsigned long Count;
    RPC_IF_ID *IfId[1];
} RPC_IF_ID_VECTOR;

typedef void *RPC_AUTH_IDENTITY_HANDLE;
typedef void *RPC_AUTHZ_HANDLE;
typedef struct _RPC_SECURITY_QOS
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;

typedef struct _SEC_WINNT_AUTH_IDENTITY_W
{
    unsigned short *User;
    unsigned long UserLength;
    unsigned short *Domain;
    unsigned long DomainLength;
    unsigned short *Password;
    unsigned long PasswordLength;
    unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

typedef struct _SEC_WINNT_AUTH_IDENTITY_A
{
    unsigned char *User;
    unsigned long UserLength;
    unsigned char *Domain;
    unsigned long DomainLength;
    unsigned char *Password;
    unsigned long PasswordLength;
    unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
typedef struct _RPC_SECURITY_QOS_V2_W
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;

typedef struct _RPC_SECURITY_QOS_V3_W
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
    void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
    void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;

typedef struct _RPC_SECURITY_QOS_V4_W
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
    void *Sid;
    unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

typedef struct _RPC_SECURITY_QOS_V4_A
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
    void *Sid;
    unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W
{
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A
{
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W
{
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A
{
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;

typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1
{
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;

typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;

typedef RPC_STATUS (*RPC_NEW_HTTP_PROXY_CHANNEL)(
    RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
    RPC_WSTR ServerName,
    RPC_WSTR ServerPort,
    RPC_WSTR RemoteUser,
    RPC_WSTR AuthType,
    void *ResourceUuid,
    void *SessionId,
    void *Interface,
    void *Reserved,
    unsigned long Flags,
    RPC_WSTR *NewServerName,
    RPC_WSTR *NewServerPort);
typedef void (*RPC_HTTP_PROXY_FREE_STRING)(
    RPC_WSTR String);

typedef void (*RPC_AUTH_KEY_RETRIEVAL_FN)(
    void *Arg,
    RPC_WSTR ServerPrincName,
    unsigned long KeyVer,
    void **Key,
    RPC_STATUS *Status);

typedef struct
{
    unsigned char *UserName;
    unsigned char *ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1, *PRPC_CLIENT_INFORMATION1;

typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;

typedef int (*RPC_MGMT_AUTHORIZATION_FN)(
    RPC_BINDING_HANDLE ClientBinding,
    unsigned long RequestedMgmtOperation,
    RPC_STATUS *Status);

typedef struct _RPC_VERSION
{
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER
{
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, *PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void *Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void *RpcInterfaceInformation;
    void *ReservedForRuntime;
    void *ManagerEpv;
    void *ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE, *PRPC_MESSAGE;

typedef RPC_STATUS
RPC_FORWARD_FUNCTION(
    UUID *InterfaceId,
    RPC_VERSION *InterfaceVersion,
    UUID *ObjectId,
    unsigned char *Rpcpro,
    void **ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
RPC_ADDRESS_CHANGE_FN(
    void *arg);

typedef void (*RPC_DISPATCH_FUNCTION)(
    PRPC_MESSAGE Message);

typedef struct
{
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION *DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, *PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char *RpcProtocolSequence;
    unsigned char *Endpoint;
} RPC_PROTSEQ_ENDPOINT, *PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags;
} RPC_SERVER_INTERFACE, *PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const *InterpreterInfo;
    unsigned int Flags;
} RPC_CLIENT_INTERFACE, *PRPC_CLIENT_INTERFACE;

typedef void *I_RPC_MUTEX;
typedef enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION
{
    MarshalDirectionMarshal,
    MarshalDirectionUnmarshal
} LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION;

typedef void (*PRPC_RUNDOWN)(
    void *AssociationContext);

typedef struct _RPC_SEC_CONTEXT_KEY_INFO
{
    unsigned long EncryptAlgorithm;
    unsigned long KeySize;
    unsigned long SignatureAlgorithm;
} RPC_SEC_CONTEXT_KEY_INFO, *PRPC_SEC_CONTEXT_KEY_INFO;

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

typedef void (*RPCLT_PDU_FILTER_FUNC)(
    void *Buffer,
    unsigned int BufferLength,
    int fDatagram);

typedef void (*RPC_SETFILTER_FUNC)(
    RPCLT_PDU_FILTER_FUNC pfnFilter);

typedef RPC_STATUS (*RPC_BLOCKING_FN)(
    void *hWnd,
    void *Context,
    void *hSyncEvent);

typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;
    char *Buffer;
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{

    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;

    unsigned short *ServerName;
    unsigned short *ServerPort;
    unsigned short *RemoteUser;
    unsigned short *AuthType;
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;

} RDR_CALLOUT_STATE;

typedef RPC_STATUS (*I_RpcProxyIsValidMachineFn)(
    RPC_WSTR Machine,
    RPC_WSTR DotMachine,
    unsigned long PortNumber);

typedef RPC_STATUS (*I_RpcProxyGetClientAddressFn)(
    void *Context,
    char *Buffer,
    unsigned long *BufferLength);

typedef RPC_STATUS (*I_RpcProxyGetConnectionTimeoutFn)(
    unsigned long *ConnectionTimeout);

typedef RPC_STATUS (*I_RpcPerformCalloutFn)(
    void *Context,
    RDR_CALLOUT_STATE *CallOutState,
    RPC_HTTP_REDIRECTOR_STAGE Stage);

typedef void (*I_RpcFreeCalloutStateFn)(
    RDR_CALLOUT_STATE *CallOutState);

typedef RPC_STATUS (*I_RpcProxyGetClientSessionAndResourceUUID)(
    void *Context,
    int *SessionIdPresent,
    UUID *SessionId,
    int *ResourceIdPresent,
    UUID *ResourceId);

typedef RPC_STATUS (*I_RpcProxyFilterIfFn)(
    void *Context,
    UUID *IfUuid,
    unsigned short IfMajorVersion,
    int *fAllow);

typedef enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,
    RpcBackEndConnectionAttempts,
    RpcBackEndConnectionFailed,
    RpcRequestsPerSecond,
    RpcIncomingConnections,
    RpcIncomingBandwidth,
    RpcOutgoingBandwidth,
    RpcAttemptedLbsDecisions,
    RpcFailedLbsDecisions,
    RpcAttemptedLbsMessages,
    RpcFailedLbsMessages,
    RpcLastCounter
} RpcPerfCounters;

typedef void (*I_RpcProxyUpdatePerfCounterFn)(
    RpcPerfCounters Counter,
    int ModifyTrend,
    unsigned long Size);

typedef void (*I_RpcProxyUpdatePerfCounterBackendServerFn)(
    unsigned short *MachineName,
    int IsConnectEvent);

typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;

    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;

} I_RpcProxyCallbackInterface;

typedef void *RPC_NS_HANDLE;
typedef enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;

typedef enum _RPC_ASYNC_EVENT
{
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
} RPC_ASYNC_EVENT;
struct _RPC_ASYNC_STATE;

typedef void
RPCNOTIFICATION_ROUTINE(
    struct _RPC_ASYNC_STATE *pAsync,
    void *Context,
    RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO
{

    struct
    {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
    } APC;

    struct
    {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
    } IOC;

    struct
    {
        HWND hWnd;
        UINT Msg;
    } hWNd;

    HANDLE hEvent;
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE
{
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
} RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;

typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;

typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
    {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
    } u;
} RPC_EE_INFO_PARAM;

typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
    {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;
    } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

typedef struct _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;

typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;

typedef struct tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_A;

typedef RPC_CALL_ATTRIBUTES_V2_A RPC_CALL_ATTRIBUTES;
typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2
} RPC_NOTIFICATIONS;

struct HDROP__
{
    int unused;
};
typedef struct HDROP__ *HDROP;
typedef struct _DRAGINFOA
{
    UINT uSize;
    POINT pt;
    BOOL fNC;
    PZZSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW
{
    UINT uSize;
    POINT pt;
    BOOL fNC;
    PZZWSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;

typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
} APPBARDATA, *PAPPBARDATA;

typedef WORD FILEOP_FLAGS;
typedef WORD PRINTEROP_FLAGS;

typedef struct _SHFILEOPSTRUCTA
{
    HWND hwnd;
    UINT wFunc;
    PCZZSTR pFrom;
    PCZZSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCSTR lpszProgressTitle;
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
    HWND hwnd;
    UINT wFunc;
    PCZZWSTR pFrom;
    PCZZWSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCWSTR lpszProgressTitle;
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;

typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;

typedef struct _SHNAMEMAPPINGA
{
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;

typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
typedef struct _SHELLEXECUTEINFOA
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } u;
    HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } u;
    HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;

typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;

typedef struct _SHCREATEPROCESSINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    BOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

typedef enum ASSOCCLASS
{
    ASSOCCLASS_SHELL_KEY = 0,
    ASSOCCLASS_PROGID_KEY,
    ASSOCCLASS_PROGID_STR,
    ASSOCCLASS_CLSID_KEY,
    ASSOCCLASS_CLSID_STR,
    ASSOCCLASS_APP_KEY,
    ASSOCCLASS_APP_STR,
    ASSOCCLASS_SYSTEM_STR,
    ASSOCCLASS_FOLDER,
    ASSOCCLASS_STAR,
} ASSOCCLASS;

typedef struct ASSOCIATIONELEMENT
{
    ASSOCCLASS ac;
    HKEY hkClass;
    PCWSTR pszClass;
} ASSOCIATIONELEMENT;

typedef struct _SHQUERYRBINFO
{
    DWORD cbSize;

    __int64 i64Size;
    __int64 i64NumItems;
} SHQUERYRBINFO, *LPSHQUERYRBINFO;

typedef enum
{
    QUNS_NOT_PRESENT = 1,
    QUNS_BUSY = 2,
    QUNS_RUNNING_D3D_FULL_SCREEN = 3,
    QUNS_PRESENTATION_MODE = 4,
    QUNS_ACCEPTS_NOTIFICATIONS = 5,
} QUERY_USER_NOTIFICATION_STATE;

typedef struct _NOTIFYICONDATAA
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    CHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR szInfo[256];

    union
    {
        UINT uTimeout;
        UINT uVersion;
    } u;

    CHAR szInfoTitle[64];
    DWORD dwInfoFlags;

    GUID guidItem;

    HICON hBalloonIcon;

} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    WCHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR szInfo[256];

    union
    {
        UINT uTimeout;
        UINT uVersion;
    } u;

    WCHAR szInfoTitle[64];
    DWORD dwInfoFlags;

    GUID guidItem;

    HICON hBalloonIcon;

} NOTIFYICONDATAW, *PNOTIFYICONDATAW;

typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
typedef struct _NOTIFYICONIDENTIFIER
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
} NOTIFYICONIDENTIFIER, *PNOTIFYICONIDENTIFIER;

typedef struct _SHFILEINFOA
{
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    CHAR szDisplayName[260];
    CHAR szTypeName[80];
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    WCHAR szDisplayName[260];
    WCHAR szTypeName[80];
} SHFILEINFOW;

typedef SHFILEINFOA SHFILEINFO;

typedef struct _SHSTOCKICONINFO
{
    DWORD cbSize;
    HICON hIcon;
    int iSysImageIndex;
    int iIcon;
    WCHAR szPath[260];
} SHSTOCKICONINFO;
typedef enum SHSTOCKICONID
{
    SIID_DOCNOASSOC = 0,
    SIID_DOCASSOC = 1,
    SIID_APPLICATION = 2,
    SIID_FOLDER = 3,
    SIID_FOLDEROPEN = 4,
    SIID_DRIVE525 = 5,
    SIID_DRIVE35 = 6,
    SIID_DRIVEREMOVE = 7,
    SIID_DRIVEFIXED = 8,
    SIID_DRIVENET = 9,
    SIID_DRIVENETDISABLED = 10,
    SIID_DRIVECD = 11,
    SIID_DRIVERAM = 12,
    SIID_WORLD = 13,
    SIID_SERVER = 15,
    SIID_PRINTER = 16,
    SIID_MYNETWORK = 17,
    SIID_FIND = 22,
    SIID_HELP = 23,
    SIID_SHARE = 28,
    SIID_LINK = 29,
    SIID_SLOWFILE = 30,
    SIID_RECYCLER = 31,
    SIID_RECYCLERFULL = 32,
    SIID_MEDIACDAUDIO = 40,
    SIID_LOCK = 47,
    SIID_AUTOLIST = 49,
    SIID_PRINTERNET = 50,
    SIID_SERVERSHARE = 51,
    SIID_PRINTERFAX = 52,
    SIID_PRINTERFAXNET = 53,
    SIID_PRINTERFILE = 54,
    SIID_STACK = 55,
    SIID_MEDIASVCD = 56,
    SIID_STUFFEDFOLDER = 57,
    SIID_DRIVEUNKNOWN = 58,
    SIID_DRIVEDVD = 59,
    SIID_MEDIADVD = 60,
    SIID_MEDIADVDRAM = 61,
    SIID_MEDIADVDRW = 62,
    SIID_MEDIADVDR = 63,
    SIID_MEDIADVDROM = 64,
    SIID_MEDIACDAUDIOPLUS = 65,
    SIID_MEDIACDRW = 66,
    SIID_MEDIACDR = 67,
    SIID_MEDIACDBURN = 68,
    SIID_MEDIABLANKCD = 69,
    SIID_MEDIACDROM = 70,
    SIID_AUDIOFILES = 71,
    SIID_IMAGEFILES = 72,
    SIID_VIDEOFILES = 73,
    SIID_MIXEDFILES = 74,
    SIID_FOLDERBACK = 75,
    SIID_FOLDERFRONT = 76,
    SIID_SHIELD = 77,
    SIID_WARNING = 78,
    SIID_INFO = 79,
    SIID_ERROR = 80,
    SIID_KEY = 81,
    SIID_SOFTWARE = 82,
    SIID_RENAME = 83,
    SIID_DELETE = 84,
    SIID_MEDIAAUDIODVD = 85,
    SIID_MEDIAMOVIEDVD = 86,
    SIID_MEDIAENHANCEDCD = 87,
    SIID_MEDIAENHANCEDDVD = 88,
    SIID_MEDIAHDDVD = 89,
    SIID_MEDIABLURAY = 90,
    SIID_MEDIAVCD = 91,
    SIID_MEDIADVDPLUSR = 92,
    SIID_MEDIADVDPLUSRW = 93,
    SIID_DESKTOPPC = 94,
    SIID_MOBILEPC = 95,
    SIID_USERS = 96,
    SIID_MEDIASMARTMEDIA = 97,
    SIID_MEDIACOMPACTFLASH = 98,
    SIID_DEVICECELLPHONE = 99,
    SIID_DEVICECAMERA = 100,
    SIID_DEVICEVIDEOCAMERA = 101,
    SIID_DEVICEAUDIOPLAYER = 102,
    SIID_NETWORKCONNECT = 103,
    SIID_INTERNET = 104,
    SIID_ZIPFILE = 105,
    SIID_SETTINGS = 106,

    SIID_DRIVEHDDVD = 132,
    SIID_DRIVEBD = 133,
    SIID_MEDIAHDDVDROM = 134,
    SIID_MEDIAHDDVDR = 135,
    SIID_MEDIAHDDVDRAM = 136,
    SIID_MEDIABDROM = 137,
    SIID_MEDIABDR = 138,
    SIID_MEDIABDRE = 139,
    SIID_CLUSTEREDDRIVE = 140,

    SIID_MAX_ICONS = 181,
} SHSTOCKICONID;

typedef struct _OPEN_PRINTER_PROPS_INFOA
{
    DWORD dwSize;
    LPSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOA, *POPEN_PRINTER_PROPS_INFOA;
typedef struct _OPEN_PRINTER_PROPS_INFOW
{
    DWORD dwSize;
    LPWSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOW, *POPEN_PRINTER_PROPS_INFOW;

typedef OPEN_PRINTER_PROPS_INFOA OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO;
typedef HRESULT(__stdcall *PFNCANSHAREFOLDERW)(PCWSTR pszPath);
typedef HRESULT(__stdcall *PFNSHOWSHAREFOLDERUIW)(HWND hwndParent, PCWSTR pszPath);

typedef struct tagNC_ADDRESS
{
    struct NET_ADDRESS_INFO_ *pAddrInfo;
    USHORT PortNumber;
    BYTE PrefixLength;
} NC_ADDRESS, *PNC_ADDRESS;

typedef struct _PERF_DATA_BLOCK
{
    WCHAR Signature[4];
    DWORD LittleEndian;
    DWORD Version;

    DWORD Revision;

    DWORD TotalByteLength;
    DWORD HeaderLength;
    DWORD NumObjectTypes;

    LONG DefaultObject;

    SYSTEMTIME SystemTime;

    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

    LARGE_INTEGER PerfTime100nSec;

    DWORD SystemNameLength;
    DWORD SystemNameOffset;

} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;

typedef struct _PERF_OBJECT_TYPE
{
    DWORD TotalByteLength;

    DWORD DefinitionLength;

    DWORD HeaderLength;

    DWORD ObjectNameTitleIndex;

    LPWSTR ObjectNameTitle;

    DWORD ObjectHelpTitleIndex;

    LPWSTR ObjectHelpTitle;

    DWORD DetailLevel;

    DWORD NumCounters;

    LONG DefaultCounter;

    LONG NumInstances;
    DWORD CodePage;

    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;
typedef struct _PERF_COUNTER_DEFINITION
{
    DWORD ByteLength;
    DWORD CounterNameTitleIndex;

    LPWSTR CounterNameTitle;

    DWORD CounterHelpTitleIndex;

    LPWSTR CounterHelpTitle;

    LONG DefaultScale;

    DWORD DetailLevel;

    DWORD CounterType;
    DWORD CounterSize;
    DWORD CounterOffset;

} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;
typedef struct _PERF_INSTANCE_DEFINITION
{
    DWORD ByteLength;

    DWORD ParentObjectTitleIndex;

    DWORD ParentObjectInstance;

    LONG UniqueID;

    DWORD NameOffset;

    DWORD NameLength;

} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;
typedef struct _PERF_COUNTER_BLOCK
{
    DWORD ByteLength;

} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
typedef DWORD(PM_OPEN_PROC)(LPWSTR);
typedef DWORD(PM_COLLECT_PROC)(LPWSTR lpValueName,

                               LPVOID *lppData,
                               LPDWORD lpcbTotalBytes,
                               LPDWORD lpNumObjectTypes);
typedef DWORD(PM_CLOSE_PROC)(void);
typedef DWORD(PM_QUERY_PROC)(LPDWORD, LPVOID *, LPDWORD, LPDWORD);

typedef unsigned int ALG_ID;
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;
typedef struct _CMS_KEY_INFO
{
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE *pbOID;
    DWORD cbOID;
} CMS_KEY_INFO, *PCMS_KEY_INFO;

typedef struct _HMAC_Info
{
    ALG_ID HashAlgid;
    BYTE *pbInnerString;
    DWORD cbInnerString;
    BYTE *pbOuterString;
    DWORD cbOuterString;
} HMAC_INFO, *PHMAC_INFO;

typedef struct _SCHANNEL_ALG
{
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;

typedef struct _PROV_ENUMALGS
{
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR szName[20];
} PROV_ENUMALGS;

typedef struct _PROV_ENUMALGS_EX
{
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR szName[20];
    DWORD dwLongNameLen;
    CHAR szLongName[40];
} PROV_ENUMALGS_EX;

typedef struct _PUBLICKEYSTRUC
{
    BYTE bType;
    BYTE bVersion;
    WORD reserved;
    ALG_ID aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;

typedef struct _RSAPUBKEY
{
    DWORD magic;
    DWORD bitlen;
    DWORD pubexp;

} RSAPUBKEY;

typedef struct _PUBKEY
{
    DWORD magic;
    DWORD bitlen;
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;

typedef struct _DSSSEED
{
    DWORD counter;
    BYTE seed[20];
} DSSSEED;

typedef struct _PUBKEYVER3
{
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;

typedef struct _PRIVKEYVER3
{
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DWORD bitlenX;
    DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;

typedef struct _KEY_TYPE_SUBTYPE
{
    DWORD dwKeySpec;
    GUID Type;
    GUID Subtype;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;

typedef struct _CERT_FORTEZZA_DATA_PROP
{
    unsigned char SerialNumber[8];
    int CertIndex;
    unsigned char CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;

typedef struct _CRYPT_RC4_KEY_STATE
{
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;

typedef struct _CRYPT_DES_KEY_STATE
{
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;

typedef struct _CRYPT_3DES_KEY_STATE
{
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;

typedef struct _CRYPT_AES_128_KEY_STATE
{
    unsigned char Key[16];
    unsigned char IV[16];
    unsigned char EncryptionState[11][16];
    unsigned char DecryptionState[11][16];
    unsigned char Feedback[16];
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;

typedef struct _CRYPT_AES_256_KEY_STATE
{
    unsigned char Key[32];
    unsigned char IV[16];
    unsigned char EncryptionState[15][16];
    unsigned char DecryptionState[15][16];
    unsigned char Feedback[16];
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;

typedef struct _CRYPTOAPI_BLOB
{
    DWORD cbData;
    BYTE *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
    CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
    CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
    CERT_NAME_BLOB, *PCERT_NAME_BLOB,
    CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
    CERT_BLOB, *PCERT_BLOB,
    CRL_BLOB, *PCRL_BLOB,
    DATA_BLOB, *PDATA_BLOB,
    CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
    CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
    CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
    CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
    CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;

typedef struct _CMS_DH_KEY_INFO
{
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;

typedef LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
typedef struct __BCRYPT_KEY_LENGTHS_STRUCT
{
    ULONG dwMinLength;
    ULONG dwMaxLength;
    ULONG dwIncrement;
} BCRYPT_KEY_LENGTHS_STRUCT;

typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;

typedef struct _BCRYPT_OID
{
    ULONG cbOID;
    PUCHAR pbOID;
} BCRYPT_OID;

typedef struct _BCRYPT_OID_LIST
{
    ULONG dwOIDCount;
    BCRYPT_OID *pOIDs;
} BCRYPT_OID_LIST;

typedef struct _BCRYPT_PKCS1_PADDING_INFO
{
    LPCWSTR pszAlgId;
} BCRYPT_PKCS1_PADDING_INFO;

typedef struct _BCRYPT_PSS_PADDING_INFO
{
    LPCWSTR pszAlgId;
    ULONG cbSalt;
} BCRYPT_PSS_PADDING_INFO;

typedef struct _BCRYPT_OAEP_PADDING_INFO
{
    LPCWSTR pszAlgId;
    PUCHAR pbLabel;
    ULONG cbLabel;
} BCRYPT_OAEP_PADDING_INFO;

typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
    ULONG cbSize;
    ULONG dwInfoVersion;
    PUCHAR pbNonce;
    ULONG cbNonce;
    PUCHAR pbAuthData;
    ULONG cbAuthData;
    PUCHAR pbTag;
    ULONG cbTag;
    PUCHAR pbMacContext;
    ULONG cbMacContext;
    ULONG cbAAD;
    ULONGLONG cbData;
    ULONG dwFlags;
} BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
typedef struct _BCryptBuffer
{
    ULONG cbBuffer;
    ULONG BufferType;
    PVOID pvBuffer;
} BCryptBuffer, *PBCryptBuffer;

typedef struct _BCryptBufferDesc
{
    ULONG ulVersion;
    ULONG cBuffers;
    PBCryptBuffer pBuffers;
} BCryptBufferDesc, *PBCryptBufferDesc;

typedef PVOID BCRYPT_HANDLE;
typedef PVOID BCRYPT_ALG_HANDLE;
typedef PVOID BCRYPT_KEY_HANDLE;
typedef PVOID BCRYPT_HASH_HANDLE;
typedef PVOID BCRYPT_SECRET_HANDLE;

typedef struct _BCRYPT_KEY_BLOB
{
    ULONG Magic;
} BCRYPT_KEY_BLOB;
typedef struct _BCRYPT_RSAKEY_BLOB
{
    ULONG Magic;
    ULONG BitLength;
    ULONG cbPublicExp;
    ULONG cbModulus;
    ULONG cbPrime1;
    ULONG cbPrime2;
} BCRYPT_RSAKEY_BLOB;
typedef struct _BCRYPT_ECCKEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_ECCKEY_BLOB, *PBCRYPT_ECCKEY_BLOB;
typedef struct _BCRYPT_DH_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_DH_KEY_BLOB, *PBCRYPT_DH_KEY_BLOB;

typedef struct _BCRYPT_DH_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
} BCRYPT_DH_PARAMETER_HEADER;
typedef struct _BCRYPT_DSA_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_KEY_BLOB, *PBCRYPT_DSA_KEY_BLOB;
typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
    ULONG dwMagic;
    ULONG dwVersion;
    ULONG cbKeyData;
} BCRYPT_KEY_DATA_BLOB_HEADER, *PBCRYPT_KEY_DATA_BLOB_HEADER;
typedef struct _BCRYPT_DSA_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_PARAMETER_HEADER;
typedef enum
{
    BCRYPT_HASH_OPERATION_HASH_DATA = 1,
    BCRYPT_HASH_OPERATION_FINISH_HASH = 2,
} BCRYPT_HASH_OPERATION_TYPE;

typedef struct _BCRYPT_MULTI_HASH_OPERATION
{
    ULONG iHash;
    BCRYPT_HASH_OPERATION_TYPE hashOperation;
    PUCHAR pbBuffer;
    ULONG cbBuffer;
} BCRYPT_MULTI_HASH_OPERATION;

typedef enum
{
    BCRYPT_OPERATION_TYPE_HASH = 1,
} BCRYPT_MULTI_OPERATION_TYPE;

typedef struct _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
{
    ULONG cbPerObject;
    ULONG cbPerElement;
} BCRYPT_MULTI_OBJECT_LENGTH_STRUCT;

typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
{
    LPWSTR pszName;
    ULONG dwClass;
    ULONG dwFlags;

} BCRYPT_ALGORITHM_IDENTIFIER;

typedef struct _BCRYPT_PROVIDER_NAME
{
    LPWSTR pszProviderName;
} BCRYPT_PROVIDER_NAME;

typedef struct _BCRYPT_INTERFACE_VERSION
{
    USHORT MajorVersion;
    USHORT MinorVersion;

} BCRYPT_INTERFACE_VERSION, *PBCRYPT_INTERFACE_VERSION;
typedef struct _CRYPT_INTERFACE_REG
{
    ULONG dwInterface;
    ULONG dwFlags;

    ULONG cFunctions;
    PWSTR *rgpszFunctions;
} CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;

typedef struct _CRYPT_IMAGE_REG
{
    PWSTR pszImage;

    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG *rgpInterfaces;
} CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;

typedef struct _CRYPT_PROVIDER_REG
{
    ULONG cAliases;
    PWSTR *rgpszAliases;

    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
} CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;

typedef struct _CRYPT_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
} CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;

typedef struct _CRYPT_CONTEXT_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
} CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;

typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
} CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;

typedef struct _CRYPT_CONTEXTS
{
    ULONG cContexts;
    PWSTR *rgpszContexts;
} CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;

typedef struct _CRYPT_CONTEXT_FUNCTIONS
{
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
} CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;

typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
} CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;

typedef struct _CRYPT_PROPERTY_REF
{
    PWSTR pszProperty;

    ULONG cbValue;
    PUCHAR pbValue;
} CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;

typedef struct _CRYPT_IMAGE_REF
{
    PWSTR pszImage;
    ULONG dwFlags;
} CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;

typedef struct _CRYPT_PROVIDER_REF
{
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;

    ULONG cProperties;
    PCRYPT_PROPERTY_REF *rgpProperties;

    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
} CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;

typedef struct _CRYPT_PROVIDER_REFS
{
    ULONG cProviders;
    PCRYPT_PROVIDER_REF *rgpProviders;
} CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;

typedef LONG SECURITY_STATUS;
typedef LPVOID (*PFN_NCRYPT_ALLOC)(
    SIZE_T cbSize);

typedef void (*PFN_NCRYPT_FREE)(
    LPVOID pv);

typedef struct NCRYPT_ALLOC_PARA
{
    DWORD cbSize;
    PFN_NCRYPT_ALLOC pfnAlloc;
    PFN_NCRYPT_FREE pfnFree;
} NCRYPT_ALLOC_PARA;
typedef BCryptBuffer NCryptBuffer;
typedef BCryptBuffer *PNCryptBuffer;
typedef BCryptBufferDesc NCryptBufferDesc;
typedef BCryptBufferDesc *PNCryptBufferDesc;

typedef ULONG_PTR NCRYPT_HANDLE;
typedef ULONG_PTR NCRYPT_PROV_HANDLE;
typedef ULONG_PTR NCRYPT_KEY_HANDLE;
typedef ULONG_PTR NCRYPT_HASH_HANDLE;
typedef ULONG_PTR NCRYPT_SECRET_HANDLE;

typedef struct _NCryptAlgorithmName
{
    LPWSTR pszName;
    DWORD dwClass;
    DWORD dwAlgOperations;
    DWORD dwFlags;
} NCryptAlgorithmName;

typedef struct NCryptKeyName
{
    LPWSTR pszName;
    LPWSTR pszAlgid;
    DWORD dwLegacyKeySpec;
    DWORD dwFlags;
} NCryptKeyName;

typedef struct NCryptProviderName
{
    LPWSTR pszName;
    LPWSTR pszComment;
} NCryptProviderName;

typedef struct __NCRYPT_UI_POLICY
{
    DWORD dwVersion;
    DWORD dwFlags;
    LPCWSTR pszCreationTitle;
    LPCWSTR pszFriendlyName;
    LPCWSTR pszDescription;
} NCRYPT_UI_POLICY;
typedef struct __NCRYPT_SUPPORTED_LENGTHS
{
    DWORD dwMinLength;
    DWORD dwMaxLength;
    DWORD dwIncrement;
    DWORD dwDefaultLength;
} NCRYPT_SUPPORTED_LENGTHS;

typedef struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
{
    DWORD magic;
    DWORD cbHeader;
    DWORD cbPublic;
    DWORD cbPrivate;
    DWORD cbName;
} NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER, *PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;

typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;

typedef ULONG_PTR HCRYPTPROV_LEGACY;

typedef struct _CRYPT_BIT_BLOB
{
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;

typedef struct _CRYPT_ALGORITHM_IDENTIFIER
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_OBJID_TABLE
{
    DWORD dwAlgId;
    LPCSTR pszObjId;
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;

typedef struct _CRYPT_HASH_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;

typedef struct _CERT_EXTENSION
{
    LPSTR pszObjId;
    BOOL fCritical;
    CRYPT_OBJID_BLOB Value;
} CERT_EXTENSION, *PCERT_EXTENSION;
typedef const CERT_EXTENSION *PCCERT_EXTENSION;

typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;

typedef struct _CRYPT_ATTRIBUTE
{
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;

typedef struct _CRYPT_ATTRIBUTES
{
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;

typedef struct _CERT_RDN_ATTR
{
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;
typedef struct _CERT_RDN
{
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
} CERT_RDN, *PCERT_RDN;

typedef struct _CERT_NAME_INFO
{
    DWORD cRDN;
    PCERT_RDN rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;

typedef struct _CERT_NAME_VALUE
{
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;

typedef struct _CERT_PUBLIC_KEY_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;

typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO
{
    DWORD dwVersion;
    CRYPT_DER_BLOB PrivateKey;
    LPSTR szCurveOid;
    CRYPT_BIT_BLOB PublicKey;
} CRYPT_ECC_PRIVATE_KEY_INFO, *PCRYPT_ECC_PRIVATE_KEY_INFO;

typedef struct _CRYPT_PRIVATE_KEY_INFO
{
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
} CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;

typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef BOOL (*PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
    CRYPT_ALGORITHM_IDENTIFIER Algorithm,
    CRYPT_DATA_BLOB EncryptedPrivateKey,
    BYTE *pbClearTextKey,
    DWORD *pcbClearTextKey,
    LPVOID pVoidDecryptFunc);
typedef BOOL (*PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm,
    CRYPT_DATA_BLOB *pClearTextPrivateKey,
    BYTE *pbEncryptedKey,
    DWORD *pcbEncryptedKey,
    LPVOID pVoidEncryptFunc);
typedef BOOL (*PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
    CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,
    HCRYPTPROV *phCryptProv,
    LPVOID pVoidResolveFunc);

typedef struct _CRYPT_PKCS8_IMPORT_PARAMS
{
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;

typedef struct _CRYPT_PKCS8_EXPORT_PARAMS
{
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;

    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;

typedef struct _CERT_INFO
{
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_INFO, *PCERT_INFO;
typedef struct _CRL_ENTRY
{
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;

typedef struct _CRL_INFO
{
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_INFO, *PCRL_INFO;
typedef struct _CERT_OR_CRL_BLOB
{
    DWORD dwChoice;
    DWORD cbEncoded;

    BYTE *pbEncoded;
} CERT_OR_CRL_BLOB, *PCERT_OR_CRL_BLOB;

typedef struct _CERT_OR_CRL_BUNDLE
{
    DWORD cItem;

    PCERT_OR_CRL_BLOB rgItem;
} CERT_OR_CRL_BUNDLE, *PCERT_OR_CRL_BUNDLE;

typedef struct _CERT_REQUEST_INFO
{
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;

typedef struct _CERT_KEYGEN_REQUEST_INFO
{
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO
{
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;

typedef struct _CTL_USAGE
{
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
} CTL_USAGE, *PCTL_USAGE,
    CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
typedef const CTL_USAGE *PCCTL_USAGE;
typedef const CERT_ENHKEY_USAGE *PCCERT_ENHKEY_USAGE;

typedef struct _CTL_ENTRY
{
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CTL_ENTRY, *PCTL_ENTRY;

typedef struct _CTL_INFO
{
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CTL_INFO, *PCTL_INFO;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO
{
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;

typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR
{
    LPWSTR pwszName;
    LPWSTR pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;

typedef struct _CRYPT_CSP_PROVIDER
{
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
} CRYPT_CSP_PROVIDER, *PCRYPT_CSP_PROVIDER;

typedef LPVOID (*PFN_CRYPT_ALLOC)(
    size_t cbSize);

typedef void (*PFN_CRYPT_FREE)(
    LPVOID pv);

typedef struct _CRYPT_ENCODE_PARA
{
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;

typedef struct _CERT_EXTENSIONS
{
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;

typedef struct _CERT_PRIVATE_KEY_VALIDITY
{
    FILETIME NotBefore;
    FILETIME NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;

typedef struct _CERT_KEY_ATTRIBUTES_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_POLICY_ID
{
    DWORD cCertPolicyElementId;
    LPSTR *rgpszCertPolicyElementId;
} CERT_POLICY_ID, *PCERT_POLICY_ID;

typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO
{
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_OTHER_NAME
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;

typedef struct _CERT_ALT_NAME_ENTRY
{
    DWORD dwAltNameChoice;
    union
    {
        PCERT_OTHER_NAME pOtherName;
        LPWSTR pwszRfc822Name;
        LPWSTR pwszDNSName;

        CERT_NAME_BLOB DirectoryName;

        LPWSTR pwszURL;
        CRYPT_DATA_BLOB IPAddress;
        LPSTR pszRegisteredID;
    } u;
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_ALT_NAME_INFO
{
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO
{
    CRYPT_BIT_BLOB SubjectType;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;

typedef struct _CERT_BASIC_CONSTRAINTS2_INFO
{
    BOOL fCA;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO
{
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;

typedef struct _CERT_POLICY_INFO
{
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;

typedef struct _CERT_POLICIES_INFO
{
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;

typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
{
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE
{
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;

typedef struct _CPS_URLS
{
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
} CPS_URLS, *PCPS_URLS;

typedef struct _CERT_POLICY95_QUALIFIER1
{
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;
typedef struct _CERT_POLICY_MAPPING
{
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;

typedef struct _CERT_POLICY_MAPPINGS_INFO
{
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;

typedef struct _CERT_POLICY_CONSTRAINTS_INFO
{
    BOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;

    BOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
{
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;

typedef struct _CRYPT_CONTENT_INFO
{
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;
typedef struct _CRYPT_SEQUENCE_OF_ANY
{
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;

    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_ACCESS_DESCRIPTION
{
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;

typedef struct _CERT_AUTHORITY_INFO_ACCESS
{
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS,
    CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;
typedef struct _CRL_DIST_POINT_NAME
{
    DWORD dwDistPointNameChoice;
    union
    {
        CERT_ALT_NAME_INFO FullName;

    } u;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;

typedef struct _CRL_DIST_POINT
{
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
} CRL_DIST_POINT, *PCRL_DIST_POINT;
typedef struct _CRL_DIST_POINTS_INFO
{
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO
{

    DWORD dwSyncDeltaTime;

    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;
typedef struct _CERT_PAIR
{
    CERT_BLOB Forward;
    CERT_BLOB Reverse;
} CERT_PAIR, *PCERT_PAIR;
typedef struct _CRL_ISSUING_DIST_POINT
{
    CRL_DIST_POINT_NAME DistPointName;
    BOOL fOnlyContainsUserCerts;
    BOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    BOOL fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
typedef struct _CERT_GENERAL_SUBTREE
{
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    BOOL fMaximum;
    DWORD dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;

typedef struct _CERT_NAME_CONSTRAINTS_INFO
{
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
typedef struct _CERT_DSS_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;
typedef struct _CERT_DH_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;

typedef struct _CERT_ECC_SIGNATURE
{
    CRYPT_UINT_BLOB r;
    CRYPT_UINT_BLOB s;
} CERT_ECC_SIGNATURE, *PCERT_ECC_SIGNATURE;

typedef struct _CERT_X942_DH_VALIDATION_PARAMS
{
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;

typedef struct _CERT_X942_DH_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;
typedef struct _CRYPT_X942_OTHER_INFO
{
    LPSTR pszContentEncryptionObjId;
    BYTE rgbCounter[4];
    BYTE rgbKeyLength[4];
    CRYPT_DATA_BLOB PubInfo;
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;

typedef struct _CRYPT_ECC_CMS_SHARED_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DATA_BLOB EntityUInfo;
    BYTE rgbSuppPubInfo[4];
} CRYPT_ECC_CMS_SHARED_INFO, *PCRYPT_ECC_CMS_SHARED_INFO;

typedef struct _CRYPT_RC2_CBC_PARAMETERS
{
    DWORD dwVersion;
    BOOL fIV;
    BYTE rgbIV[8];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITY
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;

typedef struct _CRYPT_SMIME_CAPABILITIES
{
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
typedef struct _CERT_QC_STATEMENT
{
    LPSTR pszStatementId;
    CRYPT_OBJID_BLOB StatementInfo;
} CERT_QC_STATEMENT, *PCERT_QC_STATEMENT;

typedef struct _CERT_QC_STATEMENTS_EXT_INFO
{
    DWORD cStatement;
    PCERT_QC_STATEMENT rgStatement;
} CERT_QC_STATEMENTS_EXT_INFO, *PCERT_QC_STATEMENTS_EXT_INFO;
typedef struct _CRYPT_MASK_GEN_ALGORITHM
{
    LPSTR pszObjId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
} CRYPT_MASK_GEN_ALGORITHM, *PCRYPT_MASK_GEN_ALGORITHM;

typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    DWORD dwSaltLength;
    DWORD dwTrailerField;
} CRYPT_RSA_SSA_PSS_PARAMETERS, *PCRYPT_RSA_SSA_PSS_PARAMETERS;
typedef struct _CRYPT_PSOURCE_ALGORITHM
{
    LPSTR pszObjId;
    CRYPT_DATA_BLOB EncodingParameters;
} CRYPT_PSOURCE_ALGORITHM, *PCRYPT_PSOURCE_ALGORITHM;

typedef struct _CRYPT_RSAES_OAEP_PARAMETERS
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
} CRYPT_RSAES_OAEP_PARAMETERS, *PCRYPT_RSAES_OAEP_PARAMETERS;
typedef struct _CMC_TAGGED_ATTRIBUTE
{
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;

typedef struct _CMC_TAGGED_CERT_REQUEST
{
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;

typedef struct _CMC_TAGGED_REQUEST
{
    DWORD dwTaggedRequestChoice;
    union
    {

        PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
    } u;
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;

typedef struct _CMC_TAGGED_CONTENT_INFO
{
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;

typedef struct _CMC_TAGGED_OTHER_MSG
{
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;

typedef struct _CMC_DATA_INFO
{
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_DATA_INFO, *PCMC_DATA_INFO;

typedef struct _CMC_RESPONSE_INFO
{
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;

typedef struct _CMC_PEND_INFO
{
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
} CMC_PEND_INFO, *PCMC_PEND_INFO;

typedef struct _CMC_STATUS_INFO
{
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD *rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;
    union
    {

        DWORD dwFailInfo;

        PCMC_PEND_INFO pPendInfo;
    } u;
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;
typedef struct _CMC_ADD_EXTENSIONS_INFO
{
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;

typedef struct _CMC_ADD_ATTRIBUTES_INFO
{
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;

typedef struct _CERT_TEMPLATE_EXT
{
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    BOOL fMinorVersion;
    DWORD dwMinorVersion;
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;

typedef struct _CERT_HASHED_URL
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
    LPWSTR pwszUrl;

} CERT_HASHED_URL, *PCERT_HASHED_URL;

typedef struct _CERT_LOGOTYPE_DETAILS
{
    LPWSTR pwszMimeType;
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_DETAILS, *PCERT_LOGOTYPE_DETAILS;

typedef struct _CERT_LOGOTYPE_REFERENCE
{
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_REFERENCE, *PCERT_LOGOTYPE_REFERENCE;

typedef struct _CERT_LOGOTYPE_IMAGE_INFO
{

    DWORD dwLogotypeImageInfoChoice;

    DWORD dwFileSize;
    DWORD dwXSize;
    DWORD dwYSize;

    DWORD dwLogotypeImageResolutionChoice;
    union
    {

        DWORD dwNumBits;

        DWORD dwTableSize;
    } u;
    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;

typedef struct _CERT_LOGOTYPE_IMAGE
{
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo;
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;

typedef struct _CERT_LOGOTYPE_AUDIO_INFO
{
    DWORD dwFileSize;
    DWORD dwPlayTime;
    DWORD dwChannels;
    DWORD dwSampleRate;

    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;

typedef struct _CERT_LOGOTYPE_AUDIO
{
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo;
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;

typedef struct _CERT_LOGOTYPE_DATA
{
    DWORD cLogotypeImage;
    PCERT_LOGOTYPE_IMAGE rgLogotypeImage;

    DWORD cLogotypeAudio;
    PCERT_LOGOTYPE_AUDIO rgLogotypeAudio;
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;

typedef struct _CERT_LOGOTYPE_INFO
{
    DWORD dwLogotypeInfoChoice;
    union
    {

        PCERT_LOGOTYPE_DATA pLogotypeDirectInfo;

        PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo;
    } u;
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;

typedef struct _CERT_OTHER_LOGOTYPE_INFO
{
    LPSTR pszObjId;
    CERT_LOGOTYPE_INFO LogotypeInfo;
} CERT_OTHER_LOGOTYPE_INFO, *PCERT_OTHER_LOGOTYPE_INFO;

typedef struct _CERT_LOGOTYPE_EXT_INFO
{
    DWORD cCommunityLogo;
    PCERT_LOGOTYPE_INFO rgCommunityLogo;
    PCERT_LOGOTYPE_INFO pIssuerLogo;
    PCERT_LOGOTYPE_INFO pSubjectLogo;
    DWORD cOtherLogo;
    PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo;
} CERT_LOGOTYPE_EXT_INFO, *PCERT_LOGOTYPE_EXT_INFO;
typedef struct _CERT_BIOMETRIC_DATA
{
    DWORD dwTypeOfBiometricDataChoice;
    union
    {

        DWORD dwPredefined;

        LPSTR pszObjId;
    } u;

    CERT_HASHED_URL HashedUrl;
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;

typedef struct _CERT_BIOMETRIC_EXT_INFO
{
    DWORD cBiometricData;
    PCERT_BIOMETRIC_DATA rgBiometricData;
} CERT_BIOMETRIC_EXT_INFO, *PCERT_BIOMETRIC_EXT_INFO;
typedef struct _OCSP_SIGNATURE_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
} OCSP_SIGNATURE_INFO, *POCSP_SIGNATURE_INFO;

typedef struct _OCSP_SIGNED_REQUEST_INFO
{
    CRYPT_DER_BLOB ToBeSigned;
    POCSP_SIGNATURE_INFO pOptionalSignatureInfo;
} OCSP_SIGNED_REQUEST_INFO, *POCSP_SIGNED_REQUEST_INFO;

typedef struct _OCSP_CERT_ID
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB IssuerNameHash;
    CRYPT_HASH_BLOB IssuerKeyHash;
    CRYPT_INTEGER_BLOB SerialNumber;
} OCSP_CERT_ID, *POCSP_CERT_ID;

typedef struct _OCSP_REQUEST_ENTRY
{
    OCSP_CERT_ID CertId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_ENTRY, *POCSP_REQUEST_ENTRY;

typedef struct _OCSP_REQUEST_INFO
{
    DWORD dwVersion;
    PCERT_ALT_NAME_ENTRY pRequestorName;
    DWORD cRequestEntry;
    POCSP_REQUEST_ENTRY rgRequestEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_INFO, *POCSP_REQUEST_INFO;

typedef struct _OCSP_RESPONSE_INFO
{
    DWORD dwStatus;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} OCSP_RESPONSE_INFO, *POCSP_RESPONSE_INFO;
typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO
{
    CRYPT_DER_BLOB ToBeSigned;
    OCSP_SIGNATURE_INFO SignatureInfo;
} OCSP_BASIC_SIGNED_RESPONSE_INFO, *POCSP_BASIC_SIGNED_RESPONSE_INFO;

typedef struct _OCSP_BASIC_REVOKED_INFO
{
    FILETIME RevocationDate;

    DWORD dwCrlReasonCode;
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;

typedef struct _OCSP_BASIC_RESPONSE_ENTRY
{
    OCSP_CERT_ID CertId;
    DWORD dwCertStatus;
    union
    {

        POCSP_BASIC_REVOKED_INFO pRevokedInfo;

    } u;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;

    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;

typedef struct _OCSP_BASIC_RESPONSE_INFO
{
    DWORD dwVersion;
    DWORD dwResponderIdChoice;
    union
    {

        CERT_NAME_BLOB ByNameResponderId;

        CRYPT_HASH_BLOB ByKeyResponderId;
    } u;
    FILETIME ProducedAt;
    DWORD cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;
typedef struct _CERT_SUPPORTED_ALGORITHM_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    CERT_POLICIES_INFO IntendedCertPolicies;
} CERT_SUPPORTED_ALGORITHM_INFO, *PCERT_SUPPORTED_ALGORITHM_INFO;

typedef struct _CERT_TPM_SPECIFICATION_INFO
{
    LPWSTR pwszFamily;
    DWORD dwLevel;
    DWORD dwRevision;
} CERT_TPM_SPECIFICATION_INFO, *PCERT_TPM_SPECIFICATION_INFO;
typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;
typedef struct _CRYPT_OID_FUNC_ENTRY
{
    LPCSTR pszOID;
    void *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;

typedef struct _CRYPT_OID_INFO
{
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    union
    {
        DWORD dwValue;
        ALG_ID Algid;
        DWORD dwLength;
    } u;
    CRYPT_DATA_BLOB ExtraInfo;
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;

typedef BOOL (*PFN_CRYPT_ENUM_OID_INFO)(
    PCCRYPT_OID_INFO pInfo,
    void *pvArg);

typedef struct _CERT_STRONG_SIGN_SERIALIZED_INFO
{
    DWORD dwFlags;
    LPWSTR pwszCNGSignHashAlgids;
    LPWSTR pwszCNGPubKeyMinBitLengths;
} CERT_STRONG_SIGN_SERIALIZED_INFO, *PCERT_STRONG_SIGN_SERIALIZED_INFO;
typedef struct _CERT_STRONG_SIGN_PARA
{
    DWORD cbSize;

    DWORD dwInfoChoice;
    union
    {
        void *pvInfo;

        PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo;

        LPSTR pszOID;

    } u;
} CERT_STRONG_SIGN_PARA, *PCERT_STRONG_SIGN_PARA;

typedef const CERT_STRONG_SIGN_PARA *PCCERT_STRONG_SIGN_PARA;
typedef void *HCRYPTMSG;
typedef struct _CERT_ISSUER_SERIAL_NUMBER
{
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;

typedef struct _CERT_ID
{
    DWORD dwIdChoice;
    union
    {

        CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;

        CRYPT_HASH_BLOB KeyId;

        CRYPT_HASH_BLOB HashId;
    } u;
} CERT_ID, *PCERT_ID;
typedef struct _CMSG_SIGNER_ENCODE_INFO
{
    DWORD cbSize;
    PCERT_INFO pCertInfo;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } u;

    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;

typedef struct _CMSG_SIGNED_ENCODE_INFO
{
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;
} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCODE_INFO;

typedef struct _CMSG_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;

    PCERT_INFO *rgpRecipients;
} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;

    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;

    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwKeySpec;

    DWORD dwKeyChoice;
    union
    {

        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;

        PCERT_ID pSenderId;
    } u;
    CRYPT_DATA_BLOB UserKeyingMaterial;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    union
    {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } u;
    CRYPT_DATA_BLOB KeyId;

    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;

struct _CMSG_RECIPIENT_ENCODE_INFO
{
    DWORD dwRecipientChoice;
    union
    {

        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    } u;
};
typedef struct _CMSG_RC2_AUX_INFO
{
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO
{
    DWORD cbSize;
    DWORD dwFlags;
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO
{
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;

typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef BOOL (*PFN_CMSG_STREAM_OUTPUT)(
    const void *pvArg,
    BYTE *pbData,
    DWORD cbData,
    BOOL fFinal);

typedef struct _CMSG_STREAM_INFO
{
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;

typedef struct _CMSG_SIGNER_INFO
{
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;

    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
typedef struct _CMSG_CMS_SIGNER_INFO
{
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;

    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO
{
    DWORD dwVersion;

    CERT_ID RecipientId;

    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;

typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
{

    CERT_ID RecipientId;

    CRYPT_DATA_BLOB EncryptedKey;

    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO
{
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    union
    {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } u;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;

typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO
{
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;

    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;

typedef struct _CMSG_CMS_RECIPIENT_INFO
{
    DWORD dwRecipientChoice;
    union
    {

        PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    } u;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;

typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CMSG_CTRL_DECRYPT_PARA
{
    DWORD cbSize;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } u;

    DWORD dwKeySpec;

    DWORD dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
{
    DWORD cbSize;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } u;

    DWORD dwKeySpec;

    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
{
    DWORD cbSize;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } u;

    DWORD dwKeySpec;

    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;
    union
    {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } u;
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;

typedef void *(*PFN_CMSG_ALLOC)(
    size_t cb);

typedef void (*PFN_CMSG_FREE)(
    void *pv);
typedef BOOL (*PFN_CMSG_GEN_ENCRYPT_KEY)(
    HCRYPTPROV *phCryptProv,
    PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
    PVOID pvEncryptAuxInfo,
    PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
    PFN_CMSG_ALLOC pfnAlloc,
    HCRYPTKEY *phEncryptKey,
    PBYTE *ppbEncryptParameters,
    PDWORD pcbEncryptParameters);

typedef BOOL (*PFN_CMSG_EXPORT_ENCRYPT_KEY)(
    HCRYPTPROV hCryptProv,
    HCRYPTKEY hEncryptKey,
    PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
    PBYTE pbData,
    PDWORD pcbData);

typedef BOOL (*PFN_CMSG_IMPORT_ENCRYPT_KEY)(
    HCRYPTPROV hCryptProv,
    DWORD dwKeySpec,
    PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
    PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
    PBYTE pbEncodedKey,
    DWORD cbEncodedKey,
    HCRYPTKEY *phEncryptKey);
typedef struct _CMSG_CONTENT_ENCRYPT_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    union
    {

        HCRYPTKEY hContentEncryptKey;

        BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    } u;
    DWORD dwFlags;

    BOOL fCNG;

    BYTE *pbCNGContentEncryptKeyObject;
    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
typedef BOOL (*PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(
    PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
    DWORD dwFlags,
    void *pvReserved);
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;
typedef BOOL (*PFN_CMSG_EXPORT_KEY_TRANS)(
    PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
    PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
    PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
    DWORD dwFlags,
    void *pvReserved);
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
{
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;

typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;
    union
    {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } u;
    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;
typedef BOOL (*PFN_CMSG_EXPORT_KEY_AGREE)(
    PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
    PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
    PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
    DWORD dwFlags,
    void *pvReserved);
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;
typedef BOOL (*PFN_CMSG_EXPORT_MAIL_LIST)(
    PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
    PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
    PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
    DWORD dwFlags,
    void *pvReserved);
typedef BOOL (*PFN_CMSG_IMPORT_KEY_TRANS)(
    PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
    PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
    DWORD dwFlags,
    void *pvReserved,
    HCRYPTKEY *phContentEncryptKey);

typedef BOOL (*PFN_CMSG_IMPORT_KEY_AGREE)(
    PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
    PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
    DWORD dwFlags,
    void *pvReserved,
    HCRYPTKEY *phContentEncryptKey);

typedef BOOL (*PFN_CMSG_IMPORT_MAIL_LIST)(
    PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
    PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
    DWORD dwFlags,
    void *pvReserved,
    HCRYPTKEY *phContentEncryptKey);
typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;

    NCRYPT_KEY_HANDLE hNCryptKey;

    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;

    BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    BYTE *pbCNGContentEncryptKeyObject;
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;
typedef BOOL (*PFN_CMSG_CNG_IMPORT_KEY_TRANS)(
    PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
    PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
    DWORD dwFlags,
    void *pvReserved);
typedef BOOL (*PFN_CMSG_CNG_IMPORT_KEY_AGREE)(
    PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
    PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
    DWORD dwFlags,
    void *pvReserved);
typedef BOOL (*PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY)(
    PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
    DWORD dwFlags,
    void *pvReserved);
typedef void *HCERTSTORE;
typedef struct _CERT_CONTEXT
{
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;
typedef struct _CRL_CONTEXT
{
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;
typedef struct _CTL_CONTEXT
{
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContent;
    DWORD cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
typedef enum CertKeyType
{
    KeyTypeOther = 0,
    KeyTypeVirtualSmartCard = 1,
    KeyTypePhysicalSmartCard = 2,
    KeyTypePassport = 3,
    KeyTypePassportRemote = 4,
    KeyTypePassportSmartCard = 5,
    KeyTypeHardware = 6,
    KeyTypeSoftware = 7,
    KeyTypeSelfSigned = 8,
} CertKeyType;
typedef struct _CRYPT_KEY_PROV_PARAM
{
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;

typedef struct _CRYPT_KEY_PROV_INFO
{
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
typedef struct _CERT_KEY_CONTEXT
{
    DWORD cbSize;
    union
    {
        HCRYPTPROV hCryptProv;

        NCRYPT_KEY_HANDLE hNCryptKey;
    } u;
    DWORD dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;

typedef struct _ROOT_INFO_LUID
{
    DWORD LowPart;
    LONG HighPart;
} ROOT_INFO_LUID, *PROOT_INFO_LUID;

typedef struct _CRYPT_SMART_CARD_ROOT_INFO
{
    BYTE rgbCardID[16];
    ROOT_INFO_LUID luid;
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA
{
    union
    {
        HKEY hKeyBase;
        void *pvBase;
    } u;
    union
    {
        void *pvSystemStore;
        LPCSTR pszSystemStore;
        LPCWSTR pwszSystemStore;
    } u2;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA
{
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;

typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA
{
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CERT_LDAP_STORE_OPENED_PARA
{
    void *pvLdapSessionHandle;

    LPCWSTR pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;
typedef void *HCERTSTOREPROV;

typedef struct _CERT_STORE_PROV_INFO
{
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;

typedef BOOL (*PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
    LPCSTR lpszStoreProvider,
    DWORD dwEncodingType,
    HCRYPTPROV_LEGACY hCryptProv,
    DWORD dwFlags,
    const void *pvPara,
    HCERTSTORE hCertStore,
    PCERT_STORE_PROV_INFO pStoreProvInfo);
typedef void (*PFN_CERT_STORE_PROV_CLOSE)(
    HCERTSTOREPROV hStoreProv,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_READ_CERT)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_CONTEXT pStoreCertContext,
    DWORD dwFlags,
    PCCERT_CONTEXT *ppProvCertContext);

typedef BOOL (*PFN_CERT_STORE_PROV_WRITE_CERT)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_CONTEXT pCertContext,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_DELETE_CERT)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_CONTEXT pCertContext,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_CONTEXT pCertContext,
    DWORD dwPropId,
    DWORD dwFlags,
    const void *pvData);

typedef BOOL (*PFN_CERT_STORE_PROV_READ_CRL)(
    HCERTSTOREPROV hStoreProv,
    PCCRL_CONTEXT pStoreCrlContext,
    DWORD dwFlags,
    PCCRL_CONTEXT *ppProvCrlContext);

typedef BOOL (*PFN_CERT_STORE_PROV_WRITE_CRL)(
    HCERTSTOREPROV hStoreProv,
    PCCRL_CONTEXT pCrlContext,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_DELETE_CRL)(
    HCERTSTOREPROV hStoreProv,
    PCCRL_CONTEXT pCrlContext,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
    HCERTSTOREPROV hStoreProv,
    PCCRL_CONTEXT pCrlContext,
    DWORD dwPropId,
    DWORD dwFlags,
    const void *pvData);

typedef BOOL (*PFN_CERT_STORE_PROV_READ_CTL)(
    HCERTSTOREPROV hStoreProv,
    PCCTL_CONTEXT pStoreCtlContext,
    DWORD dwFlags,
    PCCTL_CONTEXT *ppProvCtlContext);

typedef BOOL (*PFN_CERT_STORE_PROV_WRITE_CTL)(
    HCERTSTOREPROV hStoreProv,
    PCCTL_CONTEXT pCtlContext,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_DELETE_CTL)(
    HCERTSTOREPROV hStoreProv,
    PCCTL_CONTEXT pCtlContext,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
    HCERTSTOREPROV hStoreProv,
    PCCTL_CONTEXT pCtlContext,
    DWORD dwPropId,
    DWORD dwFlags,
    const void *pvData);

typedef BOOL (*PFN_CERT_STORE_PROV_CONTROL)(
    HCERTSTOREPROV hStoreProv,
    DWORD dwFlags,
    DWORD dwCtrlType,
    void const *pvCtrlPara);

typedef struct _CERT_STORE_PROV_FIND_INFO
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const void *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
    *PCCERT_STORE_PROV_FIND_INFO;

typedef BOOL (*PFN_CERT_STORE_PROV_FIND_CERT)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_STORE_PROV_FIND_INFO pFindInfo,
    PCCERT_CONTEXT pPrevCertContext,
    DWORD dwFlags,
    void **ppvStoreProvFindInfo,
    PCCERT_CONTEXT *ppProvCertContext);

typedef BOOL (*PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_CONTEXT pCertContext,
    void *pvStoreProvFindInfo,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_CONTEXT pCertContext,
    DWORD dwPropId,
    DWORD dwFlags,
    void *pvData,
    DWORD *pcbData);

typedef BOOL (*PFN_CERT_STORE_PROV_FIND_CRL)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_STORE_PROV_FIND_INFO pFindInfo,
    PCCRL_CONTEXT pPrevCrlContext,
    DWORD dwFlags,
    void **ppvStoreProvFindInfo,
    PCCRL_CONTEXT *ppProvCrlContext);

typedef BOOL (*PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
    HCERTSTOREPROV hStoreProv,
    PCCRL_CONTEXT pCrlContext,
    void *pvStoreProvFindInfo,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
    HCERTSTOREPROV hStoreProv,
    PCCRL_CONTEXT pCrlContext,
    DWORD dwPropId,
    DWORD dwFlags,
    void *pvData,
    DWORD *pcbData);

typedef BOOL (*PFN_CERT_STORE_PROV_FIND_CTL)(
    HCERTSTOREPROV hStoreProv,
    PCCERT_STORE_PROV_FIND_INFO pFindInfo,
    PCCTL_CONTEXT pPrevCtlContext,
    DWORD dwFlags,
    void **ppvStoreProvFindInfo,
    PCCTL_CONTEXT *ppProvCtlContext);

typedef BOOL (*PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
    HCERTSTOREPROV hStoreProv,
    PCCTL_CONTEXT pCtlContext,
    void *pvStoreProvFindInfo,
    DWORD dwFlags);

typedef BOOL (*PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
    HCERTSTOREPROV hStoreProv,
    PCCTL_CONTEXT pCtlContext,
    DWORD dwPropId,
    DWORD dwFlags,
    void *pvData,
    DWORD *pcbData);

typedef struct _CRL_FIND_ISSUED_FOR_PARA
{
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;

typedef struct _CTL_ANY_SUBJECT_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;

typedef struct _CTL_FIND_USAGE_PARA
{
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;

typedef struct _CTL_FIND_SUBJECT_PARA
{
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;

typedef BOOL (*PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(
    DWORD cbTotalEncoded,
    DWORD cbRemainEncoded,
    DWORD cEntry,
    void *pvSort);

typedef struct _CERT_CREATE_CONTEXT_PARA
{
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;

    PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort;
    void *pvSort;
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;

typedef struct _CERT_SYSTEM_STORE_INFO
{
    DWORD cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO
{
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;

typedef BOOL (*PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
    LPCWSTR pwszStoreLocation,
    DWORD dwFlags,
    void *pvReserved,
    void *pvArg);

typedef BOOL (*PFN_CERT_ENUM_SYSTEM_STORE)(
    const void *pvSystemStore,
    DWORD dwFlags,
    PCERT_SYSTEM_STORE_INFO pStoreInfo,
    void *pvReserved,
    void *pvArg);

typedef BOOL (*PFN_CERT_ENUM_PHYSICAL_STORE)(
    const void *pvSystemStore,
    DWORD dwFlags,
    LPCWSTR pwszStoreName,
    PCERT_PHYSICAL_STORE_INFO pStoreInfo,
    void *pvReserved,
    void *pvArg);

typedef struct _CTL_VERIFY_USAGE_PARA
{
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;

typedef struct _CTL_VERIFY_USAGE_STATUS
{
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;

typedef struct _CERT_REVOCATION_CRL_INFO
{
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;

    PCRL_ENTRY pCrlEntry;
    BOOL fDeltaCrlEntry;
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;

typedef struct _CERT_REVOCATION_CHAIN_PARA
    CERT_REVOCATION_CHAIN_PARA,
    *PCERT_REVOCATION_CHAIN_PARA;
typedef struct _CERT_REVOCATION_PARA
{
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
typedef struct _CERT_REVOCATION_STATUS
{
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;

    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;

typedef struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
{

    CRYPT_DATA_BLOB CertSignHashCNGAlgPropData;

    CRYPT_DATA_BLOB CertIssuerPubKeyBitLengthPropData;
} CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO,
    *PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;

typedef struct _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
{
    DWORD cCNGHashAlgid;
    PCWSTR *rgpwszCNGHashAlgid;

    DWORD dwWeakIndex;
} CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO,
    *PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;

typedef BOOL (*PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(
    DWORD dwCertEncodingType,
    PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
    void **ppvDecodedSignPara,
    LPWSTR *ppwszCNGHashAlgid);
typedef BOOL (*PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(
    NCRYPT_KEY_HANDLE hKey,
    DWORD dwCertEncodingType,
    PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
    void *pvDecodedSignPara,
    LPCWSTR pwszCNGPubKeyAlgid,
    LPCWSTR pwszCNGHashAlgid,
    BYTE *pbComputedHash,
    DWORD cbComputedHash,
    BYTE *pbSignature,
    DWORD *pcbSignature);
typedef BOOL (*PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(
    DWORD dwCertEncodingType,
    PCERT_PUBLIC_KEY_INFO pPubKeyInfo,
    PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
    void *pvDecodedSignPara,
    LPCWSTR pwszCNGPubKeyAlgid,
    LPCWSTR pwszCNGHashAlgid,
    BYTE *pbComputedHash,
    DWORD cbComputedHash,
    BYTE *pbSignature,
    DWORD cbSignature);

typedef void *HCRYPTDEFAULTCONTEXT;

typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
{
    DWORD cOID;
    LPSTR *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;

typedef BOOL (*PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC)(
    NCRYPT_KEY_HANDLE hNCryptKey,
    DWORD dwCertEncodingType,
    LPSTR pszPublicKeyObjId,
    DWORD dwFlags,
    void *pvAuxInfo,
    PCERT_PUBLIC_KEY_INFO pInfo,
    DWORD *pcbInfo);

typedef BOOL (*PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC)(
    DWORD dwCertEncodingType,
    PCERT_PUBLIC_KEY_INFO pInfo,
    DWORD dwFlags,
    void *pvAuxInfo,
    BCRYPT_KEY_HANDLE *phKey);

typedef BOOL (*PFN_IMPORT_PRIV_KEY_FUNC)(
    HCRYPTPROV hCryptProv,
    CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,
    DWORD dwFlags,
    void *pvAuxInfo);

typedef BOOL (*PFN_EXPORT_PRIV_KEY_FUNC)(
    HCRYPTPROV hCryptProv,
    DWORD dwKeySpec,
    LPSTR pszPrivateKeyObjId,
    DWORD dwFlags,
    void *pvAuxInfo,
    CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,
    DWORD *pcbPrivateKeyInfo);

typedef PCCERT_CONTEXT (*PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
    void *pvGetArg,
    DWORD dwCertEncodingType,
    PCERT_INFO pSignerId,

    HCERTSTORE hMsgCertStore);
typedef struct _CRYPT_SIGN_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;
} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void *pvGetArg;
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_HASH_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } u;

    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;

    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;

typedef struct _CERT_CHAIN
{
    DWORD cCerts;
    PCERT_BLOB certs;

    CRYPT_KEY_PROV_INFO keyLocatorInfo;
} CERT_CHAIN, *PCERT_CHAIN;

typedef HANDLE HCRYPTASYNC;
typedef HCRYPTASYNC *PHCRYPTASYNC;

typedef void (*PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(
    LPSTR pszParamOid,
    LPVOID pvParam);

typedef struct _CRYPT_BLOB_ARRAY
{
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;

typedef struct _CRYPT_CREDENTIALS
{
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;

typedef struct _CRYPT_PASSWORD_CREDENTIALSA
{
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW
{
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;

typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
typedef void (*PFN_FREE_ENCODED_OBJECT_FUNC)(
    LPCSTR pszObjectOid,
    PCRYPT_BLOB_ARRAY pObject,
    LPVOID pvFreeContext);
typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO
{
    DWORD cbSize;
    DWORD dwObjectType;

    DWORD dwError;
    DWORD dwReserved;

    FILETIME ThisUpdateTime;
    FILETIME NextUpdateTime;
    FILETIME PublishTime;
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO
{
    DWORD cbSize;

    DWORD dwExemptSeconds;

    FILETIME ExpireTime;
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;

typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO
{
    DWORD cbSize;
    WORD wResponseType;
    WORD wResponseFlags;

    FILETIME LastModifiedTime;
    DWORD dwMaxAge;
    LPCWSTR pwszETag;
    DWORD dwProxyId;
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
typedef struct _CRYPT_RETRIEVE_AUX_INFO
{
    DWORD cbSize;
    FILETIME *pLastSyncTime;

    DWORD dwMaxUrlRetrievalByteCount;

    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;

    PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;

    PCRYPTNET_URL_CACHE_RESPONSE_INFO *ppResponseInfo;

    LPWSTR pwszCacheFileNamePrefix;

    LPFILETIME pftCacheResync;

    BOOL fProxyCacheRetrieval;

    DWORD dwHttpStatusCode;

    LPWSTR *ppwszErrorResponseHeaders;

    PCRYPT_DATA_BLOB *ppErrorContentBlob;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;

typedef BOOL (*PFN_CRYPT_CANCEL_RETRIEVAL)(
    DWORD dwFlags,
    void *pvArg);

typedef void (*PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(
    LPVOID pvCompletion,
    DWORD dwCompletionCode,
    LPCSTR pszUrl,
    LPSTR pszObjectOid,
    LPVOID pvObject);

typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION
{
    PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
    LPVOID pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;

typedef BOOL (*PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(
    HCRYPTASYNC hAsyncRetrieve);

typedef struct _CRYPT_URL_ARRAY
{
    DWORD cUrl;
    LPWSTR *rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;

typedef struct _CRYPT_URL_INFO
{
    DWORD cbSize;

    DWORD dwSyncDeltaTime;

    DWORD cGroup;
    DWORD *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

typedef struct _CERT_CRL_CONTEXT_PAIR
{
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;

typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
{
    DWORD cbSize;

    int iDeltaCrlIndicator;

    LPFILETIME pftCacheResync;

    LPFILETIME pLastSyncTime;

    LPFILETIME pMaxAgeTime;

    PCERT_REVOCATION_CHAIN_PARA pChainPara;

    PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;

} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
    *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

typedef BOOL (*PFN_CRYPT_ENUM_KEYID_PROP)(
    const CRYPT_HASH_BLOB *pKeyIdentifier,
    DWORD dwFlags,
    void *pvReserved,
    void *pvArg,
    DWORD cProp,
    DWORD *rgdwPropId,
    void **rgpvData,
    DWORD *rgcbData);

typedef HANDLE HCERTCHAINENGINE;
typedef struct _CERT_CHAIN_ENGINE_CONFIG
{

    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE *rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;
} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;
typedef struct _CERT_TRUST_STATUS
{

    DWORD dwErrorStatus;
    DWORD dwInfoStatus;

} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
typedef struct _CERT_REVOCATION_INFO
{

    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;

    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;

    PCERT_REVOCATION_CRL_INFO pCrlInfo;

} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;

typedef struct _CERT_TRUST_LIST_INFO
{

    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;

} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;

typedef struct _CERT_CHAIN_ELEMENT
{

    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;

    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;

    LPCWSTR pwszExtendedErrorInfo;
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
typedef const CERT_CHAIN_ELEMENT *PCCERT_CHAIN_ELEMENT;

typedef struct _CERT_SIMPLE_CHAIN
{

    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT *rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;

    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;

} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
typedef const CERT_SIMPLE_CHAIN *PCCERT_SIMPLE_CHAIN;
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

struct _CERT_CHAIN_CONTEXT
{
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN *rgpChain;

    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;

    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;

    DWORD dwCreateFlags;

    GUID ChainId;
};
typedef struct _CERT_USAGE_MATCH
{

    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;

} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;

typedef struct _CTL_USAGE_MATCH
{

    DWORD dwType;
    CTL_USAGE Usage;

} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;

typedef struct _CERT_CHAIN_PARA
{

    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;

struct _CERT_REVOCATION_CHAIN_PARA
{
    DWORD cbSize;
    HCERTCHAINENGINE hChainEngine;
    HCERTSTORE hAdditionalStore;
    DWORD dwChainFlags;
    DWORD dwUrlRetrievalTimeout;
    LPFILETIME pftCurrentTime;
    LPFILETIME pftCacheResync;

    DWORD cbMaxUrlRetrievalByteCount;
};
typedef struct _CRL_REVOCATION_INFO
{

    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;

} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;

typedef BOOL (*PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
    PCCERT_CONTEXT pCert,
    void *pvFindArg);

typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA
{
    DWORD cbSize;

    LPCSTR pszUsageIdentifier;

    DWORD dwKeySpec;

    DWORD dwAcquirePrivateKeyFlags;

    DWORD cIssuer;
    CERT_NAME_BLOB *rgIssuer;

    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void *pvFindArg;
} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
    CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;

typedef struct _CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;

typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    BOOL fCommercial;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    BOOL fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _HTTPSPolicyCallbackData
{
    union
    {
        DWORD cbStruct;
        DWORD cbSize;
    } u;

    DWORD dwAuthType;

    DWORD fdwChecks;

    WCHAR *pwszServerName;

} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
    SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRootProgramQualifierFlags;
} EV_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    DWORD dwQualifiers;
    DWORD dwIssuanceUsageIndex;
} EV_EXTRA_CERT_CHAIN_POLICY_STATUS, *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    DWORD dwErrorLevel;
    DWORD dwErrorCategory;
    DWORD dwReserved;
    WCHAR wszErrorText[256];
} SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS, *PSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwReserved;
    LPWSTR pwszServerName;

    LPSTR rgpszHpkpValue[2];
} SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwReserved;
    PCWSTR pwszServerName;
} SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    LONG lError;
    WCHAR wszErrorText[512];
} SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS, *PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS;

typedef struct _CRYPT_PKCS12_PBE_PARAMS
{
    int iIterations;
    ULONG cbSalt;
} CRYPT_PKCS12_PBE_PARAMS;
typedef struct _PKCS12_PBES2_EXPORT_PARAMS
{
    DWORD dwSize;
    PVOID hNcryptDescriptor;
    LPWSTR pwszPbes2Alg;
} PKCS12_PBES2_EXPORT_PARAMS, *PPKCS12_PBES2_EXPORT_PARAMS;

typedef void *HCERT_SERVER_OCSP_RESPONSE;

typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
    CERT_SERVER_OCSP_RESPONSE_CONTEXT,
    *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
    *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
{
    DWORD cbSize;
    BYTE *pbEncodedOcspResponse;
    DWORD cbEncodedOcspResponse;
};

typedef void (*PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK)(
    PCCERT_CHAIN_CONTEXT pChainContext,
    PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext,
    PCCRL_CONTEXT pNewCrlContext,
    PCCRL_CONTEXT pPrevCrlContext,
    PVOID pvArg,
    DWORD dwWriteOcspFileError);

typedef struct _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
{
    DWORD cbSize;
    DWORD dwFlags;

    DWORD *pcbUsedSize;

    PWSTR pwszOcspDirectory;

    PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK pfnUpdateCallback;
    PVOID pvUpdateCallbackArg;
} CERT_SERVER_OCSP_RESPONSE_OPEN_PARA, *PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA;

typedef struct _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;

typedef struct _CERTIFICATE_BLOB
{

    DWORD dwCertEncodingType;
    DWORD cbData;
    PBYTE pbData;

} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;

typedef struct _EFS_HASH_BLOB
{
    DWORD cbData;
    PBYTE pbData;

} EFS_HASH_BLOB, *PEFS_HASH_BLOB;

typedef struct _EFS_RPC_BLOB
{
    DWORD cbData;
    PBYTE pbData;

} EFS_RPC_BLOB, *PEFS_RPC_BLOB;

typedef struct _EFS_PIN_BLOB
{
    DWORD cbPadding;
    DWORD cbData;
    PBYTE pbData;

} EFS_PIN_BLOB, *PEFS_PIN_BLOB;

typedef struct _EFS_KEY_INFO
{

    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;

} EFS_KEY_INFO, *PEFS_KEY_INFO;
typedef struct _EFS_DECRYPTION_STATUS_INFO
{

    DWORD dwDecryptionError;
    DWORD dwHashOffset;
    DWORD cbHash;

} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;

typedef struct _EFS_ENCRYPTION_STATUS_INFO
{

    BOOL bHasCurrentKey;
    DWORD dwEncryptionError;

} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;

typedef struct _ENCRYPTION_CERTIFICATE
{
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;

typedef struct _ENCRYPTION_CERTIFICATE_HASH
{
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_HASH_BLOB pHash;
    LPWSTR lpDisplayInformation;

} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;

typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST
{
    DWORD nCert_Hash;
    PENCRYPTION_CERTIFICATE_HASH *pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;

typedef struct _ENCRYPTION_CERTIFICATE_LIST
{
    DWORD nUsers;
    PENCRYPTION_CERTIFICATE *pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;

typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE
{

    DWORD dwEfsAccessType;
    PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded;
    PENCRYPTION_CERTIFICATE pEncryptionCertificate;
    PEFS_RPC_BLOB pEfsStreamSignature;

} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;

typedef struct
{
    RPC_NS_HANDLE LookupContext;
    RPC_BINDING_HANDLE ProposedHandle;
    RPC_BINDING_VECTOR *Bindings;

} RPC_IMPORT_CONTEXT_P, *PRPC_IMPORT_CONTEXT_P;

typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;

typedef double hyper;
typedef double MIDL_uhyper;

typedef void *NDR_CCONTEXT;

typedef struct
{
    void *pad[2];
    void *userContext;
} * NDR_SCONTEXT;

typedef void (*NDR_RUNDOWN)(void *context);

typedef void (*NDR_NOTIFY_ROUTINE)(void);

typedef void (*NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE
{
    unsigned long NumberOfObjects;
    NDR_SCONTEXT *ArrayOfObjects;
} SCONTEXT_QUEUE, *PSCONTEXT_QUEUE;

typedef unsigned long error_status_t;
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char *RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;

typedef void (*EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);

typedef const unsigned char *PFORMAT_STRING;
typedef struct
{
    long Dimension;

    unsigned long *BufferConformanceMark;
    unsigned long *BufferVarianceMark;

    unsigned long *MaxCountArray;
    unsigned long *OffsetArray;
    unsigned long *ActualCountArray;
} ARRAY_INFO, *PARRAY_INFO;

typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;
typedef const unsigned char *PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
{

    PRPC_MESSAGE RpcMsg;

    unsigned char *Buffer;
    unsigned char *BufferStart;
    unsigned char *BufferEnd;
    unsigned char *BufferMark;

    unsigned long BufferLength;

    unsigned long MemorySize;

    unsigned char *Memory;

    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;

    int ReuseBuffer;

    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
    int IgnoreEmbeddedPointers;
    unsigned char *PointerBufferMark;
    unsigned char CorrDespIncrement;

    unsigned char uFlags;
    unsigned short UniquePtrCount;
    ULONG_PTR MaxCount;
    unsigned long Offset;
    unsigned long ActualCount;

    void *(*pfnAllocate)(size_t);
    void (*pfnFree)(void *);
    unsigned char *StackTop;
    unsigned char *pPresentedType;
    unsigned char *pTransmitType;
    handle_t SavedHandle;
    const struct _MIDL_STUB_DESC *StubDesc;
    struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
    unsigned long FullPtrRefId;

    unsigned long PointerLength;

    int fInDontFree : 1;
    int fDontCallFreeInst : 1;
    int fUnused1 : 1;
    int fHasReturn : 1;
    int fHasExtensions : 1;
    int fHasNewCorrDesc : 1;
    int fIsIn : 1;
    int fIsOut : 1;
    int fIsOicf : 1;
    int fBufferValid : 1;
    int fHasMemoryValidateCallback : 1;
    int fInFree : 1;
    int fNeedMCCP : 1;
    int fUnused2 : 3;
    int fUnused3 : 16;

    unsigned long dwDestContext;
    void *pvDestContext;

    NDR_SCONTEXT *SavedContextHandles;

    long ParamNumber;

    struct IRpcChannelBuffer *pRpcChannelBuffer;

    PARRAY_INFO pArrayInfo;
    unsigned long *SizePtrCountArray;
    unsigned long *SizePtrOffsetArray;
    unsigned long *SizePtrLengthArray;
    void *pArgQueue;

    unsigned long dwStubPhase;

    void *LowStackMark;
    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char *pCorrMemory;

    void *pMemoryList;
    INT_PTR pCSInfo;

    unsigned char *ConformanceMark;
    unsigned char *VarianceMark;

    INT_PTR Unused;

    struct _NDR_PROC_CONTEXT *pContext;
    void *ContextHandleHash;
    void *pUserMarshalList;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;
} MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;

typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;
typedef void *(*GENERIC_BINDING_ROUTINE)(void *);
typedef void (*GENERIC_UNBIND_ROUTINE)(void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
{
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
{
    void *pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
typedef void (*XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);

typedef struct _XMIT_ROUTINE_QUINTUPLE
{
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
} XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long (*USER_MARSHAL_SIZING_ROUTINE)(unsigned long *,
                                                     unsigned long,
                                                     void *);

typedef unsigned char *(*USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned long *,
                                                           unsigned char *,
                                                           void *);

typedef unsigned char *(*USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned long *,
                                                             unsigned char *,
                                                             void *);

typedef void (*USER_MARSHAL_FREEING_ROUTINE)(unsigned long *,
                                             void *);

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
} USER_MARSHAL_ROUTINE_QUADRUPLE;

typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;

typedef struct _MALLOC_FREE_STRUCT
{
    void *(*pfnAllocate)(size_t);
    void (*pfnFree)(void *);
} MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
{
    short CommOffset;
    short FaultOffset;
} COMM_FAULT_OFFSETS;
typedef enum _IDL_CS_CONVERT
{
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
} IDL_CS_CONVERT;

typedef void (*CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,
                                         unsigned long ulNetworkCodeSet,
                                         unsigned long ulLocalBufferSize,
                                         IDL_CS_CONVERT *conversionType,
                                         unsigned long *pulNetworkBufferSize,
                                         error_status_t *pStatus);

typedef void (*CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,
                                           unsigned long ulNetworkCodeSet,
                                           unsigned long ulNetworkBufferSize,
                                           IDL_CS_CONVERT *conversionType,
                                           unsigned long *pulLocalBufferSize,
                                           error_status_t *pStatus);

typedef void (*CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,
                                         unsigned long ulNetworkCodeSet,
                                         void *pLocalData,
                                         unsigned long ulLocalDataLength,
                                         byte *pNetworkData,
                                         unsigned long *pulNetworkDataLength,
                                         error_status_t *pStatus);

typedef void (*CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,
                                           unsigned long ulNetworkCodeSet,
                                           byte *pNetworkData,
                                           unsigned long ulNetworkDataLength,
                                           unsigned long ulLocalBufferSize,
                                           void *pLocalData,
                                           unsigned long *pulLocalDataLength,
                                           error_status_t *pStatus);

typedef void (*CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE hBinding,
                                       int fServerSide,
                                       unsigned long *pulSendingTag,
                                       unsigned long *pulDesiredReceivingTag,
                                       unsigned long *pulReceivingTag,
                                       error_status_t *pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
} NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
{
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
} NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short *pOffset;
    PFORMAT_STRING pFormatExpr;
} NDR_EXPR_DESC;
typedef struct _MIDL_STUB_DESC
{
    void *RpcInterfaceInformation;

    void *(*pfnAllocate)(size_t);
    void (*pfnFree)(void *);

    union
    {
        handle_t *pAutoHandle;
        handle_t *pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
    } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN *apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
    const EXPR_EVAL *apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;

    const unsigned char *pFormatTypes;

    int fCheckBounds;

    unsigned long Version;

    MALLOC_FREE_STRUCT *pMallocFreeStruct;

    long MIDLVersion;

    const COMM_FAULT_OFFSETS *CommFaultOffsets;

    const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;

    const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
    ULONG_PTR mFlags;

    const NDR_CS_ROUTINES *CsRoutineTables;

    void *ProxyServerInfo;
    const NDR_EXPR_DESC *pExprInfo;

} MIDL_STUB_DESC;

typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;

typedef void *PMIDL_XMIT_TYPE;
typedef void (*STUB_THUNK)(PMIDL_STUB_MESSAGE);

typedef long (*SERVER_ROUTINE)();
typedef struct _MIDL_METHOD_PROPERTY
{
    unsigned long Id;
    ULONG_PTR Value;
} MIDL_METHOD_PROPERTY, *PMIDL_METHOD_PROPERTY;

typedef struct _MIDL_METHOD_PROPERTY_MAP
{
    unsigned long Count;
    const MIDL_METHOD_PROPERTY *Properties;
} MIDL_METHOD_PROPERTY_MAP, *PMIDL_METHOD_PROPERTY_MAP;

typedef struct _MIDL_INTERFACE_METHOD_PROPERTIES
{
    unsigned short MethodCount;
    const MIDL_METHOD_PROPERTY_MAP *const *MethodProperties;
} MIDL_INTERFACE_METHOD_PROPERTIES;
typedef struct _MIDL_SERVER_INFO_
{
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE *DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short *FmtStringOffset;
    const STUB_THUNK *ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
} MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;
typedef struct _MIDL_STUBLESS_PROXY_INFO
{
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short *FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
} MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
typedef struct _MIDL_SYNTAX_INFO
{
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    RPC_DISPATCH_TABLE *DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short *FmtStringOffset;
    PFORMAT_STRING TypeString;
    const void *aUserMarshalQuadruple;
    const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties;
    ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short *PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;
typedef union _CLIENT_CALL_RETURN
{
    void *Pointer;
    LONG_PTR Simple;
} CLIENT_CALL_RETURN;

typedef enum
{
    XLAT_SERVER = 1,
    XLAT_CLIENT
} XLAT_SIDE;

typedef struct _FULL_PTR_XLAT_TABLES
{
    void *RefIdToPointer;
    void *PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;
typedef enum _system_handle_t
{
    SYSTEM_HANDLE_FILE = 0,
    SYSTEM_HANDLE_SEMAPHORE = 1,
    SYSTEM_HANDLE_EVENT = 2,
    SYSTEM_HANDLE_MUTEX = 3,
    SYSTEM_HANDLE_PROCESS = 4,
    SYSTEM_HANDLE_TOKEN = 5,
    SYSTEM_HANDLE_SECTION = 6,
    SYSTEM_HANDLE_REG_KEY = 7,
    SYSTEM_HANDLE_THREAD = 8,
    SYSTEM_HANDLE_COMPOSITION_OBJECT = 9,
    SYSTEM_HANDLE_SOCKET = 10,
    SYSTEM_HANDLE_JOB = 11,
    SYSTEM_HANDLE_PIPE = 12,
    SYSTEM_HANDLE_MAX = 12,
    SYSTEM_HANDLE_INVALID = 0xFF,
} system_handle_t;
enum
{
    MidlInterceptionInfoVersionOne = 1
};

enum
{
    MidlWinrtTypeSerializationInfoVersionOne = 1
};

typedef struct _MIDL_INTERCEPTION_INFO
{
    unsigned long Version;
    PFORMAT_STRING ProcString;
    const unsigned short *ProcFormatOffsetTable;
    unsigned long ProcCount;
    PFORMAT_STRING TypeString;
} MIDL_INTERCEPTION_INFO, *PMIDL_INTERCEPTION_INFO;

typedef struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO
{
    unsigned long Version;
    PFORMAT_STRING TypeFormatString;
    unsigned short FormatStringSize;
    unsigned short TypeOffset;
    PMIDL_STUB_DESC StubDesc;
} MIDL_WINRT_TYPE_SERIALIZATION_INFO, *PMIDL_WINRT_TYPE_SERIALIZATION_INFO;

typedef enum
{
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
} STUB_PHASE;

typedef enum
{
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
} PROXY_PHASE;

struct IRpcStubBuffer;

typedef void *RPC_SS_THREAD_HANDLE;

typedef void *
RPC_CLIENT_ALLOC(
    size_t Size);

typedef void
RPC_CLIENT_FREE(
    void *Ptr);
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void *Buffer;
    unsigned long BufferSize;
    void *(*pfnAllocate)(size_t);
    void (*pfnFree)(void *);
    struct IRpcChannelBuffer *pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;

typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union
    {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } u;
} NDR_USER_MARSHAL_INFO;

typedef WCHAR OLECHAR;

typedef OLECHAR *LPOLESTR;

typedef const OLECHAR *LPCOLESTR;
typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;
typedef struct _COAUTHIDENTITY
{
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
} COAUTHIDENTITY;

typedef struct _COAUTHINFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
} COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;
typedef enum tagMEMCTX
{
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,
    MEMCTX_MACSYSTEM = 3,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2
} MEMCTX;
typedef enum tagCLSCTX
{
    CLSCTX_INPROC_SERVER = 0x1,
    CLSCTX_INPROC_HANDLER = 0x2,
    CLSCTX_LOCAL_SERVER = 0x4,
    CLSCTX_INPROC_SERVER16 = 0x8,
    CLSCTX_REMOTE_SERVER = 0x10,
    CLSCTX_INPROC_HANDLER16 = 0x20,
    CLSCTX_RESERVED1 = 0x40,
    CLSCTX_RESERVED2 = 0x80,
    CLSCTX_RESERVED3 = 0x100,
    CLSCTX_RESERVED4 = 0x200,
    CLSCTX_NO_CODE_DOWNLOAD = 0x400,
    CLSCTX_RESERVED5 = 0x800,
    CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
    CLSCTX_NO_FAILURE_LOG = 0x4000,
    CLSCTX_DISABLE_AAA = 0x8000,
    CLSCTX_ENABLE_AAA = 0x10000,
    CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
    CLSCTX_ACTIVATE_X86_SERVER = 0x40000,
    CLSCTX_ACTIVATE_32_BIT_SERVER = CLSCTX_ACTIVATE_X86_SERVER,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
    CLSCTX_ENABLE_CLOAKING = 0x100000,
    CLSCTX_APPCONTAINER = 0x400000,
    CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
    CLSCTX_RESERVED6 = 0x1000000,
    CLSCTX_ACTIVATE_ARM32_SERVER = 0x2000000,
    CLSCTX_PS_DLL = 0x80000000
} CLSCTX;
typedef enum tagMSHLFLAGS
{
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2,
    MSHLFLAGS_NOPING = 4,
    MSHLFLAGS_RESERVED1 = 8,
    MSHLFLAGS_RESERVED2 = 16,
    MSHLFLAGS_RESERVED3 = 32,
    MSHLFLAGS_RESERVED4 = 64
} MSHLFLAGS;

typedef enum tagMSHCTX
{
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
    MSHCTX_DIFFERENTMACHINE = 2,
    MSHCTX_INPROC = 3,
    MSHCTX_CROSSCTX = 4,
    MSHCTX_RESERVED1 = 5
} MSHCTX;

typedef struct _BYTE_BLOB
{
    ULONG clSize;
    byte abData[1];
} BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
{
    ULONG clSize;
    unsigned short asData[1];
} WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
{
    ULONG clSize;
    ULONG alData[1];
} DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    byte abData[1];
} FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    unsigned short asData[1];
} FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
{
    ULONG clSize;
    byte *pData;
} BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
{
    ULONG clSize;
    unsigned short *pData;
} WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
{
    ULONG clSize;
    ULONG *pData;
} DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
{
    ULONG clSize;
    hyper *pData;
} HYPER_SIZEDARR;

typedef boolean BOOLEAN;

typedef struct tagBLOB
{
    ULONG cbSize;
    BYTE *pBlobData;
} BLOB;

typedef struct tagBLOB *LPBLOB;
typedef struct tagRemHGLOBAL
{
    LONG fNullHGlobal;
    ULONG cbData;
    byte data[1];
} RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    byte data[1];
} RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
{
    ULONG cbData;
    byte data[1];
} RemHENHMETAFILE;

typedef struct tagRemHBITMAP
{
    ULONG cbData;
    byte data[1];
} RemHBITMAP;

typedef struct tagRemHPALETTE
{
    ULONG cbData;
    byte data[1];
} RemHPALETTE;

typedef struct tagRemBRUSH
{
    ULONG cbData;
    byte data[1];
} RemHBRUSH;
typedef enum tagDVASPECT
{
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8
} DVASPECT;

typedef enum tagSTGC
{
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8
} STGC;

typedef enum tagSTGMOVE
{
    STGMOVE_MOVE = 0,
    STGMOVE_COPY = 1,
    STGMOVE_SHALLOWCOPY = 2
} STGMOVE;

typedef enum tagSTATFLAG
{
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1,
    STATFLAG_NOOPEN = 2
} STATFLAG;

typedef void *HCONTEXT;

typedef DWORD LCID;

typedef USHORT LANGID;

typedef struct _userCLIPFORMAT
{
    LONG fContext;
    union __MIDL_IWinTypes_0001
    {
        DWORD dwValue;
        wchar_t *pwszName;
    } u;
} userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;

typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
{
    LONG fContext;
    union __MIDL_IWinTypes_0002
    {
        LONG hInproc;
        DWORD_BLOB *hRemote;
    } u;
} GDI_NONREMOTE;

typedef struct _userHGLOBAL
{
    LONG fContext;
    union __MIDL_IWinTypes_0003
    {
        LONG hInproc;
        FLAGGED_BYTE_BLOB *hRemote;
        __int64 hInproc64;
    } u;
} userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
{
    LONG fContext;
    union __MIDL_IWinTypes_0004
    {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        __int64 hInproc64;
    } u;
} userHMETAFILE;

typedef struct _remoteMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
} remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
{
    LONG fContext;
    union __MIDL_IWinTypes_0005
    {
        LONG hInproc;
        remoteMETAFILEPICT *hRemote;
        __int64 hInproc64;
    } u;
} userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
{
    LONG fContext;
    union __MIDL_IWinTypes_0006
    {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        __int64 hInproc64;
    } u;
} userHENHMETAFILE;

typedef struct _userBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte pBuffer[1];
} userBITMAP;

typedef struct _userHBITMAP
{
    LONG fContext;
    union __MIDL_IWinTypes_0007
    {
        LONG hInproc;
        userBITMAP *hRemote;
        __int64 hInproc64;
    } u;
} userHBITMAP;

typedef struct _userHPALETTE
{
    LONG fContext;
    union __MIDL_IWinTypes_0008
    {
        LONG hInproc;
        LOGPALETTE *hRemote;
        __int64 hInproc64;
    } u;
} userHPALETTE;

typedef struct _RemotableHandle
{
    LONG fContext;
    union __MIDL_IWinTypes_0009
    {
        LONG hInproc;
        LONG hRemote;
    } u;
} RemotableHandle;

typedef RemotableHandle *wireHWND;

typedef RemotableHandle *wireHMENU;

typedef RemotableHandle *wireHACCEL;

typedef RemotableHandle *wireHBRUSH;

typedef RemotableHandle *wireHFONT;

typedef RemotableHandle *wireHDC;

typedef RemotableHandle *wireHICON;

typedef RemotableHandle *wireHRGN;

typedef RemotableHandle *wireHMONITOR;
typedef userHBITMAP *wireHBITMAP;

typedef userHPALETTE *wireHPALETTE;

typedef userHENHMETAFILE *wireHENHMETAFILE;

typedef userHMETAFILE *wireHMETAFILE;

typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef void *HMETAFILEPICT;

typedef double DATE;
typedef union tagCY
{
    struct
    {
        ULONG Lo;
        LONG Hi;
    } s;
    LONGLONG int64;
} CY;

typedef CY *LPCY;
typedef struct tagDEC
{
    USHORT wReserved;
    union
    {
        struct
        {
            BYTE scale;
            BYTE sign;
        } s;
        USHORT signscale;
    } u;
    ULONG Hi32;
    union
    {
        struct
        {
            ULONG Lo32;
            ULONG Mid32;
        } s2;
        ULONGLONG Lo64;
    } u2;
} DECIMAL;
typedef DECIMAL *LPDECIMAL;
typedef FLAGGED_WORD_BLOB *wireBSTR;

typedef OLECHAR *BSTR;
typedef BSTR *LPBSTR;

typedef short VARIANT_BOOL;

typedef struct tagBSTRBLOB
{
    ULONG cbSize;
    BYTE *pData;
} BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;

typedef struct tagCLIPDATA
{
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE *pClipData;
} CLIPDATA;

typedef unsigned short VARTYPE;
enum VARENUM
{
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 0xfff,
    VT_VECTOR = 0x1000,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 0xfff,
    VT_TYPEMASK = 0xfff
};
typedef ULONG PROPID;

typedef struct _tagpropertykey
{
    GUID fmtid;
    DWORD pid;
} PROPERTYKEY;

typedef struct tagCSPLATFORM
{
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
} CSPLATFORM;

typedef struct tagQUERYCONTEXT
{
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
} QUERYCONTEXT;

typedef enum tagTYSPEC
{
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = (TYSPEC_CLSID + 1),
    TYSPEC_MIMETYPE = (TYSPEC_FILEEXT + 1),
    TYSPEC_FILENAME = (TYSPEC_MIMETYPE + 1),
    TYSPEC_PROGID = (TYSPEC_FILENAME + 1),
    TYSPEC_PACKAGENAME = (TYSPEC_PROGID + 1),
    TYSPEC_OBJECTID = (TYSPEC_PACKAGENAME + 1)
} TYSPEC;

typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
{
    DWORD tyspec;
    union __MIDL___MIDL_itf_wtypes_0000_0001_0005
    {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;
        struct
        {
            LPOLESTR pPackageName;
            GUID PolicyId;
        } ByName;
        struct
        {
            GUID ObjectId;
            GUID PolicyId;
        } ByObjectId;
    } tagged_union;
} uCLSSPEC;
typedef struct _STORAGE_HOTPLUG_INFO
{
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
} STORAGE_HOTPLUG_INFO, *PSTORAGE_HOTPLUG_INFO;
typedef struct _STORAGE_DEVICE_NUMBER
{

    DWORD DeviceType;

    DWORD DeviceNumber;

    DWORD PartitionNumber;
} STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;

typedef struct _STORAGE_DEVICE_NUMBERS
{

    DWORD Version;

    DWORD Size;

    DWORD NumberOfDevices;

    STORAGE_DEVICE_NUMBER Devices[1];

} STORAGE_DEVICE_NUMBERS, *PSTORAGE_DEVICE_NUMBERS;
typedef struct _STORAGE_DEVICE_NUMBER_EX
{

    DWORD Version;

    DWORD Size;

    DWORD Flags;

    DWORD DeviceType;

    DWORD DeviceNumber;
    GUID DeviceGuid;

    DWORD PartitionNumber;
} STORAGE_DEVICE_NUMBER_EX, *PSTORAGE_DEVICE_NUMBER_EX;

typedef struct _STORAGE_BUS_RESET_REQUEST
{
    BYTE PathId;
} STORAGE_BUS_RESET_REQUEST, *PSTORAGE_BUS_RESET_REQUEST;

typedef struct STORAGE_BREAK_RESERVATION_REQUEST
{
    DWORD Length;
    BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
} STORAGE_BREAK_RESERVATION_REQUEST, *PSTORAGE_BREAK_RESERVATION_REQUEST;
typedef struct _PREVENT_MEDIA_REMOVAL
{
    BOOLEAN PreventMediaRemoval;
} PREVENT_MEDIA_REMOVAL, *PPREVENT_MEDIA_REMOVAL;

typedef struct _CLASS_MEDIA_CHANGE_CONTEXT
{
    DWORD MediaChangeCount;
    DWORD NewState;
} CLASS_MEDIA_CHANGE_CONTEXT, *PCLASS_MEDIA_CHANGE_CONTEXT;
typedef struct _TAPE_STATISTICS
{
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
} TAPE_STATISTICS, *PTAPE_STATISTICS;

typedef struct _TAPE_GET_STATISTICS
{
    DWORD Operation;
} TAPE_GET_STATISTICS, *PTAPE_GET_STATISTICS;

typedef enum _STORAGE_MEDIA_TYPE
{
    DDS_4mm = 0x20,
    MiniQic,
    Travan,
    QIC,
    MP_8mm,
    AME_8mm,
    AIT1_8mm,
    DLT,
    NCTP,
    IBM_3480,
    IBM_3490E,
    IBM_Magstar_3590,
    IBM_Magstar_MP,
    STK_DATA_D3,
    SONY_DTF,
    DV_6mm,
    DMI,
    SONY_D2,
    CLEANER_CARTRIDGE,
    CD_ROM,
    CD_R,
    CD_RW,
    DVD_ROM,
    DVD_R,
    DVD_RW,
    MO_3_RW,
    MO_5_WO,
    MO_5_RW,
    MO_5_LIMDOW,
    PC_5_WO,
    PC_5_RW,
    PD_5_RW,
    ABL_5_WO,
    PINNACLE_APEX_5_RW,
    SONY_12_WO,
    PHILIPS_12_WO,
    HITACHI_12_WO,
    CYGNET_12_WO,
    KODAK_14_WO,
    MO_NFR_525,
    NIKON_12_RW,
    IOMEGA_ZIP,
    IOMEGA_JAZ,
    SYQUEST_EZ135,
    SYQUEST_EZFLYER,
    SYQUEST_SYJET,
    AVATAR_F2,
    MP2_8mm,
    DST_S,
    DST_M,
    DST_L,
    VXATape_1,
    VXATape_2,

    STK_9840,

    LTO_Ultrium,
    LTO_Accelis,
    DVD_RAM,
    AIT_8mm,
    ADR_1,
    ADR_2,
    STK_9940,
    SAIT,
    VXATape
} STORAGE_MEDIA_TYPE,
    *PSTORAGE_MEDIA_TYPE;
typedef enum _STORAGE_BUS_TYPE
{
    BusTypeUnknown = 0x00,
    BusTypeScsi,
    BusTypeAtapi,
    BusTypeAta,
    BusType1394,
    BusTypeSsa,
    BusTypeFibre,
    BusTypeUsb,
    BusTypeRAID,
    BusTypeiScsi,
    BusTypeSas,
    BusTypeSata,
    BusTypeSd,
    BusTypeMmc,
    BusTypeVirtual,
    BusTypeFileBackedVirtual,
    BusTypeSpaces,
    BusTypeNvme,
    BusTypeSCM,
    BusTypeUfs,
    BusTypeMax,
    BusTypeMaxReserved = 0x7F
} STORAGE_BUS_TYPE,
    *PSTORAGE_BUS_TYPE;
typedef struct _DEVICE_MEDIA_INFO
{
    union
    {
        struct
        {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } DiskInfo;

        struct
        {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } RemovableDiskInfo;

        struct
        {
            STORAGE_MEDIA_TYPE MediaType;
            DWORD MediaCharacteristics;
            DWORD CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;

            union
            {
                struct
                {
                    BYTE MediumType;
                    BYTE DensityCode;
                } ScsiInformation;
            } BusSpecificData;

        } TapeInfo;
    } DeviceSpecific;
} DEVICE_MEDIA_INFO, *PDEVICE_MEDIA_INFO;

typedef struct _GET_MEDIA_TYPES
{
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
} GET_MEDIA_TYPES, *PGET_MEDIA_TYPES;
typedef struct _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE VendorSpecific[512];
} STORAGE_PREDICT_FAILURE, *PSTORAGE_PREDICT_FAILURE;
typedef struct _STORAGE_FAILURE_PREDICTION_CONFIG
{
    DWORD Version;
    DWORD Size;
    BOOLEAN Set;
    BOOLEAN Enabled;
    WORD Reserved;
} STORAGE_FAILURE_PREDICTION_CONFIG, *PSTORAGE_FAILURE_PREDICTION_CONFIG;
typedef enum _STORAGE_QUERY_TYPE
{
    PropertyStandardQuery = 0,
    PropertyExistsQuery,
    PropertyMaskQuery,
    PropertyQueryMaxDefined
} STORAGE_QUERY_TYPE,
    *PSTORAGE_QUERY_TYPE;
typedef enum _STORAGE_SET_TYPE
{
    PropertyStandardSet = 0,
    PropertyExistsSet,
    PropertySetMaxDefined
} STORAGE_SET_TYPE,
    *PSTORAGE_SET_TYPE;

typedef enum _STORAGE_PROPERTY_ID
{
    StorageDeviceProperty = 0,
    StorageAdapterProperty,
    StorageDeviceIdProperty,
    StorageDeviceUniqueIdProperty,
    StorageDeviceWriteCacheProperty,
    StorageMiniportProperty,
    StorageAccessAlignmentProperty,
    StorageDeviceSeekPenaltyProperty,
    StorageDeviceTrimProperty,
    StorageDeviceWriteAggregationProperty,
    StorageDeviceDeviceTelemetryProperty,
    StorageDeviceLBProvisioningProperty,
    StorageDevicePowerProperty,
    StorageDeviceCopyOffloadProperty,
    StorageDeviceResiliencyProperty,
    StorageDeviceMediumProductType,
    StorageAdapterRpmbProperty,
    StorageAdapterCryptoProperty,
    StorageDeviceIoCapabilityProperty = 48,
    StorageAdapterProtocolSpecificProperty,
    StorageDeviceProtocolSpecificProperty,
    StorageAdapterTemperatureProperty,
    StorageDeviceTemperatureProperty,
    StorageAdapterPhysicalTopologyProperty,
    StorageDevicePhysicalTopologyProperty,
    StorageDeviceAttributesProperty,
    StorageDeviceManagementStatus,
    StorageAdapterSerialNumberProperty,
    StorageDeviceLocationProperty,
    StorageDeviceNumaProperty,
    StorageDeviceZonedDeviceProperty,
    StorageDeviceUnsafeShutdownCount,
    StorageDeviceEnduranceProperty,
} STORAGE_PROPERTY_ID,
    *PSTORAGE_PROPERTY_ID;

typedef struct _STORAGE_PROPERTY_QUERY
{

    STORAGE_PROPERTY_ID PropertyId;

    STORAGE_QUERY_TYPE QueryType;

    BYTE AdditionalParameters[1];

} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;

typedef struct _STORAGE_PROPERTY_SET
{

    STORAGE_PROPERTY_ID PropertyId;

    STORAGE_SET_TYPE SetType;

    BYTE AdditionalParameters[1];

} STORAGE_PROPERTY_SET, *PSTORAGE_PROPERTY_SET;

typedef struct _STORAGE_DESCRIPTOR_HEADER
{

    DWORD Version;

    DWORD Size;

} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;

typedef struct _STORAGE_DEVICE_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    BYTE DeviceType;

    BYTE DeviceTypeModifier;

    BOOLEAN RemovableMedia;

    BOOLEAN CommandQueueing;

    DWORD VendorIdOffset;

    DWORD ProductIdOffset;

    DWORD ProductRevisionOffset;

    DWORD SerialNumberOffset;

    STORAGE_BUS_TYPE BusType;

    DWORD RawPropertiesLength;

    BYTE RawDeviceProperties[1];

} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;

typedef struct _STORAGE_ADAPTER_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD MaximumTransferLength;

    DWORD MaximumPhysicalPages;

    DWORD AlignmentMask;

    BOOLEAN AdapterUsesPio;

    BOOLEAN AdapterScansDown;

    BOOLEAN CommandQueueing;

    BOOLEAN AcceleratedTransfer;

    BYTE BusType;

    WORD BusMajorVersion;

    WORD BusMinorVersion;
} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;
typedef struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD BytesPerCacheLine;

    DWORD BytesOffsetForCacheAlignment;

    DWORD BytesPerLogicalSector;

    DWORD BytesPerPhysicalSector;

    DWORD BytesOffsetForSectorAlignment;

} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR, *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;

typedef struct _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD MediumProductType;

} STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR, *PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;

typedef enum _STORAGE_PORT_CODE_SET
{
    StoragePortCodeSetReserved = 0,
    StoragePortCodeSetStorport = 1,
    StoragePortCodeSetSCSIport = 2,
    StoragePortCodeSetSpaceport = 3,
    StoragePortCodeSetATAport = 4,
    StoragePortCodeSetUSBport = 5,
    StoragePortCodeSetSBP2port = 6,
    StoragePortCodeSetSDport = 7
} STORAGE_PORT_CODE_SET,
    *PSTORAGE_PORT_CODE_SET;
typedef struct _STORAGE_MINIPORT_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    STORAGE_PORT_CODE_SET Portdriver;

    BOOLEAN LUNResetSupported;

    BOOLEAN TargetResetSupported;
} STORAGE_MINIPORT_DESCRIPTOR, *PSTORAGE_MINIPORT_DESCRIPTOR;

typedef enum _STORAGE_IDENTIFIER_CODE_SET
{
    StorageIdCodeSetReserved = 0,
    StorageIdCodeSetBinary = 1,
    StorageIdCodeSetAscii = 2,
    StorageIdCodeSetUtf8 = 3
} STORAGE_IDENTIFIER_CODE_SET,
    *PSTORAGE_IDENTIFIER_CODE_SET;

typedef enum _STORAGE_IDENTIFIER_TYPE
{
    StorageIdTypeVendorSpecific = 0,
    StorageIdTypeVendorId = 1,
    StorageIdTypeEUI64 = 2,
    StorageIdTypeFCPHName = 3,
    StorageIdTypePortRelative = 4,
    StorageIdTypeTargetPortGroup = 5,
    StorageIdTypeLogicalUnitGroup = 6,
    StorageIdTypeMD5LogicalUnitIdentifier = 7,
    StorageIdTypeScsiNameString = 8
} STORAGE_IDENTIFIER_TYPE,
    *PSTORAGE_IDENTIFIER_TYPE;

typedef enum _STORAGE_ID_NAA_FORMAT
{
    StorageIdNAAFormatIEEEExtended = 2,
    StorageIdNAAFormatIEEERegistered = 3,
    StorageIdNAAFormatIEEEERegisteredExtended = 5
} STORAGE_ID_NAA_FORMAT,
    *PSTORAGE_ID_NAA_FORMAT;

typedef enum _STORAGE_ASSOCIATION_TYPE
{
    StorageIdAssocDevice = 0,
    StorageIdAssocPort = 1,
    StorageIdAssocTarget = 2
} STORAGE_ASSOCIATION_TYPE,
    *PSTORAGE_ASSOCIATION_TYPE;

typedef struct _STORAGE_IDENTIFIER
{

    STORAGE_IDENTIFIER_CODE_SET CodeSet;

    STORAGE_IDENTIFIER_TYPE Type;

    WORD IdentifierSize;

    WORD NextOffset;

    STORAGE_ASSOCIATION_TYPE Association;

    BYTE Identifier[1];

} STORAGE_IDENTIFIER, *PSTORAGE_IDENTIFIER;

typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD NumberOfIdentifiers;

    BYTE Identifiers[1];

} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;

typedef struct _DEVICE_SEEK_PENALTY_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    BOOLEAN IncursSeekPenalty;
} DEVICE_SEEK_PENALTY_DESCRIPTOR, *PDEVICE_SEEK_PENALTY_DESCRIPTOR;

typedef struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;

    BOOLEAN BenefitsFromWriteAggregation;
} DEVICE_WRITE_AGGREGATION_DESCRIPTOR, *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;

typedef struct _DEVICE_TRIM_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    BOOLEAN TrimEnabled;

} DEVICE_TRIM_DESCRIPTOR, *PDEVICE_TRIM_DESCRIPTOR;
#pragma warning(push)
#pragma warning(disable : 4214)

typedef struct _DEVICE_LB_PROVISIONING_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    BYTE ThinProvisioningEnabled : 1;

    BYTE ThinProvisioningReadZeros : 1;

    BYTE AnchorSupported : 3;

    BYTE UnmapGranularityAlignmentValid : 1;

    BYTE Reserved0 : 2;

    BYTE Reserved1[7];

    DWORDLONG OptimalUnmapGranularity;

    DWORDLONG UnmapGranularityAlignment;
} DEVICE_LB_PROVISIONING_DESCRIPTOR, *PDEVICE_LB_PROVISIONING_DESCRIPTOR;
typedef struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES
{
    DWORD Size;
    DWORD Version;
    BYTE AvailableMappingResourcesValid : 1;
    BYTE UsedMappingResourcesValid : 1;
    BYTE Reserved0 : 6;
    BYTE Reserved1[3];
    BYTE AvailableMappingResourcesScope : 2;
    BYTE UsedMappingResourcesScope : 2;
    BYTE Reserved2 : 4;
    BYTE Reserved3[3];
    DWORDLONG AvailableMappingResources;
    DWORDLONG UsedMappingResources;
} STORAGE_LB_PROVISIONING_MAP_RESOURCES, *PSTORAGE_LB_PROVISIONING_MAP_RESOURCES;
#pragma warning(pop)

typedef struct _DEVICE_POWER_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;

    BOOLEAN DeviceAttentionSupported;
    BOOLEAN AsynchronousNotificationSupported;
    BOOLEAN IdlePowerManagementEnabled;
    BOOLEAN D3ColdEnabled;
    BOOLEAN D3ColdSupported;
    BOOLEAN NoVerifyDuringIdlePower;
    BYTE Reserved[2];
    DWORD IdleTimeoutInMS;
} DEVICE_POWER_DESCRIPTOR, *PDEVICE_POWER_DESCRIPTOR;

typedef struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;

    DWORD MaximumTokenLifetime;
    DWORD DefaultTokenLifetime;
    DWORDLONG MaximumTransferSize;
    DWORDLONG OptimalTransferCount;
    DWORD MaximumDataDescriptors;
    DWORD MaximumTransferLengthPerDescriptor;
    DWORD OptimalTransferLengthPerDescriptor;
    WORD OptimalTransferLengthGranularity;
    BYTE Reserved[2];
} DEVICE_COPY_OFFLOAD_DESCRIPTOR, *PDEVICE_COPY_OFFLOAD_DESCRIPTOR;

typedef struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD NameOffset;

    DWORD NumberOfLogicalCopies;

    DWORD NumberOfPhysicalCopies;

    DWORD PhysicalDiskRedundancy;

    DWORD NumberOfColumns;

    DWORD Interleave;

} STORAGE_DEVICE_RESILIENCY_DESCRIPTOR, *PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR;

typedef enum _STORAGE_RPMB_FRAME_TYPE
{

    StorageRpmbFrameTypeUnknown = 0,
    StorageRpmbFrameTypeStandard,
    StorageRpmbFrameTypeMax,

} STORAGE_RPMB_FRAME_TYPE,
    *PSTORAGE_RPMB_FRAME_TYPE;

typedef struct _STORAGE_RPMB_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD SizeInBytes;

    DWORD MaxReliableWriteSizeInBytes;

    STORAGE_RPMB_FRAME_TYPE FrameFormat;

} STORAGE_RPMB_DESCRIPTOR, *PSTORAGE_RPMB_DESCRIPTOR;

typedef enum _STORAGE_CRYPTO_ALGORITHM_ID
{

    StorageCryptoAlgorithmUnknown = 0,
    StorageCryptoAlgorithmXTSAES = 1,
    StorageCryptoAlgorithmBitlockerAESCBC,
    StorageCryptoAlgorithmAESECB,
    StorageCryptoAlgorithmESSIVAESCBC,
    StorageCryptoAlgorithmMax

} STORAGE_CRYPTO_ALGORITHM_ID,
    *PSTORAGE_CRYPTO_ALGORITHM_ID;

typedef enum _STORAGE_CRYPTO_KEY_SIZE
{

    StorageCryptoKeySizeUnknown = 0,
    StorageCryptoKeySize128Bits = 1,
    StorageCryptoKeySize192Bits,
    StorageCryptoKeySize256Bits,
    StorageCryptoKeySize512Bits

} STORAGE_CRYPTO_KEY_SIZE,
    *PSTORAGE_CRYPTO_KEY_SIZE;

typedef struct _STORAGE_CRYPTO_CAPABILITY
{

    DWORD Version;

    DWORD Size;

    DWORD CryptoCapabilityIndex;

    STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;

    STORAGE_CRYPTO_KEY_SIZE KeySize;

    DWORD DataUnitSizeBitmask;

} STORAGE_CRYPTO_CAPABILITY, *PSTORAGE_CRYPTO_CAPABILITY;

typedef struct _STORAGE_CRYPTO_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD NumKeysSupported;

    DWORD NumCryptoCapabilities;

    STORAGE_CRYPTO_CAPABILITY CryptoCapabilities[1];

} STORAGE_CRYPTO_DESCRIPTOR, *PSTORAGE_CRYPTO_DESCRIPTOR;
typedef enum _STORAGE_TIER_MEDIA_TYPE
{

    StorageTierMediaTypeUnspecified = 0,
    StorageTierMediaTypeDisk = 1,
    StorageTierMediaTypeSsd = 2,
    StorageTierMediaTypeScm = 4,
    StorageTierMediaTypeMax

} STORAGE_TIER_MEDIA_TYPE,
    *PSTORAGE_TIER_MEDIA_TYPE;

typedef enum _STORAGE_TIER_CLASS
{

    StorageTierClassUnspecified = 0,
    StorageTierClassCapacity,
    StorageTierClassPerformance,
    StorageTierClassMax

} STORAGE_TIER_CLASS,
    *PSTORAGE_TIER_CLASS;

typedef struct _STORAGE_TIER
{

    GUID Id;

    WCHAR Name[(256)];

    WCHAR Description[(256)];

    DWORDLONG Flags;

    DWORDLONG ProvisionedCapacity;

    STORAGE_TIER_MEDIA_TYPE MediaType;

    STORAGE_TIER_CLASS Class;

} STORAGE_TIER, *PSTORAGE_TIER;

typedef struct _STORAGE_DEVICE_TIERING_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD Flags;

    DWORD TotalNumberOfTiers;

    DWORD NumberOfTiersReturned;

    STORAGE_TIER Tiers[1];

} STORAGE_DEVICE_TIERING_DESCRIPTOR, *PSTORAGE_DEVICE_TIERING_DESCRIPTOR;

typedef struct _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD NumberOfFaultDomains;

    GUID FaultDomainIds[1];

} STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR, *PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;

typedef enum _STORAGE_PROTOCOL_TYPE
{
    ProtocolTypeUnknown = 0x00,
    ProtocolTypeScsi,
    ProtocolTypeAta,
    ProtocolTypeNvme,
    ProtocolTypeSd,
    ProtocolTypeUfs,
    ProtocolTypeProprietary = 0x7E,
    ProtocolTypeMaxReserved = 0x7F
} STORAGE_PROTOCOL_TYPE,
    *PSTORAGE_PROTOCOL_TYPE;

typedef enum _STORAGE_PROTOCOL_NVME_DATA_TYPE
{
    NVMeDataTypeUnknown = 0,

    NVMeDataTypeIdentify,

    NVMeDataTypeLogPage,

    NVMeDataTypeFeature,

} STORAGE_PROTOCOL_NVME_DATA_TYPE,
    *PSTORAGE_PROTOCOL_NVME_DATA_TYPE;

typedef enum _STORAGE_PROTOCOL_ATA_DATA_TYPE
{
    AtaDataTypeUnknown = 0,
    AtaDataTypeIdentify,
    AtaDataTypeLogPage,
} STORAGE_PROTOCOL_ATA_DATA_TYPE,
    *PSTORAGE_PROTOCOL_ATA_DATA_TYPE;

typedef enum _STORAGE_PROTOCOL_UFS_DATA_TYPE
{
    UfsDataTypeUnknown = 0,
    UfsDataTypeQueryDescriptor,
    UfsDataTypeMax,
} STORAGE_PROTOCOL_UFS_DATA_TYPE,
    *PSTORAGE_PROTOCOL_UFS_DATA_TYPE;

typedef struct _STORAGE_PROTOCOL_SPECIFIC_DATA
{

    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD DataType;

    DWORD ProtocolDataRequestValue;
    DWORD ProtocolDataRequestSubValue;

    DWORD ProtocolDataOffset;
    DWORD ProtocolDataLength;

    DWORD FixedProtocolReturnData;
    DWORD ProtocolDataRequestSubValue2;

    DWORD ProtocolDataRequestSubValue3;
    DWORD Reserved;
} STORAGE_PROTOCOL_SPECIFIC_DATA, *PSTORAGE_PROTOCOL_SPECIFIC_DATA;

typedef struct _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT
{

    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD DataType;

    DWORD ProtocolDataValue;
    DWORD ProtocolDataSubValue;

    DWORD ProtocolDataOffset;
    DWORD ProtocolDataLength;

    DWORD FixedProtocolReturnData;
    DWORD ProtocolDataSubValue2;

    DWORD ProtocolDataSubValue3;
    DWORD ProtocolDataSubValue4;

    DWORD ProtocolDataSubValue5;
    DWORD Reserved[5];
} STORAGE_PROTOCOL_SPECIFIC_DATA_EXT, *PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT;

typedef struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR
{

    DWORD Version;
    DWORD Size;

    STORAGE_PROTOCOL_SPECIFIC_DATA ProtocolSpecificData;

} STORAGE_PROTOCOL_DATA_DESCRIPTOR, *PSTORAGE_PROTOCOL_DATA_DESCRIPTOR;

typedef struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT
{

    DWORD Version;
    DWORD Size;

    STORAGE_PROTOCOL_SPECIFIC_DATA_EXT ProtocolSpecificData;

} STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT, *PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
typedef struct _STORAGE_TEMPERATURE_INFO
{

    WORD Index;
    SHORT Temperature;
    SHORT OverThreshold;
    SHORT UnderThreshold;

    BOOLEAN OverThresholdChangable;
    BOOLEAN UnderThresholdChangable;
    BOOLEAN EventGenerated;
    BYTE Reserved0;
    DWORD Reserved1;

} STORAGE_TEMPERATURE_INFO, *PSTORAGE_TEMPERATURE_INFO;

typedef struct _STORAGE_TEMPERATURE_DATA_DESCRIPTOR
{

    DWORD Version;
    DWORD Size;

    SHORT CriticalTemperature;

    SHORT WarningTemperature;

    WORD InfoCount;

    BYTE Reserved0[2];

    DWORD Reserved1[2];

    STORAGE_TEMPERATURE_INFO TemperatureInfo[1];

} STORAGE_TEMPERATURE_DATA_DESCRIPTOR, *PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR;
typedef struct _STORAGE_TEMPERATURE_THRESHOLD
{

    DWORD Version;
    DWORD Size;

    WORD Flags;
    WORD Index;

    SHORT Threshold;
    BOOLEAN OverThreshold;
    BYTE Reserved;

} STORAGE_TEMPERATURE_THRESHOLD, *PSTORAGE_TEMPERATURE_THRESHOLD;
typedef enum _STORAGE_DEVICE_FORM_FACTOR
{
    FormFactorUnknown = 0,

    FormFactor3_5,
    FormFactor2_5,
    FormFactor1_8,
    FormFactor1_8Less,

    FormFactorEmbedded,
    FormFactorMemoryCard,
    FormFactormSata,
    FormFactorM_2,
    FormFactorPCIeBoard,
    FormFactorDimm,

} STORAGE_DEVICE_FORM_FACTOR,
    *PSTORAGE_DEVICE_FORM_FACTOR;

typedef enum _STORAGE_COMPONENT_HEALTH_STATUS
{
    HealthStatusUnknown = 0,
    HealthStatusNormal,
    HealthStatusThrottled,
    HealthStatusWarning,
    HealthStatusDisabled,
    HealthStatusFailed,
} STORAGE_COMPONENT_HEALTH_STATUS,
    *PSTORAGE_COMPONENT_HEALTH_STATUS;
#pragma warning(push)

typedef union _STORAGE_SPEC_VERSION
{

    struct
    {
        union
        {
            struct
            {
                BYTE SubMinor;
                BYTE Minor;
            } s;

            WORD AsUshort;

        } MinorVersion;

        WORD MajorVersion;
    } s;

    DWORD AsUlong;

} STORAGE_SPEC_VERSION, *PSTORAGE_SPEC_VERSION;
#pragma warning(pop)

typedef struct _STORAGE_PHYSICAL_DEVICE_DATA
{

    DWORD DeviceId;
    DWORD Role;

    STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
    STORAGE_PROTOCOL_TYPE CommandProtocol;
    STORAGE_SPEC_VERSION SpecVersion;
    STORAGE_DEVICE_FORM_FACTOR FormFactor;

    BYTE Vendor[8];
    BYTE Model[40];
    BYTE FirmwareRevision[16];

    DWORDLONG Capacity;

    BYTE PhysicalLocation[32];

    DWORD Reserved[2];

} STORAGE_PHYSICAL_DEVICE_DATA, *PSTORAGE_PHYSICAL_DEVICE_DATA;

typedef struct _STORAGE_PHYSICAL_ADAPTER_DATA
{

    DWORD AdapterId;
    STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
    STORAGE_PROTOCOL_TYPE CommandProtocol;
    STORAGE_SPEC_VERSION SpecVersion;

    BYTE Vendor[8];
    BYTE Model[40];
    BYTE FirmwareRevision[16];

    BYTE PhysicalLocation[32];

    BOOLEAN ExpanderConnected;
    BYTE Reserved0[3];
    DWORD Reserved1[3];

} STORAGE_PHYSICAL_ADAPTER_DATA, *PSTORAGE_PHYSICAL_ADAPTER_DATA;

typedef struct _STORAGE_PHYSICAL_NODE_DATA
{

    DWORD NodeId;

    DWORD AdapterCount;
    DWORD AdapterDataLength;
    DWORD AdapterDataOffset;

    DWORD DeviceCount;
    DWORD DeviceDataLength;
    DWORD DeviceDataOffset;

    DWORD Reserved[3];

} STORAGE_PHYSICAL_NODE_DATA, *PSTORAGE_PHYSICAL_NODE_DATA;

typedef struct _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
{

    DWORD Version;
    DWORD Size;

    DWORD NodeCount;
    DWORD Reserved;

    STORAGE_PHYSICAL_NODE_DATA Node[1];

} STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR, *PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;

typedef struct _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD LunMaxIoCount;

    DWORD AdapterMaxIoCount;

} STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR, *PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;

typedef struct _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DWORD64 Attributes;

} STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR, *PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
typedef enum _STORAGE_DISK_HEALTH_STATUS
{
    DiskHealthUnknown = 0,
    DiskHealthUnhealthy,
    DiskHealthWarning,
    DiskHealthHealthy,
    DiskHealthMax
} STORAGE_DISK_HEALTH_STATUS,
    *PSTORAGE_DISK_HEALTH_STATUS;

typedef enum _STORAGE_DISK_OPERATIONAL_STATUS
{
    DiskOpStatusNone = 0,
    DiskOpStatusUnknown,
    DiskOpStatusOk,
    DiskOpStatusPredictingFailure,
    DiskOpStatusInService,
    DiskOpStatusHardwareError,
    DiskOpStatusNotUsable,
    DiskOpStatusTransientError,
    DiskOpStatusMissing,
} STORAGE_DISK_OPERATIONAL_STATUS,
    *PSTORAGE_DISK_OPERATIONAL_STATUS;

typedef enum _STORAGE_OPERATIONAL_STATUS_REASON
{
    DiskOpReasonUnknown = 0,
    DiskOpReasonScsiSenseCode,
    DiskOpReasonMedia,
    DiskOpReasonIo,
    DiskOpReasonThresholdExceeded,
    DiskOpReasonLostData,
    DiskOpReasonEnergySource,
    DiskOpReasonConfiguration,
    DiskOpReasonDeviceController,
    DiskOpReasonMediaController,
    DiskOpReasonComponent,
    DiskOpReasonNVDIMM_N,
    DiskOpReasonBackgroundOperation,
    DiskOpReasonInvalidFirmware,
    DiskOpReasonHealthCheck,
    DiskOpReasonLostDataPersistence,
    DiskOpReasonDisabledByPlatform,
    DiskOpReasonLostWritePersistence,
    DiskOpReasonDataPersistenceLossImminent,
    DiskOpReasonWritePersistenceLossImminent,
    DiskOpReasonMax
} STORAGE_OPERATIONAL_STATUS_REASON,
    *PSTORAGE_OPERATIONAL_STATUS_REASON;

typedef struct _STORAGE_OPERATIONAL_REASON
{
    DWORD Version;
    DWORD Size;
    STORAGE_OPERATIONAL_STATUS_REASON Reason;

    union
    {

        struct
        {
            BYTE SenseKey;
            BYTE ASC;
            BYTE ASCQ;
            BYTE Reserved;
        } ScsiSenseKey;

        struct
        {
            BYTE CriticalHealth;
            BYTE ModuleHealth[2];
            BYTE ErrorThresholdStatus;
        } NVDIMM_N;

        DWORD AsUlong;
    } RawBytes;
} STORAGE_OPERATIONAL_REASON, *PSTORAGE_OPERATIONAL_REASON;

typedef struct _STORAGE_DEVICE_MANAGEMENT_STATUS
{

    DWORD Version;

    DWORD Size;

    STORAGE_DISK_HEALTH_STATUS Health;

    DWORD NumberOfOperationalStatus;

    DWORD NumberOfAdditionalReasons;

    STORAGE_DISK_OPERATIONAL_STATUS OperationalStatus[16];

    STORAGE_OPERATIONAL_REASON AdditionalReasons[1];

} STORAGE_DEVICE_MANAGEMENT_STATUS, *PSTORAGE_DEVICE_MANAGEMENT_STATUS;
typedef struct _STORAGE_ADAPTER_SERIAL_NUMBER
{

    DWORD Version;

    DWORD Size;

    WCHAR SerialNumber[(128)];

} STORAGE_ADAPTER_SERIAL_NUMBER, *PSTORAGE_ADAPTER_SERIAL_NUMBER;

typedef enum _STORAGE_ZONED_DEVICE_TYPES
{
    ZonedDeviceTypeUnknown = 0,
    ZonedDeviceTypeHostManaged,
    ZonedDeviceTypeHostAware,
    ZonedDeviceTypeDeviceManaged,
} STORAGE_ZONED_DEVICE_TYPES,
    *PSTORAGE_ZONED_DEVICE_TYPES;

typedef enum _STORAGE_ZONE_TYPES
{
    ZoneTypeUnknown = 0,
    ZoneTypeConventional = 1,
    ZoneTypeSequentialWriteRequired = 2,
    ZoneTypeSequentialWritePreferred = 3,
    ZoneTypeMax
} STORAGE_ZONE_TYPES,
    *PSTORAGE_ZONE_TYPES;

typedef struct _STORAGE_ZONE_GROUP
{

    DWORD ZoneCount;

    STORAGE_ZONE_TYPES ZoneType;

    DWORDLONG ZoneSize;

} STORAGE_ZONE_GROUP, *PSTORAGE_ZONE_GROUP;

typedef struct _STORAGE_ZONED_DEVICE_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    STORAGE_ZONED_DEVICE_TYPES DeviceType;

    DWORD ZoneCount;

    union
    {
        struct
        {

            DWORD MaxOpenZoneCount;

            BOOLEAN UnrestrictedRead;

            BYTE Reserved[3];

        } SequentialRequiredZone;

        struct
        {

            DWORD OptimalOpenZoneCount;

            DWORD Reserved;

        } SequentialPreferredZone;

    } ZoneAttributes;

    DWORD ZoneGroupCount;

    STORAGE_ZONE_GROUP ZoneGroup[1];

} STORAGE_ZONED_DEVICE_DESCRIPTOR, *PSTORAGE_ZONED_DEVICE_DESCRIPTOR;
#pragma warning(push)

typedef struct _DEVICE_LOCATION
{

    DWORD Socket;

    DWORD Slot;

    DWORD Adapter;

    DWORD Port;

    union
    {

        struct
        {

            DWORD Channel;

            DWORD Device;

        } s;

        struct
        {

            DWORD Target;

            DWORD Lun;

        } s2;

    } u;

} DEVICE_LOCATION, *PDEVICE_LOCATION;
#pragma warning(pop)

typedef struct _STORAGE_DEVICE_LOCATION_DESCRIPTOR
{

    DWORD Version;

    DWORD Size;

    DEVICE_LOCATION Location;

    DWORD StringOffset;

} STORAGE_DEVICE_LOCATION_DESCRIPTOR, *PSTORAGE_DEVICE_LOCATION_DESCRIPTOR;

typedef struct _STORAGE_DEVICE_NUMA_PROPERTY
{
    DWORD Version;
    DWORD Size;
    DWORD NumaNode;
} STORAGE_DEVICE_NUMA_PROPERTY, *PSTORAGE_DEVICE_NUMA_PROPERTY;

typedef struct _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
{
    DWORD Version;
    DWORD Size;
    DWORD UnsafeShutdownCount;
} STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT, *PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;

typedef struct _STORAGE_HW_ENDURANCE_INFO
{
    DWORD ValidFields;

    DWORD GroupId;

    struct
    {
        DWORD Shared : 1;

        DWORD Reserved : 31;
    } Flags;

    DWORD LifePercentage;

    BYTE BytesReadCount[16];

    BYTE ByteWriteCount[16];

} STORAGE_HW_ENDURANCE_INFO, *PSTORAGE_HW_ENDURANCE_INFO;

typedef struct _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR
{
    DWORD Version;

    DWORD Size;

    STORAGE_HW_ENDURANCE_INFO EnduranceInfo;

} STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR, *PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;

typedef DWORD DEVICE_DATA_MANAGEMENT_SET_ACTION, DEVICE_DSM_ACTION;
typedef struct _DEVICE_DATA_SET_RANGE
{

    LONGLONG StartingOffset;
    DWORDLONG LengthInBytes;

} DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE,
    DEVICE_DSM_RANGE, *PDEVICE_DSM_RANGE;

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{

    DWORD Size;

    DEVICE_DSM_ACTION Action;
    DWORD Flags;

    DWORD ParameterBlockOffset;
    DWORD ParameterBlockLength;

    DWORD DataSetRangesOffset;
    DWORD DataSetRangesLength;

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES,
    DEVICE_DSM_INPUT, *PDEVICE_DSM_INPUT;

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{

    DWORD Size;

    DEVICE_DSM_ACTION Action;
    DWORD Flags;

    DWORD OperationStatus;
    DWORD ExtendedError;
    DWORD TargetDetailedError;
    DWORD ReservedStatus;

    DWORD OutputBlockOffset;
    DWORD OutputBlockLength;

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT,
    DEVICE_DSM_OUTPUT, *PDEVICE_DSM_OUTPUT;

typedef struct _DEVICE_DSM_DEFINITION
{

    DEVICE_DSM_ACTION Action;

    BOOLEAN SingleRange;

    DWORD ParameterBlockAlignment;
    DWORD ParameterBlockLength;

    BOOLEAN HasOutput;

    DWORD OutputBlockAlignment;
    DWORD OutputBlockLength;

} DEVICE_DSM_DEFINITION, *PDEVICE_DSM_DEFINITION;
typedef struct _DEVICE_DSM_NOTIFICATION_PARAMETERS
{

    DWORD Size;

    DWORD Flags;

    DWORD NumFileTypeIDs;
    GUID FileTypeID[1];

} DEVICE_DSM_NOTIFICATION_PARAMETERS, *PDEVICE_DSM_NOTIFICATION_PARAMETERS;
typedef struct _STORAGE_OFFLOAD_TOKEN
{

    BYTE TokenType[4];
    BYTE Reserved[2];
    BYTE TokenIdLength[2];
    union
    {
        struct
        {
            BYTE Reserved2[0x1F8];
        } StorageOffloadZeroDataToken;
        BYTE Token[0x1F8];
    } u;

} STORAGE_OFFLOAD_TOKEN, *PSTORAGE_OFFLOAD_TOKEN;
typedef struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS
{

    DWORD Flags;

    DWORD TimeToLive;

    DWORD Reserved[2];

} DEVICE_DSM_OFFLOAD_READ_PARAMETERS, *PDEVICE_DSM_OFFLOAD_READ_PARAMETERS;
typedef struct _STORAGE_OFFLOAD_READ_OUTPUT
{

    DWORD OffloadReadFlags;
    DWORD Reserved;

    DWORDLONG LengthProtected;

    DWORD TokenLength;
    STORAGE_OFFLOAD_TOKEN Token;

} STORAGE_OFFLOAD_READ_OUTPUT, *PSTORAGE_OFFLOAD_READ_OUTPUT;
typedef struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
{

    DWORD Flags;
    DWORD Reserved;

    DWORDLONG TokenOffset;

    STORAGE_OFFLOAD_TOKEN Token;

} DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS, *PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;

typedef struct _STORAGE_OFFLOAD_WRITE_OUTPUT
{

    DWORD OffloadWriteFlags;
    DWORD Reserved;

    DWORDLONG LengthCopied;

} STORAGE_OFFLOAD_WRITE_OUTPUT, *PSTORAGE_OFFLOAD_WRITE_OUTPUT;
typedef struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS
{

    DWORD Version;
    DWORD Size;

    DWORD Flags;

    DWORD OutputVersion;

} DEVICE_DATA_SET_LBP_STATE_PARAMETERS, *PDEVICE_DATA_SET_LBP_STATE_PARAMETERS,
    DEVICE_DSM_ALLOCATION_PARAMETERS, *PDEVICE_DSM_ALLOCATION_PARAMETERS;

typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE
{

    DWORD Size;
    DWORD Version;

    DWORDLONG SlabSizeInBytes;

    DWORD SlabOffsetDeltaInBytes;

    DWORD SlabAllocationBitMapBitCount;

    DWORD SlabAllocationBitMapLength;

    DWORD SlabAllocationBitMap[1];

} DEVICE_DATA_SET_LB_PROVISIONING_STATE, *PDEVICE_DATA_SET_LB_PROVISIONING_STATE,
    DEVICE_DSM_ALLOCATION_OUTPUT, *PDEVICE_DSM_ALLOCATION_OUTPUT;

typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
{

    DWORD Size;
    DWORD Version;

    DWORDLONG SlabSizeInBytes;

    DWORDLONG SlabOffsetDeltaInBytes;

    DWORD SlabAllocationBitMapBitCount;

    DWORD SlabAllocationBitMapLength;

    DWORD SlabAllocationBitMap[1];

} DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2, *PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2,
    DEVICE_DSM_ALLOCATION_OUTPUT2, *PDEVICE_DSM_ALLOCATION_OUTPUT2;
typedef struct _DEVICE_DATA_SET_REPAIR_PARAMETERS
{

    DWORD NumberOfRepairCopies;
    DWORD SourceCopy;
    DWORD RepairCopies[1];

} DEVICE_DATA_SET_REPAIR_PARAMETERS, *PDEVICE_DATA_SET_REPAIR_PARAMETERS,
    DEVICE_DSM_REPAIR_PARAMETERS, *PDEVICE_DSM_REPAIR_PARAMETERS;
typedef struct _DEVICE_DATA_SET_REPAIR_OUTPUT
{

    DEVICE_DSM_RANGE ParityExtent;

} DEVICE_DATA_SET_REPAIR_OUTPUT, *PDEVICE_DATA_SET_REPAIR_OUTPUT,
    DEVICE_DSM_REPAIR_OUTPUT, *PDEVICE_DSM_REPAIR_OUTPUT;
typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT
{

    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;

} DEVICE_DATA_SET_SCRUB_OUTPUT, *PDEVICE_DATA_SET_SCRUB_OUTPUT,
    DEVICE_DSM_SCRUB_OUTPUT, *PDEVICE_DSM_SCRUB_OUTPUT;

typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT
{

    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;

    DEVICE_DSM_RANGE ParityExtent;

} DEVICE_DATA_SET_SCRUB_EX_OUTPUT, *PDEVICE_DATA_SET_SCRUB_EX_OUTPUT,
    DEVICE_DSM_SCRUB_OUTPUT2, *PDEVICE_DSM_SCRUB_OUTPUT2;
typedef struct _DEVICE_DSM_TIERING_QUERY_INPUT
{

    DWORD Version;
    DWORD Size;

    DWORD Flags;

    DWORD NumberOfTierIds;
    GUID TierIds[1];

} DEVICE_DSM_TIERING_QUERY_INPUT, *PDEVICE_DSM_TIERING_QUERY_INPUT,
    DEVICE_DSM_TIERING_QUERY_PARAMETERS, *PDEVICE_DSM_TIERING_QUERY_PARAMETERS;

typedef struct _STORAGE_TIER_REGION
{

    GUID TierId;

    DWORDLONG Offset;
    DWORDLONG Length;

} STORAGE_TIER_REGION, *PSTORAGE_TIER_REGION;

typedef struct _DEVICE_DSM_TIERING_QUERY_OUTPUT
{

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    DWORD Reserved;

    DWORDLONG Alignment;

    DWORD TotalNumberOfRegions;

    DWORD NumberOfRegionsReturned;
    STORAGE_TIER_REGION Regions[1];

} DEVICE_DSM_TIERING_QUERY_OUTPUT, *PDEVICE_DSM_TIERING_QUERY_OUTPUT;
typedef struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
{

    DWORD Size;

    BYTE TargetPriority;
    BYTE Reserved[3];

} DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS, *PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
typedef struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
{

    DWORDLONG TopologyRangeBytes;

    BYTE TopologyId[16];

} DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT, *PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT,
    DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT, *PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT;
typedef struct _DEVICE_STORAGE_ADDRESS_RANGE
{

    LONGLONG StartAddress;
    DWORDLONG LengthInBytes;

} DEVICE_STORAGE_ADDRESS_RANGE, *PDEVICE_STORAGE_ADDRESS_RANGE;

typedef struct _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
{

    DWORD Version;

    DWORD Flags;

    DWORD TotalNumberOfRanges;

    DWORD NumberOfRangesReturned;
    DEVICE_STORAGE_ADDRESS_RANGE Ranges[1];

} DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT, *PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
typedef struct _DEVICE_DSM_REPORT_ZONES_PARAMETERS
{

    DWORD Size;

    BYTE ReportOption;

    BYTE Partial;

    BYTE Reserved[2];

} DEVICE_DSM_REPORT_ZONES_PARAMETERS, *PDEVICE_DSM_REPORT_ZONES_PARAMETERS;

typedef enum _STORAGE_ZONES_ATTRIBUTES
{

    ZonesAttributeTypeAndLengthMayDifferent = 0,
    ZonesAttributeTypeSameLengthSame = 1,
    ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
    ZonesAttributeTypeMayDifferentLengthSame = 3,

} STORAGE_ZONES_ATTRIBUTES,
    *PSTORAGE_ZONES_ATTRIBUTES;

typedef enum _STORAGE_ZONE_CONDITION
{

    ZoneConditionConventional = 0x00,
    ZoneConditionEmpty = 0x01,
    ZoneConditionImplicitlyOpened = 0x02,
    ZoneConditionExplicitlyOpened = 0x03,
    ZoneConditionClosed = 0x04,

    ZoneConditionReadOnly = 0x0D,
    ZoneConditionFull = 0x0E,
    ZoneConditionOffline = 0x0F,

} STORAGE_ZONE_CONDITION,
    *PSTORAGE_ZONE_CONDITION;

typedef struct _STORAGE_ZONE_DESCRIPTOR
{

    DWORD Size;

    STORAGE_ZONE_TYPES ZoneType;
    STORAGE_ZONE_CONDITION ZoneCondition;

    BOOLEAN ResetWritePointerRecommend;
    BYTE Reserved0[3];

    DWORDLONG ZoneSize;
    DWORDLONG WritePointerOffset;

} STORAGE_ZONE_DESCRIPTOR, *PSTORAGE_ZONE_DESCRIPTOR;

typedef struct _DEVICE_DSM_REPORT_ZONES_DATA
{

    DWORD Size;

    DWORD ZoneCount;
    STORAGE_ZONES_ATTRIBUTES Attributes;

    DWORD Reserved0;

    STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];

} DEVICE_DSM_REPORT_ZONES_DATA, *PDEVICE_DSM_REPORT_ZONES_DATA,
    DEVICE_DSM_REPORT_ZONES_OUTPUT, *PDEVICE_DSM_REPORT_ZONES_OUTPUT;

typedef struct _DEVICE_STORAGE_RANGE_ATTRIBUTES
{

    DWORDLONG LengthInBytes;

    union
    {

        DWORD AllFlags;

        struct
        {

            DWORD IsRangeBad : 1;
        };
    };

    DWORD Reserved;

} DEVICE_STORAGE_RANGE_ATTRIBUTES, *PDEVICE_STORAGE_RANGE_ATTRIBUTES;
#pragma warning(pop)

typedef struct _DEVICE_DSM_RANGE_ERROR_INFO
{

    DWORD Version;

    DWORD Flags;

    DWORD TotalNumberOfRanges;
    DWORD NumberOfRangesReturned;
    DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];

} DEVICE_DSM_RANGE_ERROR_INFO, *PDEVICE_DSM_RANGE_ERROR_INFO,
    DEVICE_DSM_RANGE_ERROR_OUTPUT, *PDEVICE_DSM_RANGE_ERROR_OUTPUT;
typedef struct _DEVICE_DSM_LOST_QUERY_PARAMETERS
{

    DWORD Version;

    DWORDLONG Granularity;

} DEVICE_DSM_LOST_QUERY_PARAMETERS, *PDEVICE_DSM_LOST_QUERY_PARAMETERS;

typedef struct _DEVICE_DSM_LOST_QUERY_OUTPUT
{

    DWORD Version;

    DWORD Size;

    DWORDLONG Alignment;

    DWORD NumberOfBits;
    DWORD BitMap[1];

} DEVICE_DSM_LOST_QUERY_OUTPUT, *PDEVICE_DSM_LOST_QUERY_OUTPUT;
typedef struct _DEVICE_DSM_FREE_SPACE_OUTPUT
{

    DWORD Version;

    DWORDLONG FreeSpace;

} DEVICE_DSM_FREE_SPACE_OUTPUT, *PDEVICE_DSM_FREE_SPACE_OUTPUT;
typedef struct _DEVICE_DSM_CONVERSION_OUTPUT
{

    DWORD Version;

    GUID Source;

} DEVICE_DSM_CONVERSION_OUTPUT, *PDEVICE_DSM_CONVERSION_OUTPUT;

typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT
{

    DWORD MaximumRequestsPerPeriod;

    DWORD MinimumPeriod;

    DWORDLONG MaximumRequestSize;

    DWORD EstimatedTimePerRequest;

    DWORD NumOutStandingRequests;

    DWORDLONG RequestSize;

} STORAGE_GET_BC_PROPERTIES_OUTPUT, *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;
typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT
{

    DWORD Version;

    DWORD RequestsPerPeriod;

    DWORD Period;

    BOOLEAN RetryFailures;

    BOOLEAN Discardable;

    BOOLEAN Reserved1[2];

    DWORD AccessType;

    DWORD AccessMode;

} STORAGE_ALLOCATE_BC_STREAM_INPUT, *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;

typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT
{

    DWORDLONG RequestSize;

    DWORD NumOutStandingRequests;

} STORAGE_ALLOCATE_BC_STREAM_OUTPUT, *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
typedef struct _STORAGE_PRIORITY_HINT_SUPPORT
{
    DWORD SupportFlags;
} STORAGE_PRIORITY_HINT_SUPPORT, *PSTORAGE_PRIORITY_HINT_SUPPORT;

typedef enum _STORAGE_DIAGNOSTIC_LEVEL
{
    StorageDiagnosticLevelDefault = 0,
    StorageDiagnosticLevelMax
} STORAGE_DIAGNOSTIC_LEVEL,
    *PSTORAGE_DIAGNOSTIC_LEVEL;

typedef enum _STORAGE_DIAGNOSTIC_TARGET_TYPE
{

    StorageDiagnosticTargetTypeUndefined = 0,
    StorageDiagnosticTargetTypePort,
    StorageDiagnosticTargetTypeMiniport,
    StorageDiagnosticTargetTypeHbaFirmware,
    StorageDiagnosticTargetTypeMax

} STORAGE_DIAGNOSTIC_TARGET_TYPE,
    *PSTORAGE_DIAGNOSTIC_TARGET_TYPE;

typedef struct _STORAGE_DIAGNOSTIC_REQUEST
{

    DWORD Version;

    DWORD Size;

    DWORD Reserved;

    STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;

    STORAGE_DIAGNOSTIC_LEVEL Level;

} STORAGE_DIAGNOSTIC_REQUEST, *PSTORAGE_DIAGNOSTIC_REQUEST;

typedef struct _STORAGE_DIAGNOSTIC_DATA
{

    DWORD Version;

    DWORD Size;

    GUID ProviderId;

    DWORD BufferSize;

    DWORD Reserved;

    BYTE DiagnosticDataBuffer[1];

} STORAGE_DIAGNOSTIC_DATA, *PSTORAGE_DIAGNOSTIC_DATA;

typedef struct _PHYSICAL_ELEMENT_STATUS_REQUEST
{

    DWORD Version;
    DWORD Size;

    DWORD StartingElement;
    BYTE Filter;
    BYTE ReportType;
    BYTE Reserved[2];

} PHYSICAL_ELEMENT_STATUS_REQUEST, *PPHYSICAL_ELEMENT_STATUS_REQUEST;

typedef struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR
{

    DWORD Version;
    DWORD Size;

    DWORD ElementIdentifier;
    BYTE PhysicalElementType;
    BYTE PhysicalElementHealth;
    BYTE Reserved1[2];

    DWORDLONG AssociatedCapacity;

    DWORD Reserved2[4];

} PHYSICAL_ELEMENT_STATUS_DESCRIPTOR, *PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR;

typedef struct _PHYSICAL_ELEMENT_STATUS
{

    DWORD Version;
    DWORD Size;

    DWORD DescriptorCount;
    DWORD ReturnedDescriptorCount;

    DWORD ElementIdentifierBeingDepoped;
    DWORD Reserved;

    PHYSICAL_ELEMENT_STATUS_DESCRIPTOR Descriptors[1];

} PHYSICAL_ELEMENT_STATUS, *PPHYSICAL_ELEMENT_STATUS;

typedef struct _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST
{

    DWORD Version;
    DWORD Size;

    DWORDLONG RequestCapacity;

    DWORD ElementIdentifier;
    DWORD Reserved;

} REMOVE_ELEMENT_AND_TRUNCATE_REQUEST, *PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
typedef enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE
{
    DeviceInternalStatusDataRequestTypeUndefined = 0,
    DeviceCurrentInternalStatusDataHeader,
    DeviceCurrentInternalStatusData
} DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE,
    *PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;

typedef enum _DEVICE_INTERNAL_STATUS_DATA_SET
{
    DeviceStatusDataSetUndefined = 0,
    DeviceStatusDataSet1,
    DeviceStatusDataSet2,
    DeviceStatusDataSet3,
    DeviceStatusDataSet4,
    DeviceStatusDataSetMax
} DEVICE_INTERNAL_STATUS_DATA_SET,
    *PDEVICE_INTERNAL_STATUS_DATA_SET;

typedef struct _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST
{

    DWORD Version;
    DWORD Size;

    DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE RequestDataType;
    DEVICE_INTERNAL_STATUS_DATA_SET RequestDataSet;

} GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST, *PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;

typedef struct _DEVICE_INTERNAL_STATUS_DATA
{

    DWORD Version;

    DWORD Size;

    DWORDLONG T10VendorId;

    DWORD DataSet1Length;
    DWORD DataSet2Length;
    DWORD DataSet3Length;
    DWORD DataSet4Length;

    BYTE StatusDataVersion;
    BYTE Reserved[3];
    BYTE ReasonIdentifier[128];
    DWORD StatusDataLength;
    BYTE StatusData[1];

} DEVICE_INTERNAL_STATUS_DATA, *PDEVICE_INTERNAL_STATUS_DATA;

typedef struct _STORAGE_READ_CAPACITY
{

    DWORD Version;

    DWORD Size;

    DWORD BlockLength;

    LARGE_INTEGER NumberOfBlocks;

    LARGE_INTEGER DiskLength;

} STORAGE_READ_CAPACITY, *PSTORAGE_READ_CAPACITY;

typedef enum _WRITE_CACHE_TYPE
{
    WriteCacheTypeUnknown,
    WriteCacheTypeNone,
    WriteCacheTypeWriteBack,
    WriteCacheTypeWriteThrough
} WRITE_CACHE_TYPE;

typedef enum _WRITE_CACHE_ENABLE
{
    WriteCacheEnableUnknown,
    WriteCacheDisabled,
    WriteCacheEnabled
} WRITE_CACHE_ENABLE;

typedef enum _WRITE_CACHE_CHANGE
{
    WriteCacheChangeUnknown,
    WriteCacheNotChangeable,
    WriteCacheChangeable
} WRITE_CACHE_CHANGE;

typedef enum _WRITE_THROUGH
{
    WriteThroughUnknown,
    WriteThroughNotSupported,
    WriteThroughSupported
} WRITE_THROUGH;

typedef struct _STORAGE_WRITE_CACHE_PROPERTY
{

    DWORD Version;

    DWORD Size;

    WRITE_CACHE_TYPE WriteCacheType;

    WRITE_CACHE_ENABLE WriteCacheEnabled;

    WRITE_CACHE_CHANGE WriteCacheChangeable;

    WRITE_THROUGH WriteThroughSupported;

    BOOLEAN FlushCacheSupported;

    BOOLEAN UserDefinedPowerProtection;

    BOOLEAN NVCacheEnabled;

} STORAGE_WRITE_CACHE_PROPERTY, *PSTORAGE_WRITE_CACHE_PROPERTY;
typedef enum _DEVICEDUMP_COLLECTION_TYPE
{
    TCCollectionBugCheck = 1,
    TCCollectionApplicationRequested,
    TCCollectionDeviceRequested
} DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE,
    *PDEVICEDUMP_COLLECTION_TYPE;
typedef struct _DEVICEDUMP_SUBSECTION_POINTER
{
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwOffset;
} DEVICEDUMP_SUBSECTION_POINTER, *PDEVICEDUMP_SUBSECTION_POINTER;

typedef struct _DEVICEDUMP_STRUCTURE_VERSION
{

    DWORD dwSignature;

    DWORD dwVersion;

    DWORD dwSize;

} DEVICEDUMP_STRUCTURE_VERSION, *PDEVICEDUMP_STRUCTURE_VERSION;

typedef struct _DEVICEDUMP_SECTION_HEADER
{

    GUID guidDeviceDataId;
    BYTE sOrganizationID[16];

    DWORD dwFirmwareRevision;

    BYTE sModelNumber[32];

    BYTE szDeviceManufacturingID[32];

    DWORD dwFlags;

    DWORD bRestrictedPrivateDataVersion;

    DWORD dwFirmwareIssueId;

    BYTE szIssueDescriptionString[132];

} DEVICEDUMP_SECTION_HEADER, *PDEVICEDUMP_SECTION_HEADER;
typedef struct _GP_LOG_PAGE_DESCRIPTOR
{
    WORD LogAddress;
    WORD LogSectors;
} GP_LOG_PAGE_DESCRIPTOR, *PGP_LOG_PAGE_DESCRIPTOR;

typedef struct _DEVICEDUMP_PUBLIC_SUBSECTION
{
    DWORD dwFlags;
    GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
    CHAR szDescription[16];
    BYTE bData[1];
} DEVICEDUMP_PUBLIC_SUBSECTION, *PDEVICEDUMP_PUBLIC_SUBSECTION;

typedef struct _DEVICEDUMP_RESTRICTED_SUBSECTION
{

    BYTE bData[1];

} DEVICEDUMP_RESTRICTED_SUBSECTION, *PDEVICEDUMP_RESTRICTED_SUBSECTION;

typedef struct _DEVICEDUMP_PRIVATE_SUBSECTION
{

    DWORD dwFlags;
    GP_LOG_PAGE_DESCRIPTOR GPLogId;

    BYTE bData[1];

} DEVICEDUMP_PRIVATE_SUBSECTION, *PDEVICEDUMP_PRIVATE_SUBSECTION;

typedef struct _DEVICEDUMP_STORAGEDEVICE_DATA
{

    DEVICEDUMP_STRUCTURE_VERSION Descriptor;

    DEVICEDUMP_SECTION_HEADER SectionHeader;

    DWORD dwBufferSize;

    DWORD dwReasonForCollection;

    DEVICEDUMP_SUBSECTION_POINTER PublicData;
    DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
    DEVICEDUMP_SUBSECTION_POINTER PrivateData;

} DEVICEDUMP_STORAGEDEVICE_DATA, *PDEVICEDUMP_STORAGEDEVICE_DATA;
typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
{

    BYTE Cdb[16];

    BYTE Command[16];

    DWORDLONG StartTime;

    DWORDLONG EndTime;

    DWORD OperationStatus;

    DWORD OperationError;

    union
    {
        struct
        {
            DWORD dwReserved;
        } ExternalStack;

        struct
        {
            DWORD dwAtaPortSpecific;
        } AtaPort;

        struct
        {
            DWORD SrbTag;
        } StorPort;

    } StackSpecific;

} DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD, *PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;

typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
{

    DEVICEDUMP_STRUCTURE_VERSION Descriptor;

    DWORD dwReasonForCollection;

    BYTE cDriverName[16];

    DWORD uiNumRecords;

    DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];

} DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP, *PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;

typedef struct _STORAGE_IDLE_POWER
{
    DWORD Version;
    DWORD Size;
    DWORD WakeCapableHint : 1;
    DWORD D3ColdSupported : 1;
    DWORD Reserved : 30;
    DWORD D3IdleTimeout;
} STORAGE_IDLE_POWER, *PSTORAGE_IDLE_POWER;

typedef enum _STORAGE_POWERUP_REASON_TYPE
{
    StoragePowerupUnknown = 0,
    StoragePowerupIO,
    StoragePowerupDeviceAttention
} STORAGE_POWERUP_REASON_TYPE,
    *PSTORAGE_POWERUP_REASON_TYPE;

typedef struct _STORAGE_IDLE_POWERUP_REASON
{
    DWORD Version;
    DWORD Size;
    STORAGE_POWERUP_REASON_TYPE PowerupReason;
} STORAGE_IDLE_POWERUP_REASON, *PSTORAGE_IDLE_POWERUP_REASON;
typedef enum _STORAGE_DEVICE_POWER_CAP_UNITS
{
    StorageDevicePowerCapUnitsPercent,
    StorageDevicePowerCapUnitsMilliwatts
} STORAGE_DEVICE_POWER_CAP_UNITS,
    *PSTORAGE_DEVICE_POWER_CAP_UNITS;

typedef struct _STORAGE_DEVICE_POWER_CAP
{
    DWORD Version;
    DWORD Size;
    STORAGE_DEVICE_POWER_CAP_UNITS Units;
    DWORDLONG MaxPower;
} STORAGE_DEVICE_POWER_CAP, *PSTORAGE_DEVICE_POWER_CAP;

typedef struct _STORAGE_RPMB_DATA_FRAME
{

    BYTE Stuff[196];

    BYTE KeyOrMAC[32];

    BYTE Data[256];

    BYTE Nonce[16];

    BYTE WriteCounter[4];

    BYTE Address[2];

    BYTE BlockCount[2];

    BYTE OperationResult[2];

    BYTE RequestOrResponseType[2];

} STORAGE_RPMB_DATA_FRAME, *PSTORAGE_RPMB_DATA_FRAME;

typedef enum _STORAGE_RPMB_COMMAND_TYPE
{
    StorRpmbProgramAuthKey = 0x00000001,
    StorRpmbQueryWriteCounter = 0x00000002,
    StorRpmbAuthenticatedWrite = 0x00000003,
    StorRpmbAuthenticatedRead = 0x00000004,
    StorRpmbReadResultRequest = 0x00000005,
    StorRpmbAuthenticatedDeviceConfigWrite = 0x00000006,
    StorRpmbAuthenticatedDeviceConfigRead = 0x00000007,
} STORAGE_RPMB_COMMAND_TYPE,
    *PSTORAGE_RPMB_COMMAND_TYPE;

typedef struct _STORAGE_EVENT_NOTIFICATION
{
    DWORD Version;
    DWORD Size;
    DWORDLONG Events;
} STORAGE_EVENT_NOTIFICATION, *PSTORAGE_EVENT_NOTIFICATION;
typedef enum _STORAGE_COUNTER_TYPE
{

    StorageCounterTypeUnknown = 0,

    StorageCounterTypeTemperatureCelsius,
    StorageCounterTypeTemperatureCelsiusMax,
    StorageCounterTypeReadErrorsTotal,
    StorageCounterTypeReadErrorsCorrected,
    StorageCounterTypeReadErrorsUncorrected,
    StorageCounterTypeWriteErrorsTotal,
    StorageCounterTypeWriteErrorsCorrected,
    StorageCounterTypeWriteErrorsUncorrected,
    StorageCounterTypeManufactureDate,
    StorageCounterTypeStartStopCycleCount,
    StorageCounterTypeStartStopCycleCountMax,
    StorageCounterTypeLoadUnloadCycleCount,
    StorageCounterTypeLoadUnloadCycleCountMax,
    StorageCounterTypeWearPercentage,
    StorageCounterTypeWearPercentageWarning,
    StorageCounterTypeWearPercentageMax,
    StorageCounterTypePowerOnHours,
    StorageCounterTypeReadLatency100NSMax,
    StorageCounterTypeWriteLatency100NSMax,
    StorageCounterTypeFlushLatency100NSMax,

    StorageCounterTypeMax

} STORAGE_COUNTER_TYPE,
    *PSTORAGE_COUNTER_TYPE;

typedef struct _STORAGE_COUNTER
{

    STORAGE_COUNTER_TYPE Type;

    union
    {

        struct
        {

            DWORD Week;

            DWORD Year;
        } ManufactureDate;

        DWORDLONG AsUlonglong;
    } Value;

} STORAGE_COUNTER, *PSTORAGE_COUNTER;

typedef struct _STORAGE_COUNTERS
{

    DWORD Version;

    DWORD Size;

    DWORD NumberOfCounters;

    STORAGE_COUNTER Counters[1];

} STORAGE_COUNTERS, *PSTORAGE_COUNTERS;
typedef struct _STORAGE_HW_FIRMWARE_INFO_QUERY
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD Reserved;
} STORAGE_HW_FIRMWARE_INFO_QUERY, *PSTORAGE_HW_FIRMWARE_INFO_QUERY;

typedef struct _STORAGE_HW_FIRMWARE_SLOT_INFO
{

    DWORD Version;

    DWORD Size;

    BYTE SlotNumber;

    BYTE ReadOnly : 1;

    BYTE Reserved0 : 7;

    BYTE Reserved1[6];

    BYTE Revision[16];

} STORAGE_HW_FIRMWARE_SLOT_INFO, *PSTORAGE_HW_FIRMWARE_SLOT_INFO;

typedef struct _STORAGE_HW_FIRMWARE_INFO
{

    DWORD Version;

    DWORD Size;

    BYTE SupportUpgrade : 1;

    BYTE Reserved0 : 7;

    BYTE SlotCount;

    BYTE ActiveSlot;

    BYTE PendingActivateSlot;

    BOOLEAN FirmwareShared;

    BYTE Reserved[3];

    DWORD ImagePayloadAlignment;

    DWORD ImagePayloadMaxSize;

    STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];

} STORAGE_HW_FIRMWARE_INFO, *PSTORAGE_HW_FIRMWARE_INFO;

typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD
{

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    BYTE Slot;
    BYTE Reserved[3];

    DWORDLONG Offset;
    DWORDLONG BufferSize;

    BYTE ImageBuffer[1];

} STORAGE_HW_FIRMWARE_DOWNLOAD, *PSTORAGE_HW_FIRMWARE_DOWNLOAD;

typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2
{

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    BYTE Slot;
    BYTE Reserved[3];

    DWORDLONG Offset;
    DWORDLONG BufferSize;

    DWORD ImageSize;
    DWORD Reserved2;

    BYTE ImageBuffer[1];

} STORAGE_HW_FIRMWARE_DOWNLOAD_V2, *PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2;

typedef struct _STORAGE_HW_FIRMWARE_ACTIVATE
{

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    BYTE Slot;
    BYTE Reserved0[3];

} STORAGE_HW_FIRMWARE_ACTIVATE, *PSTORAGE_HW_FIRMWARE_ACTIVATE;

typedef struct _STORAGE_PROTOCOL_COMMAND
{

    DWORD Version;
    DWORD Length;

    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD Flags;

    DWORD ReturnStatus;
    DWORD ErrorCode;

    DWORD CommandLength;
    DWORD ErrorInfoLength;
    DWORD DataToDeviceTransferLength;
    DWORD DataFromDeviceTransferLength;

    DWORD TimeOutValue;

    DWORD ErrorInfoOffset;
    DWORD DataToDeviceBufferOffset;
    DWORD DataFromDeviceBufferOffset;

    DWORD CommandSpecific;
    DWORD Reserved0;

    DWORD FixedProtocolReturnData;
    DWORD Reserved1[3];

    BYTE Command[1];

} STORAGE_PROTOCOL_COMMAND, *PSTORAGE_PROTOCOL_COMMAND;
typedef enum _STORAGE_ATTRIBUTE_MGMT_ACTION
{
    StorAttributeMgmt_ClearAttribute = 0,
    StorAttributeMgmt_SetAttribute = 1,
    StorAttributeMgmt_ResetAttribute = 2
} STORAGE_ATTRIBUTE_MGMT_ACTION,
    *PSTORAGE_ATTRIBUTE_MGMT_ACTION;
typedef struct _STORAGE_ATTRIBUTE_MGMT
{

    DWORD Version;

    DWORD Size;

    STORAGE_ATTRIBUTE_MGMT_ACTION Action;

    DWORD Attribute;

} STORAGE_ATTRIBUTE_MGMT, *PSTORAGE_ATTRIBUTE_MGMT;

typedef enum _MEDIA_TYPE
{
    Unknown,
    F5_1Pt2_512,
    F3_1Pt44_512,
    F3_2Pt88_512,
    F3_20Pt8_512,
    F3_720_512,
    F5_360_512,
    F5_320_512,
    F5_320_1024,
    F5_180_512,
    F5_160_512,
    RemovableMedia,
    FixedMedia,
    F3_120M_512,
    F3_640_512,
    F5_640_512,
    F5_720_512,
    F3_1Pt2_512,
    F3_1Pt23_1024,
    F5_1Pt23_1024,
    F3_128Mb_512,
    F3_230Mb_512,
    F8_256_128,
    F3_200Mb_512,
    F3_240M_512,
    F3_32M_512
} MEDIA_TYPE,
    *PMEDIA_TYPE;

typedef struct _FORMAT_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
} FORMAT_PARAMETERS, *PFORMAT_PARAMETERS;

typedef WORD BAD_TRACK_NUMBER;
typedef WORD *PBAD_TRACK_NUMBER;

typedef struct _FORMAT_EX_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
    WORD FormatGapLength;
    WORD SectorsPerTrack;
    WORD SectorNumber[1];
} FORMAT_EX_PARAMETERS, *PFORMAT_EX_PARAMETERS;

typedef struct _DISK_GEOMETRY
{

    LARGE_INTEGER Cylinders;

    MEDIA_TYPE MediaType;

    DWORD TracksPerCylinder;

    DWORD SectorsPerTrack;

    DWORD BytesPerSector;

} DISK_GEOMETRY, *PDISK_GEOMETRY;
typedef struct _PARTITION_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
} PARTITION_INFORMATION, *PPARTITION_INFORMATION;

typedef struct _SET_PARTITION_INFORMATION
{
    BYTE PartitionType;
} SET_PARTITION_INFORMATION, *PSET_PARTITION_INFORMATION;

typedef struct _DRIVE_LAYOUT_INFORMATION
{
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION, *PDRIVE_LAYOUT_INFORMATION;

typedef struct _VERIFY_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    DWORD Length;
} VERIFY_INFORMATION, *PVERIFY_INFORMATION;

typedef struct _REASSIGN_BLOCKS
{
    WORD Reserved;
    WORD Count;
    DWORD BlockNumber[1];
} REASSIGN_BLOCKS, *PREASSIGN_BLOCKS;

typedef struct _REASSIGN_BLOCKS_EX
{
    WORD Reserved;
    WORD Count;
    LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX, *PREASSIGN_BLOCKS_EX;

typedef enum _PARTITION_STYLE
{
    PARTITION_STYLE_MBR,
    PARTITION_STYLE_GPT,
    PARTITION_STYLE_RAW
} PARTITION_STYLE;

typedef struct _PARTITION_INFORMATION_GPT
{

    GUID PartitionType;

    GUID PartitionId;

    DWORD64 Attributes;

    WCHAR Name[36];

} PARTITION_INFORMATION_GPT, *PPARTITION_INFORMATION_GPT;
typedef struct _PARTITION_INFORMATION_MBR
{

    BYTE PartitionType;

    BOOLEAN BootIndicator;

    BOOLEAN RecognizedPartition;

    DWORD HiddenSectors;
} PARTITION_INFORMATION_MBR, *PPARTITION_INFORMATION_MBR;

typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;

typedef struct _SET_PARTITION_INFORMATION_EX
{
    PARTITION_STYLE PartitionStyle;
    union
    {
        SET_PARTITION_INFORMATION_MBR Mbr;
        SET_PARTITION_INFORMATION_GPT Gpt;
    } u;
} SET_PARTITION_INFORMATION_EX, *PSET_PARTITION_INFORMATION_EX;

typedef struct _CREATE_DISK_GPT
{
    GUID DiskId;
    DWORD MaxPartitionCount;
} CREATE_DISK_GPT, *PCREATE_DISK_GPT;

typedef struct _CREATE_DISK_MBR
{
    DWORD Signature;
} CREATE_DISK_MBR, *PCREATE_DISK_MBR;

typedef struct _CREATE_DISK
{
    PARTITION_STYLE PartitionStyle;
    union
    {
        CREATE_DISK_MBR Mbr;
        CREATE_DISK_GPT Gpt;
    } u;
} CREATE_DISK, *PCREATE_DISK;

typedef struct _GET_LENGTH_INFORMATION
{
    LARGE_INTEGER Length;
} GET_LENGTH_INFORMATION, *PGET_LENGTH_INFORMATION;

typedef struct _PARTITION_INFORMATION_EX
{

    PARTITION_STYLE PartitionStyle;

    LARGE_INTEGER StartingOffset;

    LARGE_INTEGER PartitionLength;

    DWORD PartitionNumber;

    BOOLEAN RewritePartition;
    union
    {

        PARTITION_INFORMATION_MBR Mbr;

        PARTITION_INFORMATION_GPT Gpt;

    } u;

} PARTITION_INFORMATION_EX, *PPARTITION_INFORMATION_EX;

typedef struct _DRIVE_LAYOUT_INFORMATION_GPT
{

    GUID DiskId;

    LARGE_INTEGER StartingUsableOffset;

    LARGE_INTEGER UsableLength;

    DWORD MaxPartitionCount;

} DRIVE_LAYOUT_INFORMATION_GPT, *PDRIVE_LAYOUT_INFORMATION_GPT;

typedef struct _DRIVE_LAYOUT_INFORMATION_MBR
{

    DWORD Signature;
} DRIVE_LAYOUT_INFORMATION_MBR, *PDRIVE_LAYOUT_INFORMATION_MBR;

typedef struct _DRIVE_LAYOUT_INFORMATION_EX
{

    DWORD PartitionStyle;

    DWORD PartitionCount;

    union
    {

        DRIVE_LAYOUT_INFORMATION_MBR Mbr;

        DRIVE_LAYOUT_INFORMATION_GPT Gpt;

    } u;

    PARTITION_INFORMATION_EX PartitionEntry[1];

} DRIVE_LAYOUT_INFORMATION_EX, *PDRIVE_LAYOUT_INFORMATION_EX;
typedef enum _DETECTION_TYPE
{
    DetectNone,
    DetectInt13,
    DetectExInt13
} DETECTION_TYPE;

typedef struct _DISK_INT13_INFO
{
    WORD DriveSelect;
    DWORD MaxCylinders;
    WORD SectorsPerTrack;
    WORD MaxHeads;
    WORD NumberDrives;
} DISK_INT13_INFO, *PDISK_INT13_INFO;

typedef struct _DISK_EX_INT13_INFO
{
    WORD ExBufferSize;
    WORD ExFlags;
    DWORD ExCylinders;
    DWORD ExHeads;
    DWORD ExSectorsPerTrack;
    DWORD64 ExSectorsPerDrive;
    WORD ExSectorSize;
    WORD ExReserved;
} DISK_EX_INT13_INFO, *PDISK_EX_INT13_INFO;
typedef struct _DISK_DETECTION_INFO
{
    DWORD SizeOfDetectInfo;
    DETECTION_TYPE DetectionType;
    union
    {
        struct
        {

            DISK_INT13_INFO Int13;

            DISK_EX_INT13_INFO ExInt13;
        } s;
    } u;
} DISK_DETECTION_INFO, *PDISK_DETECTION_INFO;

typedef struct _DISK_PARTITION_INFO
{
    DWORD SizeOfPartitionInfo;
    PARTITION_STYLE PartitionStyle;
    union
    {
        struct
        {
            DWORD Signature;
            DWORD CheckSum;
        } Mbr;
        struct
        {
            GUID DiskId;
        } Gpt;
    } u;
} DISK_PARTITION_INFO, *PDISK_PARTITION_INFO;
typedef struct _DISK_GEOMETRY_EX
{
    DISK_GEOMETRY Geometry;
    LARGE_INTEGER DiskSize;
    BYTE Data[1];
} DISK_GEOMETRY_EX, *PDISK_GEOMETRY_EX;

typedef struct _DISK_CONTROLLER_NUMBER
{
    DWORD ControllerNumber;
    DWORD DiskNumber;
} DISK_CONTROLLER_NUMBER, *PDISK_CONTROLLER_NUMBER;
typedef enum
{
    EqualPriority,
    KeepPrefetchedData,
    KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;
typedef struct _DISK_CACHE_INFORMATION
{

    BOOLEAN ParametersSavable;

    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;

    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;

    WORD DisablePrefetchTransferLength;

    BOOLEAN PrefetchScalar;

    union
    {
        struct
        {
            WORD Minimum;
            WORD Maximum;

            WORD MaximumBlocks;
        } ScalarPrefetch;

        struct
        {
            WORD Minimum;
            WORD Maximum;
        } BlockPrefetch;
    } u;

} DISK_CACHE_INFORMATION, *PDISK_CACHE_INFORMATION;

typedef struct _DISK_GROW_PARTITION
{
    DWORD PartitionNumber;
    LARGE_INTEGER BytesToGrow;
} DISK_GROW_PARTITION, *PDISK_GROW_PARTITION;
typedef struct _HISTOGRAM_BUCKET
{
    DWORD Reads;
    DWORD Writes;
} HISTOGRAM_BUCKET, *PHISTOGRAM_BUCKET;

typedef struct _DISK_HISTOGRAM
{
    LARGE_INTEGER DiskSize;
    LARGE_INTEGER Start;
    LARGE_INTEGER End;
    LARGE_INTEGER Average;
    LARGE_INTEGER AverageRead;
    LARGE_INTEGER AverageWrite;
    DWORD Granularity;
    DWORD Size;
    DWORD ReadCount;
    DWORD WriteCount;
    PHISTOGRAM_BUCKET Histogram;
} DISK_HISTOGRAM, *PDISK_HISTOGRAM;
typedef struct _DISK_PERFORMANCE
{
    LARGE_INTEGER BytesRead;
    LARGE_INTEGER BytesWritten;
    LARGE_INTEGER ReadTime;
    LARGE_INTEGER WriteTime;
    LARGE_INTEGER IdleTime;
    DWORD ReadCount;
    DWORD WriteCount;
    DWORD QueueDepth;
    DWORD SplitCount;
    LARGE_INTEGER QueryTime;
    DWORD StorageDeviceNumber;
    WCHAR StorageManagerName[8];
} DISK_PERFORMANCE, *PDISK_PERFORMANCE;

typedef struct _DISK_RECORD
{
    LARGE_INTEGER ByteOffset;
    LARGE_INTEGER StartTime;
    LARGE_INTEGER EndTime;
    PVOID VirtualAddress;
    DWORD NumberOfBytes;
    BYTE DeviceNumber;
    BOOLEAN ReadRequest;
} DISK_RECORD, *PDISK_RECORD;

typedef struct _DISK_LOGGING
{
    BYTE Function;
    PVOID BufferAddress;
    DWORD BufferSize;
} DISK_LOGGING, *PDISK_LOGGING;
typedef enum _BIN_TYPES
{
    RequestSize,
    RequestLocation
} BIN_TYPES;

typedef struct _BIN_RANGE
{
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
} BIN_RANGE, *PBIN_RANGE;

typedef struct _PERF_BIN
{
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE BinsRanges[1];
} PERF_BIN, *PPERF_BIN;

typedef struct _BIN_COUNT
{
    BIN_RANGE BinRange;
    DWORD BinCount;
} BIN_COUNT, *PBIN_COUNT;

typedef struct _BIN_RESULTS
{
    DWORD NumberOfBins;
    BIN_COUNT BinCounts[1];
} BIN_RESULTS, *PBIN_RESULTS;

typedef struct _GETVERSIONINPARAMS
{
    BYTE bVersion;
    BYTE bRevision;
    BYTE bReserved;
    BYTE bIDEDeviceMap;
    DWORD fCapabilities;
    DWORD dwReserved[4];
} GETVERSIONINPARAMS, *PGETVERSIONINPARAMS, *LPGETVERSIONINPARAMS;

typedef struct _IDEREGS
{
    BYTE bFeaturesReg;
    BYTE bSectorCountReg;
    BYTE bSectorNumberReg;
    BYTE bCylLowReg;
    BYTE bCylHighReg;
    BYTE bDriveHeadReg;
    BYTE bCommandReg;
    BYTE bReserved;
} IDEREGS, *PIDEREGS, *LPIDEREGS;

typedef struct _SENDCMDINPARAMS
{
    DWORD cBufferSize;
    IDEREGS irDriveRegs;
    BYTE bDriveNumber;

    BYTE bReserved[3];
    DWORD dwReserved[4];
    BYTE bBuffer[1];
} SENDCMDINPARAMS, *PSENDCMDINPARAMS, *LPSENDCMDINPARAMS;

typedef struct _DRIVERSTATUS
{
    BYTE bDriverError;

    BYTE bIDEError;

    BYTE bReserved[2];
    DWORD dwReserved[2];
} DRIVERSTATUS, *PDRIVERSTATUS, *LPDRIVERSTATUS;

typedef struct _SENDCMDOUTPARAMS
{
    DWORD cBufferSize;
    DRIVERSTATUS DriverStatus;
    BYTE bBuffer[1];
} SENDCMDOUTPARAMS, *PSENDCMDOUTPARAMS, *LPSENDCMDOUTPARAMS;

typedef struct _GET_DISK_ATTRIBUTES
{

    DWORD Version;

    DWORD Reserved1;

    DWORDLONG Attributes;

} GET_DISK_ATTRIBUTES, *PGET_DISK_ATTRIBUTES;
typedef struct _SET_DISK_ATTRIBUTES
{

    DWORD Version;

    BOOLEAN Persist;

    BYTE Reserved1[3];

    DWORDLONG Attributes;

    DWORDLONG AttributesMask;

    DWORD Reserved2[4];

} SET_DISK_ATTRIBUTES, *PSET_DISK_ATTRIBUTES;

typedef enum _ELEMENT_TYPE
{
    AllElements,
    ChangerTransport,
    ChangerSlot,
    ChangerIEPort,
    ChangerDrive,
    ChangerDoor,
    ChangerKeypad,
    ChangerMaxElement
} ELEMENT_TYPE,
    *PELEMENT_TYPE;

typedef struct _CHANGER_ELEMENT
{
    ELEMENT_TYPE ElementType;
    DWORD ElementAddress;
} CHANGER_ELEMENT, *PCHANGER_ELEMENT;

typedef struct _CHANGER_ELEMENT_LIST
{
    CHANGER_ELEMENT Element;
    DWORD NumberOfElements;
} CHANGER_ELEMENT_LIST, *PCHANGER_ELEMENT_LIST;
typedef struct _GET_CHANGER_PARAMETERS
{

    DWORD Size;

    WORD NumberTransportElements;
    WORD NumberStorageElements;
    WORD NumberCleanerSlots;
    WORD NumberIEElements;
    WORD NumberDataTransferElements;

    WORD NumberOfDoors;

    WORD FirstSlotNumber;
    WORD FirstDriveNumber;
    WORD FirstTransportNumber;
    WORD FirstIEPortNumber;
    WORD FirstCleanerSlotAddress;

    WORD MagazineSize;

    DWORD DriveCleanTimeout;

    DWORD Features0;
    DWORD Features1;

    BYTE MoveFromTransport;
    BYTE MoveFromSlot;
    BYTE MoveFromIePort;
    BYTE MoveFromDrive;

    BYTE ExchangeFromTransport;
    BYTE ExchangeFromSlot;
    BYTE ExchangeFromIePort;
    BYTE ExchangeFromDrive;

    BYTE LockUnlockCapabilities;

    BYTE PositionCapabilities;

    BYTE Reserved1[2];
    DWORD Reserved2[2];

} GET_CHANGER_PARAMETERS, *PGET_CHANGER_PARAMETERS;

typedef struct _CHANGER_PRODUCT_DATA
{

    BYTE VendorId[8];

    BYTE ProductId[16];

    BYTE Revision[4];

    BYTE SerialNumber[32];

    BYTE DeviceType;

} CHANGER_PRODUCT_DATA, *PCHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_ACCESS
{

    CHANGER_ELEMENT Element;

    DWORD Control;
} CHANGER_SET_ACCESS, *PCHANGER_SET_ACCESS;

typedef struct _CHANGER_READ_ELEMENT_STATUS
{

    CHANGER_ELEMENT_LIST ElementList;

    BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS, *PCHANGER_READ_ELEMENT_STATUS;

typedef struct _CHANGER_ELEMENT_STATUS
{

    CHANGER_ELEMENT Element;

    CHANGER_ELEMENT SrcElementAddress;

    DWORD Flags;

    DWORD ExceptionCode;

    BYTE TargetId;

    BYTE Lun;
    WORD Reserved;

    BYTE PrimaryVolumeID[36];

    BYTE AlternateVolumeID[36];

} CHANGER_ELEMENT_STATUS, *PCHANGER_ELEMENT_STATUS;

typedef struct _CHANGER_ELEMENT_STATUS_EX
{

    CHANGER_ELEMENT Element;

    CHANGER_ELEMENT SrcElementAddress;

    DWORD Flags;

    DWORD ExceptionCode;

    BYTE TargetId;

    BYTE Lun;
    WORD Reserved;

    BYTE PrimaryVolumeID[36];

    BYTE AlternateVolumeID[36];

    BYTE VendorIdentification[8];

    BYTE ProductIdentification[16];

    BYTE SerialNumber[32];

} CHANGER_ELEMENT_STATUS_EX, *PCHANGER_ELEMENT_STATUS_EX;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS
{

    CHANGER_ELEMENT_LIST ElementList;

    BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS, *PCHANGER_INITIALIZE_ELEMENT_STATUS;

typedef struct _CHANGER_SET_POSITION
{

    CHANGER_ELEMENT Transport;

    CHANGER_ELEMENT Destination;

    BOOLEAN Flip;
} CHANGER_SET_POSITION, *PCHANGER_SET_POSITION;

typedef struct _CHANGER_EXCHANGE_MEDIUM
{

    CHANGER_ELEMENT Transport;

    CHANGER_ELEMENT Source;

    CHANGER_ELEMENT Destination1;

    CHANGER_ELEMENT Destination2;

    BOOLEAN Flip1;
    BOOLEAN Flip2;
} CHANGER_EXCHANGE_MEDIUM, *PCHANGER_EXCHANGE_MEDIUM;

typedef struct _CHANGER_MOVE_MEDIUM
{

    CHANGER_ELEMENT Transport;

    CHANGER_ELEMENT Source;

    CHANGER_ELEMENT Destination;

    BOOLEAN Flip;
} CHANGER_MOVE_MEDIUM, *PCHANGER_MOVE_MEDIUM;
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION
{

    CHANGER_ELEMENT StartingElement;

    DWORD ActionCode;

    BYTE VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION, *PCHANGER_SEND_VOLUME_TAG_INFORMATION;

typedef struct _READ_ELEMENT_ADDRESS_INFO
{

    DWORD NumberOfElements;

    CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO, *PREAD_ELEMENT_ADDRESS_INFO;
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE
{
    DeviceProblemNone,
    DeviceProblemHardware,
    DeviceProblemCHMError,
    DeviceProblemDoorOpen,
    DeviceProblemCalibrationError,
    DeviceProblemTargetFailure,
    DeviceProblemCHMMoveError,
    DeviceProblemCHMZeroError,
    DeviceProblemCartridgeInsertError,
    DeviceProblemPositionError,
    DeviceProblemSensorError,
    DeviceProblemCartridgeEjectError,
    DeviceProblemGripperError,
    DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE,
    *PCHANGER_DEVICE_PROBLEM_TYPE;
typedef struct _PATHNAME_BUFFER
{

    DWORD PathNameLength;
    WCHAR Name[1];

} PATHNAME_BUFFER, *PPATHNAME_BUFFER;

typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER
{

    BYTE First0x24BytesOfBootSector[0x24];

} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct
{

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;

} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;

typedef struct
{

    DWORD ByteCount;

    WORD MajorVersion;
    WORD MinorVersion;

    DWORD BytesPerPhysicalSector;

    WORD LfsMajorVersion;
    WORD LfsMinorVersion;
} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA;
typedef struct
{

    LARGE_INTEGER StartingLcn;

} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;
typedef struct
{

    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE Buffer[1];

} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;

typedef struct
{

    LARGE_INTEGER StartingVcn;

} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER
{

    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct
    {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    } Extents[1];

} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;
typedef struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
{

    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct
    {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
        DWORD ReferenceCount;
    } Extents[1];

} RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER, *PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
typedef struct RETRIEVAL_POINTER_COUNT
{

    DWORD ExtentCount;

} RETRIEVAL_POINTER_COUNT, *PRETRIEVAL_POINTER_COUNT;

typedef struct
{

    LARGE_INTEGER FileReferenceNumber;

} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct
{

    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE FileRecordBuffer[1];

} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;

typedef struct
{

    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;

} MOVE_FILE_DATA, *PMOVE_FILE_DATA;

typedef struct
{

    HANDLE FileHandle;
    LARGE_INTEGER SourceFileRecord;
    LARGE_INTEGER TargetFileRecord;

} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA;
typedef struct
{
    DWORD Restart;
    SID Sid;
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA;

typedef struct
{
    DWORD NextEntryOffset;
    DWORD FileIndex;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT;
typedef struct
{

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;

} MFT_ENUM_DATA_V0, *PMFT_ENUM_DATA_V0;

typedef struct
{

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} MFT_ENUM_DATA_V1, *PMFT_ENUM_DATA_V1;

typedef MFT_ENUM_DATA_V0 MFT_ENUM_DATA, *PMFT_ENUM_DATA;

typedef struct
{

    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA;
typedef struct
{

    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} READ_FILE_USN_DATA, *PREAD_FILE_USN_DATA;

typedef struct
{

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;

} READ_USN_JOURNAL_DATA_V0, *PREAD_USN_JOURNAL_DATA_V0;

typedef struct
{

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} READ_USN_JOURNAL_DATA_V1, *PREAD_USN_JOURNAL_DATA_V1;

typedef READ_USN_JOURNAL_DATA_V0 READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA;

typedef struct
{
    DWORD Flags;
    DWORD Unused;
    DWORDLONG ChunkSize;
    LONGLONG FileSizeThreshold;
} USN_TRACK_MODIFIED_RANGES, *PUSN_TRACK_MODIFIED_RANGES;

typedef struct
{
    USN Usn;
} USN_RANGE_TRACK_OUTPUT, *PUSN_RANGE_TRACK_OUTPUT;
typedef struct
{

    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V2, *PUSN_RECORD_V2;

typedef struct
{

    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V3, *PUSN_RECORD_V3;

typedef USN_RECORD_V2 USN_RECORD, *PUSN_RECORD;

typedef struct
{
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
} USN_RECORD_COMMON_HEADER, *PUSN_RECORD_COMMON_HEADER;

typedef struct
{
    LONGLONG Offset;
    LONGLONG Length;
} USN_RECORD_EXTENT, *PUSN_RECORD_EXTENT;

typedef struct
{
    USN_RECORD_COMMON_HEADER Header;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD RemainingExtents;
    WORD NumberOfExtents;
    WORD ExtentSize;
    USN_RECORD_EXTENT Extents[1];
} USN_RECORD_V4, *PUSN_RECORD_V4;

typedef union
{
    USN_RECORD_COMMON_HEADER Header;
    USN_RECORD_V2 V2;
    USN_RECORD_V3 V3;
    USN_RECORD_V4 V4;
} USN_RECORD_UNION, *PUSN_RECORD_UNION;
typedef struct
{

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} USN_JOURNAL_DATA_V0, *PUSN_JOURNAL_DATA_V0;

typedef struct
{

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;

} USN_JOURNAL_DATA_V1, *PUSN_JOURNAL_DATA_V1;

typedef struct
{

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;
    DWORD Flags;
    DWORDLONG RangeTrackChunkSize;
    LONGLONG RangeTrackFileSizeThreshold;

} USN_JOURNAL_DATA_V2, *PUSN_JOURNAL_DATA_V2;

typedef USN_JOURNAL_DATA_V0 USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;

typedef struct
{

    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;

} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA;

typedef struct
{

    DWORD UsnSourceInfo;

    HANDLE VolumeHandle;
    DWORD HandleInfo;

} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO;

typedef struct
{

    ACCESS_MASK DesiredAccess;
    DWORD SecurityIds[1];

} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA;
typedef struct _FILE_PREFETCH
{
    DWORD Type;
    DWORD Count;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH, *PFILE_PREFETCH;

typedef struct _FILE_PREFETCH_EX
{
    DWORD Type;
    DWORD Count;
    PVOID Context;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH_EX, *PFILE_PREFETCH_EX;
typedef struct _FILESYSTEM_STATISTICS
{

    WORD FileSystemType;
    WORD Version;

    DWORD SizeOfCompleteStructure;

    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;

    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;

} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;
typedef struct _FAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS;

typedef struct _EXFAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;

typedef struct _NTFS_STATISTICS
{

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;

    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
    struct
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftWritesUserLevel;

    WORD MftWritesFlushForLogFileFull;
    WORD MftWritesLazyWriter;
    WORD MftWritesUserRequest;

    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
    struct
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } Mft2WritesUserLevel;

    WORD Mft2WritesFlushForLogFileFull;
    WORD Mft2WritesLazyWriter;
    WORD Mft2WritesUserRequest;

    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;

    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;

    WORD BitmapWritesFlushForLogFileFull;
    WORD BitmapWritesLazyWriter;
    WORD BitmapWritesUserRequest;

    struct
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
    } BitmapWritesUserLevel;

    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;

    WORD MftBitmapWritesFlushForLogFileFull;
    WORD MftBitmapWritesLazyWriter;
    WORD MftBitmapWritesUserRequest;

    struct
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftBitmapWritesUserLevel;

    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;

    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;

    struct
    {
        DWORD Calls;
        DWORD Clusters;
        DWORD Hints;

        DWORD RunsReturned;

        DWORD HintsHonored;
        DWORD HintsClusters;
        DWORD Cache;
        DWORD CacheClusters;
        DWORD CacheMiss;
        DWORD CacheMissClusters;
    } Allocate;

    DWORD DiskResourcesExhausted;

} NTFS_STATISTICS, *PNTFS_STATISTICS;

typedef struct _FILESYSTEM_STATISTICS_EX
{

    WORD FileSystemType;
    WORD Version;

    DWORD SizeOfCompleteStructure;

    DWORDLONG UserFileReads;
    DWORDLONG UserFileReadBytes;
    DWORDLONG UserDiskReads;
    DWORDLONG UserFileWrites;
    DWORDLONG UserFileWriteBytes;
    DWORDLONG UserDiskWrites;

    DWORDLONG MetaDataReads;
    DWORDLONG MetaDataReadBytes;
    DWORDLONG MetaDataDiskReads;
    DWORDLONG MetaDataWrites;
    DWORDLONG MetaDataWriteBytes;
    DWORDLONG MetaDataDiskWrites;

} FILESYSTEM_STATISTICS_EX, *PFILESYSTEM_STATISTICS_EX;

typedef struct _NTFS_STATISTICS_EX
{

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;

    DWORDLONG MftReads;
    DWORDLONG MftReadBytes;
    DWORDLONG MftWrites;
    DWORDLONG MftWriteBytes;
    struct
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } MftWritesUserLevel;

    DWORD MftWritesFlushForLogFileFull;
    DWORD MftWritesLazyWriter;
    DWORD MftWritesUserRequest;

    DWORDLONG Mft2Writes;
    DWORDLONG Mft2WriteBytes;
    struct
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } Mft2WritesUserLevel;

    DWORD Mft2WritesFlushForLogFileFull;
    DWORD Mft2WritesLazyWriter;
    DWORD Mft2WritesUserRequest;

    DWORDLONG RootIndexReads;
    DWORDLONG RootIndexReadBytes;
    DWORDLONG RootIndexWrites;
    DWORDLONG RootIndexWriteBytes;

    DWORDLONG BitmapReads;
    DWORDLONG BitmapReadBytes;
    DWORDLONG BitmapWrites;
    DWORDLONG BitmapWriteBytes;

    DWORD BitmapWritesFlushForLogFileFull;
    DWORD BitmapWritesLazyWriter;
    DWORD BitmapWritesUserRequest;

    struct
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } BitmapWritesUserLevel;

    DWORDLONG MftBitmapReads;
    DWORDLONG MftBitmapReadBytes;
    DWORDLONG MftBitmapWrites;
    DWORDLONG MftBitmapWriteBytes;

    DWORD MftBitmapWritesFlushForLogFileFull;
    DWORD MftBitmapWritesLazyWriter;
    DWORD MftBitmapWritesUserRequest;

    struct
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } MftBitmapWritesUserLevel;

    DWORDLONG UserIndexReads;
    DWORDLONG UserIndexReadBytes;
    DWORDLONG UserIndexWrites;
    DWORDLONG UserIndexWriteBytes;

    DWORDLONG LogFileReads;
    DWORDLONG LogFileReadBytes;
    DWORDLONG LogFileWrites;
    DWORDLONG LogFileWriteBytes;

    struct
    {
        DWORD Calls;
        DWORD RunsReturned;
        DWORD Hints;
        DWORD HintsHonored;
        DWORD Cache;
        DWORD CacheMiss;

        DWORDLONG Clusters;
        DWORDLONG HintsClusters;
        DWORDLONG CacheClusters;
        DWORDLONG CacheMissClusters;
    } Allocate;

    DWORD DiskResourcesExhausted;

    DWORDLONG VolumeTrimCount;
    DWORDLONG VolumeTrimTime;
    DWORDLONG VolumeTrimByteCount;

    DWORDLONG FileLevelTrimCount;
    DWORDLONG FileLevelTrimTime;
    DWORDLONG FileLevelTrimByteCount;

    DWORDLONG VolumeTrimSkippedCount;
    DWORDLONG VolumeTrimSkippedByteCount;

    DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount;
    DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
    DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;

} NTFS_STATISTICS_EX, *PNTFS_STATISTICS_EX;

typedef struct _FILE_OBJECTID_BUFFER
{

    BYTE ObjectId[16];

    union
    {
        struct
        {
            BYTE BirthVolumeId[16];
            BYTE BirthObjectId[16];
            BYTE DomainId[16];
        } s;
        BYTE ExtendedInfo[48];
    } u;

} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;

typedef struct _FILE_SET_SPARSE_BUFFER
{
    BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER, *PFILE_SET_SPARSE_BUFFER;
typedef struct _FILE_ZERO_DATA_INFORMATION
{

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;

} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER
{

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;

} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER;
typedef struct _ENCRYPTION_BUFFER
{

    DWORD EncryptionOperation;
    BYTE Private[1];

} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER;
typedef struct _DECRYPTION_STATUS_BUFFER
{

    BOOLEAN NoEncryptedStreams;

} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER;

typedef struct _REQUEST_RAW_ENCRYPTED_DATA
{

    LONGLONG FileOffset;
    DWORD Length;

} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA;
typedef struct _ENCRYPTED_DATA_INFO
{

    DWORDLONG StartingFileOffset;

    DWORD OutputBufferOffset;

    DWORD BytesWithinFileSize;

    DWORD BytesWithinValidDataLength;

    WORD CompressionFormat;
    BYTE DataUnitShift;
    BYTE ChunkShift;
    BYTE ClusterShift;

    BYTE EncryptionFormat;

    WORD NumberOfDataBlocks;
    DWORD DataBlockSize[1];

} ENCRYPTED_DATA_INFO, *PENCRYPTED_DATA_INFO;
typedef struct _PLEX_READ_DATA_REQUEST
{
    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;

} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST;
typedef struct _SI_COPYFILE
{
    DWORD SourceFileNameLength;
    DWORD DestinationFileNameLength;
    DWORD Flags;
    WCHAR FileNameBuffer[1];
} SI_COPYFILE, *PSI_COPYFILE;
typedef struct _FILE_MAKE_COMPATIBLE_BUFFER
{
    BOOLEAN CloseDisc;
} FILE_MAKE_COMPATIBLE_BUFFER, *PFILE_MAKE_COMPATIBLE_BUFFER;

typedef struct _FILE_SET_DEFECT_MGMT_BUFFER
{
    BOOLEAN Disable;
} FILE_SET_DEFECT_MGMT_BUFFER, *PFILE_SET_DEFECT_MGMT_BUFFER;

typedef struct _FILE_QUERY_SPARING_BUFFER
{
    DWORD SparingUnitBytes;
    BOOLEAN SoftwareSparing;
    DWORD TotalSpareBlocks;
    DWORD FreeSpareBlocks;
} FILE_QUERY_SPARING_BUFFER, *PFILE_QUERY_SPARING_BUFFER;

typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER
{
    LARGE_INTEGER DirectoryCount;
    LARGE_INTEGER FileCount;
    WORD FsFormatMajVersion;
    WORD FsFormatMinVersion;
    WCHAR FsFormatName[12];
    LARGE_INTEGER FormatTime;
    LARGE_INTEGER LastUpdateTime;
    WCHAR CopyrightInfo[34];
    WCHAR AbstractInfo[34];
    WCHAR FormattingImplementationInfo[34];
    WCHAR LastModifyingImplementationInfo[34];
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER, *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
typedef DWORDLONG CLSN;

typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER
{
    DWORDLONG Hint1;
    DWORDLONG Hint2;
    CLSN Clsn;
    DWORD Status;
} FILE_INITIATE_REPAIR_OUTPUT_BUFFER, *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;

typedef enum _SHRINK_VOLUME_REQUEST_TYPES
{
    ShrinkPrepare = 1,
    ShrinkCommit,
    ShrinkAbort

} SHRINK_VOLUME_REQUEST_TYPES,
    *PSHRINK_VOLUME_REQUEST_TYPES;

typedef struct _SHRINK_VOLUME_INFORMATION
{
    SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
    DWORDLONG Flags;
    LONGLONG NewNumberOfSectors;

} SHRINK_VOLUME_INFORMATION, *PSHRINK_VOLUME_INFORMATION;
typedef struct _TXFS_MODIFY_RM
{

    DWORD Flags;

    DWORD LogContainerCountMax;

    DWORD LogContainerCountMin;

    DWORD LogContainerCount;

    DWORD LogGrowthIncrement;

    DWORD LogAutoShrinkPercentage;

    DWORDLONG Reserved;

    WORD LoggingMode;

} TXFS_MODIFY_RM,
    *PTXFS_MODIFY_RM;
typedef struct _TXFS_QUERY_RM_INFORMATION
{

    DWORD BytesRequired;

    DWORDLONG TailLsn;

    DWORDLONG CurrentLsn;

    DWORDLONG ArchiveTailLsn;

    DWORDLONG LogContainerSize;

    LARGE_INTEGER HighestVirtualClock;

    DWORD LogContainerCount;

    DWORD LogContainerCountMax;

    DWORD LogContainerCountMin;

    DWORD LogGrowthIncrement;

    DWORD LogAutoShrinkPercentage;

    DWORD Flags;

    WORD LoggingMode;

    WORD Reserved;

    DWORD RmState;

    DWORDLONG LogCapacity;

    DWORDLONG LogFree;

    DWORDLONG TopsSize;

    DWORDLONG TopsUsed;

    DWORDLONG TransactionCount;

    DWORDLONG OnePCCount;

    DWORDLONG TwoPCCount;

    DWORDLONG NumberLogFileFull;

    DWORDLONG OldestTransactionAge;

    GUID RMName;

    DWORD TmLogPathOffset;

} TXFS_QUERY_RM_INFORMATION,
    *PTXFS_QUERY_RM_INFORMATION;
typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION
{
    LARGE_INTEGER LastVirtualClock;
    DWORDLONG LastRedoLsn;
    DWORDLONG HighestRecoveryLsn;
    DWORD Flags;
} TXFS_ROLLFORWARD_REDO_INFORMATION,
    *PTXFS_ROLLFORWARD_REDO_INFORMATION;
typedef struct _TXFS_START_RM_INFORMATION
{

    DWORD Flags;

    DWORDLONG LogContainerSize;

    DWORD LogContainerCountMin;

    DWORD LogContainerCountMax;

    DWORD LogGrowthIncrement;

    DWORD LogAutoShrinkPercentage;

    DWORD TmLogPathOffset;

    WORD TmLogPathLength;

    WORD LoggingMode;

    WORD LogPathLength;

    WORD Reserved;

    WCHAR LogPath[1];

} TXFS_START_RM_INFORMATION,
    *PTXFS_START_RM_INFORMATION;
typedef struct _TXFS_GET_METADATA_INFO_OUT
{

    struct
    {
        LONGLONG LowPart;
        LONGLONG HighPart;
    } TxfFileId;

    GUID LockingTransaction;

    DWORDLONG LastLsn;

    DWORD TransactionState;

} TXFS_GET_METADATA_INFO_OUT, *PTXFS_GET_METADATA_INFO_OUT;
typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
{

    DWORDLONG Offset;

    DWORD NameFlags;

    LONGLONG FileId;

    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;

    WCHAR FileName[1];
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;

typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES
{

    GUID KtmTransaction;

    DWORDLONG NumberOfFiles;

    DWORDLONG BufferSizeRequired;

    DWORDLONG Offset;
} TXFS_LIST_TRANSACTION_LOCKED_FILES, *PTXFS_LIST_TRANSACTION_LOCKED_FILES;

typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY
{

    GUID TransactionId;

    DWORD TransactionState;

    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;
} TXFS_LIST_TRANSACTIONS_ENTRY, *PTXFS_LIST_TRANSACTIONS_ENTRY;

typedef struct _TXFS_LIST_TRANSACTIONS
{

    DWORDLONG NumberOfTransactions;

    DWORDLONG BufferSizeRequired;
} TXFS_LIST_TRANSACTIONS, *PTXFS_LIST_TRANSACTIONS;

typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT
{
    union
    {

        DWORD BufferLength;

        BYTE Buffer[1];
    } u;
} TXFS_READ_BACKUP_INFORMATION_OUT, *PTXFS_READ_BACKUP_INFORMATION_OUT;

typedef struct _TXFS_WRITE_BACKUP_INFORMATION
{

    BYTE Buffer[1];
} TXFS_WRITE_BACKUP_INFORMATION, *PTXFS_WRITE_BACKUP_INFORMATION;

typedef struct _TXFS_GET_TRANSACTED_VERSION
{

    DWORD ThisBaseVersion;

    DWORD LatestVersion;

    WORD ThisMiniVersion;

    WORD FirstMiniVersion;

    WORD LatestMiniVersion;

} TXFS_GET_TRANSACTED_VERSION, *PTXFS_GET_TRANSACTED_VERSION;
typedef struct _TXFS_SAVEPOINT_INFORMATION
{

    HANDLE KtmTransaction;

    DWORD ActionCode;
    DWORD SavepointId;

} TXFS_SAVEPOINT_INFORMATION, *PTXFS_SAVEPOINT_INFORMATION;
typedef struct _TXFS_CREATE_MINIVERSION_INFO
{

    WORD StructureVersion;

    WORD StructureLength;

    DWORD BaseVersion;

    WORD MiniVersion;

} TXFS_CREATE_MINIVERSION_INFO, *PTXFS_CREATE_MINIVERSION_INFO;
typedef struct _TXFS_TRANSACTION_ACTIVE_INFO
{

    BOOLEAN TransactionsActiveAtSnapshot;

} TXFS_TRANSACTION_ACTIVE_INFO, *PTXFS_TRANSACTION_ACTIVE_INFO;
typedef enum _STORAGE_RESERVE_ID
{

    StorageReserveIdNone = 0,
    StorageReserveIdHard,
    StorageReserveIdSoft,
    StorageReserveIdUpdateScratch,

    StorageReserveIdMax

} STORAGE_RESERVE_ID,
    *PSTORAGE_RESERVE_ID;
typedef enum _REFS_SMR_VOLUME_GC_STATE
{

    SmrGcStateInactive = 0,
    SmrGcStatePaused = 1,
    SmrGcStateActive = 2,
    SmrGcStateActiveFullSpeed = 3,

} REFS_SMR_VOLUME_GC_STATE,
    *PREFS_SMR_VOLUME_GC_STATE;

typedef struct _REFS_SMR_VOLUME_INFO_OUTPUT
{

    DWORD Version;
    DWORD Flags;

    LARGE_INTEGER SizeOfRandomlyWritableTier;
    LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
    LARGE_INTEGER SizeofSMRTier;
    LARGE_INTEGER FreeSpaceInSMRTier;
    LARGE_INTEGER UsableFreeSpaceInSMRTier;

    REFS_SMR_VOLUME_GC_STATE VolumeGcState;
    DWORD VolumeGcLastStatus;

    DWORDLONG Unused[7];

} REFS_SMR_VOLUME_INFO_OUTPUT, *PREFS_SMR_VOLUME_INFO_OUTPUT;

typedef enum _REFS_SMR_VOLUME_GC_ACTION
{

    SmrGcActionStart = 1,
    SmrGcActionStartFullSpeed = 2,
    SmrGcActionPause = 3,
    SmrGcActionStop = 4,

} REFS_SMR_VOLUME_GC_ACTION,
    *PREFS_SMR_VOLUME_GC_ACTION;

typedef enum _REFS_SMR_VOLUME_GC_METHOD
{

    SmrGcMethodCompaction = 1,
    SmrGcMethodCompression = 2,
    SmrGcMethodRotation = 3,

} REFS_SMR_VOLUME_GC_METHOD,
    *PREFS_SMR_VOLUME_GC_METHOD;

typedef struct _REFS_SMR_VOLUME_GC_PARAMETERS
{

    DWORD Version;
    DWORD Flags;

    REFS_SMR_VOLUME_GC_ACTION Action;
    REFS_SMR_VOLUME_GC_METHOD Method;

    DWORD IoGranularity;
    DWORD CompressionFormat;

    DWORDLONG Unused[8];

} REFS_SMR_VOLUME_GC_PARAMETERS, *PREFS_SMR_VOLUME_GC_PARAMETERS;
typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
{

    DWORD OptimalWriteSize;
    DWORD StreamGranularitySize;
    DWORD StreamIdMin;
    DWORD StreamIdMax;

} STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER, *PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;

typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER
{

    DWORD Flags;
    DWORD StreamId;

} STREAMS_ASSOCIATE_ID_INPUT_BUFFER, *PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER;

typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER
{

    DWORD StreamId;

} STREAMS_QUERY_ID_OUTPUT_BUFFER, *PSTREAMS_QUERY_ID_OUTPUT_BUFFER;

typedef struct _QUERY_BAD_RANGES_INPUT_RANGE
{

    DWORDLONG StartOffset;

    DWORDLONG LengthInBytes;

} QUERY_BAD_RANGES_INPUT_RANGE, *PQUERY_BAD_RANGES_INPUT_RANGE;

typedef struct _QUERY_BAD_RANGES_INPUT
{

    DWORD Flags;

    DWORD NumRanges;

    QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];

} QUERY_BAD_RANGES_INPUT, *PQUERY_BAD_RANGES_INPUT;

typedef struct _QUERY_BAD_RANGES_OUTPUT_RANGE
{

    DWORD Flags;

    DWORD Reserved;

    DWORDLONG StartOffset;

    DWORDLONG LengthInBytes;

} QUERY_BAD_RANGES_OUTPUT_RANGE, *PQUERY_BAD_RANGES_OUTPUT_RANGE;

typedef struct _QUERY_BAD_RANGES_OUTPUT
{

    DWORD Flags;

    DWORD NumBadRanges;

    DWORDLONG NextOffsetToLookUp;

    QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];

} QUERY_BAD_RANGES_OUTPUT, *PQUERY_BAD_RANGES_OUTPUT;
typedef struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
{

    DWORD Flags;

    DWORD AlignmentShift;

    DWORDLONG FileOffsetToAlign;

    DWORD FallbackAlignmentShift;

} SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT, *PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
typedef enum _VIRTUAL_STORAGE_BEHAVIOR_CODE
{

    VirtualStorageBehaviorUndefined = 0,
    VirtualStorageBehaviorCacheWriteThrough = 1,
    VirtualStorageBehaviorCacheWriteBack = 2

} VIRTUAL_STORAGE_BEHAVIOR_CODE,
    *PVIRTUAL_STORAGE_BEHAVIOR_CODE;

typedef struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
{

    DWORD Size;
    VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;

} VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT, *PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;

typedef struct _ENCRYPTION_KEY_CTRL_INPUT
{

    DWORD HeaderSize;

    DWORD StructureSize;

    WORD KeyOffset;

    WORD KeySize;

    DWORD DplLock;

    DWORDLONG DplUserId;

    DWORDLONG DplCredentialId;

} ENCRYPTION_KEY_CTRL_INPUT, *PENCRYPTION_KEY_CTRL_INPUT;
typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT
{
    DWORD NumberOfWorkerThreads;
    DWORD Flags;
} VIRTUALIZATION_INSTANCE_INFO_INPUT, *PVIRTUALIZATION_INSTANCE_INFO_INPUT;

typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX
{
    WORD HeaderSize;
    DWORD Flags;
    DWORD NotificationInfoSize;
    WORD NotificationInfoOffset;
    WORD ProviderMajorVersion;
} VIRTUALIZATION_INSTANCE_INFO_INPUT_EX, *PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX;

typedef struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT
{
    GUID VirtualizationInstanceID;
} VIRTUALIZATION_INSTANCE_INFO_OUTPUT, *PVIRTUALIZATION_INSTANCE_INFO_OUTPUT;

typedef struct _GET_FILTER_FILE_IDENTIFIER_INPUT
{
    WORD AltitudeLength;
    WCHAR Altitude[1];
} GET_FILTER_FILE_IDENTIFIER_INPUT, *PGET_FILTER_FILE_IDENTIFIER_INPUT;

typedef struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT
{
    WORD FilterFileIdentifierLength;
    BYTE FilterFileIdentifier[1];
} GET_FILTER_FILE_IDENTIFIER_OUTPUT, *PGET_FILTER_FILE_IDENTIFIER_OUTPUT;
typedef struct _DISK_EXTENT
{

    DWORD DiskNumber;

    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER ExtentLength;

} DISK_EXTENT, *PDISK_EXTENT;

typedef struct _VOLUME_DISK_EXTENTS
{

    DWORD NumberOfDiskExtents;
    DISK_EXTENT Extents[1];

} VOLUME_DISK_EXTENTS, *PVOLUME_DISK_EXTENTS;
typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
{

    DWORDLONG GptAttributes;

} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
typedef DWORD ULONG;
typedef WORD UWORD;
typedef BYTE UCHAR;

typedef struct _SCARD_IO_REQUEST
{
    DWORD dwProtocol;
    DWORD cbPciLength;
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;

typedef struct _SCARD_T0_COMMAND
{
    BYTE
        bCla,
        bIns,
        bP1,
        bP2,
        bP3;
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND;

typedef struct _SCARD_T0_REQUEST
{
    SCARD_IO_REQUEST ioRequest;
    BYTE
        bSw1,
        bSw2;
#pragma warning(push)

    union
    {
        SCARD_T0_COMMAND CmdBytes;
        BYTE rgbHeader[5];
    } u;
#pragma warning(pop)
} SCARD_T0_REQUEST;

typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST, *LPSCARD_T0_REQUEST;

typedef struct _SCARD_T1_REQUEST
{
    SCARD_IO_REQUEST ioRequest;
} SCARD_T1_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST, *LPSCARD_T1_REQUEST;

typedef const BYTE *LPCBYTE;

typedef const void *LPCVOID;

typedef ULONG_PTR SCARDCONTEXT;
typedef SCARDCONTEXT *PSCARDCONTEXT, *LPSCARDCONTEXT;

typedef ULONG_PTR SCARDHANDLE;
typedef SCARDHANDLE *PSCARDHANDLE, *LPSCARDHANDLE;

typedef struct
{
    LPCSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA;
typedef struct
{
    LPCWSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW;

typedef SCARD_READERSTATEA SCARD_READERSTATE;
typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;

typedef struct _SCARD_ATRMASK
{
    DWORD cbAtr;
    BYTE rgbAtr[36];
    BYTE rgbMask[36];
} SCARD_ATRMASK, *PSCARD_ATRMASK, *LPSCARD_ATRMASK;

typedef SCARDHANDLE (*LPOCNCONNPROCA)(SCARDCONTEXT, LPSTR, LPSTR, PVOID);
typedef SCARDHANDLE (*LPOCNCONNPROCW)(SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);

typedef BOOL (*LPOCNCHKPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef void (*LPOCNDSCPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef struct
{
    DWORD dwStructSize;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;

    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct
{
    DWORD dwStructSize;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;

    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW;

typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;

typedef struct
{
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCSTR lpstrTitle;
    LPCSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
    LPOCNCONNPROCA lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;

    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA;
typedef struct
{
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
    LPOCNCONNPROCW lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;

    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW;

typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
typedef enum
{
    RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
    RSR_MATCH_TYPE_SERIAL_NUMBER,
    RSR_MATCH_TYPE_ALL_CARDS
} READER_SEL_REQUEST_MATCH_TYPE;

typedef struct
{
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    READER_SEL_REQUEST_MATCH_TYPE MatchType;

    union
    {
        struct
        {
            DWORD cbReaderNameOffset;
            DWORD cchReaderNameLength;
            DWORD cbContainerNameOffset;
            DWORD cchContainerNameLength;
            DWORD dwDesiredCardModuleVersion;
            DWORD dwCspFlags;
        } ReaderAndContainerParameter;
        struct
        {
            DWORD cbSerialNumberOffset;
            DWORD cbSerialNumberLength;
            DWORD dwDesiredCardModuleVersion;
        } SerialNumberParameter;
    } u;
} READER_SEL_REQUEST, *PREADER_SEL_REQUEST;
typedef struct
{
    DWORD cbReaderNameOffset;
    DWORD cchReaderNameLength;
    DWORD cbCardNameOffset;
    DWORD cchCardNameLength;
} READER_SEL_RESPONSE, *PREADER_SEL_RESPONSE;

typedef struct
{
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    LPCSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA;
typedef struct
{
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    LPCWSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW;

typedef OPENCARDNAMEA OPENCARDNAME;
typedef POPENCARDNAMEA POPENCARDNAME;
typedef LPOPENCARDNAMEA LPOPENCARDNAME;

struct _PSP;
typedef struct _PSP *HPROPSHEETPAGE;

struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;

typedef UINT (*LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (*LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
typedef struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    } u2;
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

typedef struct _PROPSHEETPAGEA_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    } u2;
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

typedef struct _PROPSHEETPAGEA_V3
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    } u2;
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;

typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    } u2;
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } u3;

} PROPSHEETPAGEA_V4, *LPPROPSHEETPAGEA_V4;
typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4;

typedef struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCWSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    } u2;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

typedef struct _PROPSHEETPAGEW_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCWSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    } u2;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

typedef struct _PROPSHEETPAGEW_V3
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCWSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    } u2;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;

typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union
    {
        LPCWSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    } u;
    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    } u2;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } u3;

} PROPSHEETPAGEW_V4, *LPPROPSHEETPAGEW_V4;
typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4;
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA_LATEST;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW_LATEST;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST;
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW;
typedef int (*PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
typedef struct _PROPSHEETHEADERA_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    } u;
    LPCSTR pszCaption;
    UINT nPages;
    union
    {
        UINT nStartPage;
        LPCSTR pStartPage;
    } u2;
    union
    {
        LPCPROPSHEETPAGEA ppsp;
        HPROPSHEETPAGE *phpage;
    } u3;
    PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERA_V1, *LPPROPSHEETHEADERA_V1;
typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;

typedef struct _PROPSHEETHEADERA_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    } u;
    LPCSTR pszCaption;
    UINT nPages;
    union
    {
        UINT nStartPage;
        LPCSTR pStartPage;
    } u2;
    union
    {
        LPCPROPSHEETPAGEA ppsp;
        HPROPSHEETPAGE *phpage;
    } u3;
    PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    } u4;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } u5;
} PROPSHEETHEADERA_V2, *LPPROPSHEETHEADERA_V2;
typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;
typedef struct _PROPSHEETHEADERW_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    } u;
    LPCWSTR pszCaption;
    UINT nPages;
    union
    {
        UINT nStartPage;
        LPCWSTR pStartPage;
    } u2;
    union
    {
        LPCPROPSHEETPAGEW ppsp;
        HPROPSHEETPAGE *phpage;
    } u3;
    PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERW_V1, *LPPROPSHEETHEADERW_V1;
typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;

typedef struct _PROPSHEETHEADERW_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    } u;
    LPCWSTR pszCaption;
    UINT nPages;
    union
    {
        UINT nStartPage;
        LPCWSTR pStartPage;
    } u2;
    union
    {
        LPCPROPSHEETPAGEW ppsp;
        HPROPSHEETPAGE *phpage;
    } u3;
    PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    } u4;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } u5;
} PROPSHEETHEADERW_V2, *LPPROPSHEETHEADERW_V2;
typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;

typedef PROPSHEETHEADERA_V2 PROPSHEETHEADERA;
typedef PROPSHEETHEADERW_V2 PROPSHEETHEADERW;
typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA;
typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW;
typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA;
typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW;

typedef BOOL (*LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (*LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);

typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;

typedef struct _PRINTER_INFO_1A
{
    DWORD Flags;
    LPSTR pDescription;
    LPSTR pName;
    LPSTR pComment;
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W
{
    DWORD Flags;
    LPWSTR pDescription;
    LPWSTR pName;
    LPWSTR pComment;
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;

typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;

typedef struct _PRINTER_INFO_2A
{
    LPSTR pServerName;
    LPSTR pPrinterName;
    LPSTR pShareName;
    LPSTR pPortName;
    LPSTR pDriverName;
    LPSTR pComment;
    LPSTR pLocation;
    LPDEVMODEA pDevMode;
    LPSTR pSepFile;
    LPSTR pPrintProcessor;
    LPSTR pDatatype;
    LPSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W
{
    LPWSTR pServerName;
    LPWSTR pPrinterName;
    LPWSTR pShareName;
    LPWSTR pPortName;
    LPWSTR pDriverName;
    LPWSTR pComment;
    LPWSTR pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR pSepFile;
    LPWSTR pPrintProcessor;
    LPWSTR pDatatype;
    LPWSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;

typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;

typedef struct _PRINTER_INFO_3
{
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;

typedef struct _PRINTER_INFO_4A
{
    LPSTR pPrinterName;
    LPSTR pServerName;
    DWORD Attributes;
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W
{
    LPWSTR pPrinterName;
    LPWSTR pServerName;
    DWORD Attributes;
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;

typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;

typedef struct _PRINTER_INFO_5A
{
    LPSTR pPrinterName;
    LPSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W
{
    LPWSTR pPrinterName;
    LPWSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;

typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;

typedef struct _PRINTER_INFO_6
{
    DWORD dwStatus;
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;

typedef struct _PRINTER_INFO_7A
{
    LPSTR pszObjectGUID;
    DWORD dwAction;
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W
{
    LPWSTR pszObjectGUID;
    DWORD dwAction;
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;

typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;

typedef struct _PRINTER_INFO_8A
{
    LPDEVMODEA pDevMode;
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W
{
    LPDEVMODEW pDevMode;
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;

typedef PRINTER_INFO_8A PRINTER_INFO_8;
typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;

typedef struct _PRINTER_INFO_9A
{
    LPDEVMODEA pDevMode;
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W
{
    LPDEVMODEW pDevMode;
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;

typedef PRINTER_INFO_9A PRINTER_INFO_9;
typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
typedef struct _JOB_INFO_1A
{
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pDatatype;
    LPSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W
{
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pDatatype;
    LPWSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;

typedef JOB_INFO_1A JOB_INFO_1;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef LPJOB_INFO_1A LPJOB_INFO_1;

typedef struct _JOB_INFO_2A
{
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pNotifyName;
    LPSTR pDatatype;
    LPSTR pPrintProcessor;
    LPSTR pParameters;
    LPSTR pDriverName;
    LPDEVMODEA pDevMode;
    LPSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W
{
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pNotifyName;
    LPWSTR pDatatype;
    LPWSTR pPrintProcessor;
    LPWSTR pParameters;
    LPWSTR pDriverName;
    LPDEVMODEW pDevMode;
    LPWSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;

typedef JOB_INFO_2A JOB_INFO_2;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef LPJOB_INFO_2A LPJOB_INFO_2;

typedef struct _JOB_INFO_3
{
    DWORD JobId;
    DWORD NextJobId;
    DWORD Reserved;
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;

typedef struct _JOB_INFO_4A
{
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pNotifyName;
    LPSTR pDatatype;
    LPSTR pPrintProcessor;
    LPSTR pParameters;
    LPSTR pDriverName;
    LPDEVMODEA pDevMode;
    LPSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
    LONG SizeHigh;
} JOB_INFO_4A, *PJOB_INFO_4A, *LPJOB_INFO_4A;
typedef struct _JOB_INFO_4W
{
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pNotifyName;
    LPWSTR pDatatype;
    LPWSTR pPrintProcessor;
    LPWSTR pParameters;
    LPWSTR pDriverName;
    LPDEVMODEW pDevMode;
    LPWSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
    LONG SizeHigh;
} JOB_INFO_4W, *PJOB_INFO_4W, *LPJOB_INFO_4W;

typedef JOB_INFO_4A JOB_INFO_4;
typedef PJOB_INFO_4A PJOB_INFO_4;
typedef LPJOB_INFO_4A LPJOB_INFO_4;
typedef struct _ADDJOB_INFO_1A
{
    LPSTR Path;
    DWORD JobId;
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W
{
    LPWSTR Path;
    DWORD JobId;
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;

typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;

typedef struct _DRIVER_INFO_1A
{
    LPSTR pName;
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W
{
    LPWSTR pName;
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;

typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;

typedef struct _DRIVER_INFO_2A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;

typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;

typedef struct _DRIVER_INFO_3A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;

typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;

typedef struct _DRIVER_INFO_4A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;

typedef DRIVER_INFO_4A DRIVER_INFO_4;
typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;

typedef struct _DRIVER_INFO_5A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;

typedef DRIVER_INFO_5A DRIVER_INFO_5;
typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;

typedef struct _DRIVER_INFO_6A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;

typedef DRIVER_INFO_6A DRIVER_INFO_6;
typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
typedef struct _DRIVER_INFO_8A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
    LPSTR pszPrintProcessor;
    LPSTR pszVendorSetup;
    LPSTR pszzColorProfiles;
    LPSTR pszInfPath;
    DWORD dwPrinterDriverAttributes;
    LPSTR pszzCoreDriverDependencies;
    FILETIME ftMinInboxDriverVerDate;
    DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8A, *PDRIVER_INFO_8A, *LPDRIVER_INFO_8A;
typedef struct _DRIVER_INFO_8W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
    LPWSTR pszPrintProcessor;
    LPWSTR pszVendorSetup;
    LPWSTR pszzColorProfiles;
    LPWSTR pszInfPath;
    DWORD dwPrinterDriverAttributes;
    LPWSTR pszzCoreDriverDependencies;
    FILETIME ftMinInboxDriverVerDate;
    DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8W, *PDRIVER_INFO_8W, *LPDRIVER_INFO_8W;

typedef DRIVER_INFO_8A DRIVER_INFO_8;
typedef PDRIVER_INFO_8A PDRIVER_INFO_8;
typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8;
typedef struct _DOC_INFO_1A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;

typedef DOC_INFO_1A DOC_INFO_1;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef LPDOC_INFO_1A LPDOC_INFO_1;

typedef struct _FORM_INFO_1A
{
    DWORD Flags;
    LPSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W
{
    DWORD Flags;
    LPWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;

typedef FORM_INFO_1A FORM_INFO_1;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef LPFORM_INFO_1A LPFORM_INFO_1;

typedef struct _FORM_INFO_2A
{
    DWORD Flags;
    LPCSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
    LPCSTR pKeyword;
    DWORD StringType;
    LPCSTR pMuiDll;
    DWORD dwResourceId;
    LPCSTR pDisplayName;
    LANGID wLangId;
} FORM_INFO_2A, *PFORM_INFO_2A, *LPFORM_INFO_2A;
typedef struct _FORM_INFO_2W
{
    DWORD Flags;
    LPCWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
    LPCSTR pKeyword;
    DWORD StringType;
    LPCWSTR pMuiDll;
    DWORD dwResourceId;
    LPCWSTR pDisplayName;
    LANGID wLangId;
} FORM_INFO_2W, *PFORM_INFO_2W, *LPFORM_INFO_2W;

typedef FORM_INFO_2A FORM_INFO_2;
typedef PFORM_INFO_2A PFORM_INFO_2;
typedef LPFORM_INFO_2A LPFORM_INFO_2;

typedef struct _DOC_INFO_2A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;

typedef DOC_INFO_2A DOC_INFO_2;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef LPDOC_INFO_2A LPDOC_INFO_2;

typedef struct _DOC_INFO_3A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwFlags;
} DOC_INFO_3A, *PDOC_INFO_3A, *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwFlags;
} DOC_INFO_3W, *PDOC_INFO_3W, *LPDOC_INFO_3W;

typedef DOC_INFO_3A DOC_INFO_3;
typedef PDOC_INFO_3A PDOC_INFO_3;
typedef LPDOC_INFO_3A LPDOC_INFO_3;

typedef struct _PRINTPROCESSOR_INFO_1A
{
    LPSTR pName;
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W
{
    LPWSTR pName;
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;

typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;

typedef struct _PRINTPROCESSOR_CAPS_1
{
    DWORD dwLevel;
    DWORD dwNupOptions;
    DWORD dwPageOrderFlags;
    DWORD dwNumberOfCopies;
} PRINTPROCESSOR_CAPS_1, *PPRINTPROCESSOR_CAPS_1;

typedef struct _PRINTPROCESSOR_CAPS_2
{
    DWORD dwLevel;
    DWORD dwNupOptions;
    DWORD dwPageOrderFlags;
    DWORD dwNumberOfCopies;

    DWORD dwDuplexHandlingCaps;
    DWORD dwNupDirectionCaps;
    DWORD dwNupBorderCaps;
    DWORD dwBookletHandlingCaps;
    DWORD dwScalingCaps;

} PRINTPROCESSOR_CAPS_2, *PPRINTPROCESSOR_CAPS_2;
typedef struct _PORT_INFO_1A
{
    LPSTR pName;
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W
{
    LPWSTR pName;
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;

typedef PORT_INFO_1A PORT_INFO_1;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef LPPORT_INFO_1A LPPORT_INFO_1;

typedef struct _PORT_INFO_2A
{
    LPSTR pPortName;
    LPSTR pMonitorName;
    LPSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W
{
    LPWSTR pPortName;
    LPWSTR pMonitorName;
    LPWSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;

typedef PORT_INFO_2A PORT_INFO_2;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef LPPORT_INFO_2A LPPORT_INFO_2;

typedef struct _PORT_INFO_3A
{
    DWORD dwStatus;
    LPSTR pszStatus;
    DWORD dwSeverity;
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W
{
    DWORD dwStatus;
    LPWSTR pszStatus;
    DWORD dwSeverity;
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;

typedef PORT_INFO_3A PORT_INFO_3;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
typedef struct _MONITOR_INFO_1A
{
    LPSTR pName;
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W
{
    LPWSTR pName;
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;

typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;

typedef struct _MONITOR_INFO_2A
{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W
{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;

typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;

typedef struct _DATATYPES_INFO_1A
{
    LPSTR pName;
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W
{
    LPWSTR pName;
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;

typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;

typedef struct _PRINTER_DEFAULTSA
{
    LPSTR pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW
{
    LPWSTR pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;

typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;

typedef struct _PRINTER_ENUM_VALUESA
{
    LPSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW
{
    LPWSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;

typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;

typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE
{
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;

typedef struct _PRINTER_NOTIFY_OPTIONS
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;

typedef struct _PRINTER_NOTIFY_INFO_DATA
{
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union
    {
        DWORD adwData[2];
        struct
        {
            DWORD cbBuf;
            LPVOID pBuf;
        } Data;
    } NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;

typedef struct _PRINTER_NOTIFY_INFO
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;

typedef struct _BINARY_CONTAINER
{
    DWORD cbBuf;
    LPBYTE pData;
} BINARY_CONTAINER, *PBINARY_CONTAINER;

typedef struct _BIDI_DATA
{
    DWORD dwBidiType;
    union
    {
        BOOL bData;
        LONG iData;
        LPWSTR sData;
        FLOAT fData;
        BINARY_CONTAINER biData;
    } u;
} BIDI_DATA, *PBIDI_DATA, *LPBIDI_DATA;

typedef struct _BIDI_REQUEST_DATA
{
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
} BIDI_REQUEST_DATA, *PBIDI_REQUEST_DATA, *LPBIDI_REQUEST_DATA;

typedef struct _BIDI_REQUEST_CONTAINER
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_REQUEST_DATA aData[1];
} BIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER;

typedef struct _BIDI_RESPONSE_DATA
{
    DWORD dwResult;
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
} BIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA;

typedef struct _BIDI_RESPONSE_CONTAINER
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_RESPONSE_DATA aData[1];
} BIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER;

typedef enum
{
    BIDI_NULL = 0,
    BIDI_INT = 1,
    BIDI_FLOAT = 2,
    BIDI_BOOL = 3,
    BIDI_STRING = 4,
    BIDI_TEXT = 5,
    BIDI_ENUM = 6,
    BIDI_BLOB = 7
} BIDI_TYPE;

typedef struct _PROVIDOR_INFO_1A
{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W
{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;

typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;

typedef struct _PROVIDOR_INFO_2A
{
    LPSTR pOrder;
} PROVIDOR_INFO_2A, *PPROVIDOR_INFO_2A, *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W
{
    LPWSTR pOrder;
} PROVIDOR_INFO_2W, *PPROVIDOR_INFO_2W, *LPPROVIDOR_INFO_2W;

typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;

typedef enum _PRINTER_OPTION_FLAGS
{
    PRINTER_OPTION_NO_CACHE = 1 << 0,
    PRINTER_OPTION_CACHE = 1 << 1,
    PRINTER_OPTION_CLIENT_CHANGE = 1 << 2,
    PRINTER_OPTION_NO_CLIENT_DATA = 1 << 3,
} PRINTER_OPTION_FLAGS;

typedef struct _PRINTER_OPTIONSA
{
    UINT cbSize;
    DWORD dwFlags;
} PRINTER_OPTIONSA, *PPRINTER_OPTIONSA, *LPPRINTER_OPTIONSA;
typedef struct _PRINTER_OPTIONSW
{
    UINT cbSize;
    DWORD dwFlags;
} PRINTER_OPTIONSW, *PPRINTER_OPTIONSW, *LPPRINTER_OPTIONSW;

typedef PRINTER_OPTIONSA PRINTER_OPTIONS;
typedef PPRINTER_OPTIONSA PPRINTER_OPTIONS;
typedef LPPRINTER_OPTIONSA LPPRINTER_OPTIONS;

typedef struct _PRINTER_CONNECTION_INFO_1A
{
    DWORD dwFlags;
    LPSTR pszDriverName;
} PRINTER_CONNECTION_INFO_1A, *PPRINTER_CONNECTION_INFO_1A;
typedef struct _PRINTER_CONNECTION_INFO_1W
{
    DWORD dwFlags;
    LPWSTR pszDriverName;
} PRINTER_CONNECTION_INFO_1W, *PPRINTER_CONNECTION_INFO_1W;

typedef PRINTER_CONNECTION_INFO_1A PRINTER_CONNECTION_INFO_1;
typedef PPRINTER_CONNECTION_INFO_1A PPRINTER_CONNECTION_INFO_1;

typedef struct _CORE_PRINTER_DRIVERA
{
    GUID CoreDriverGUID;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    CHAR szPackageID[260];
} CORE_PRINTER_DRIVERA, *PCORE_PRINTER_DRIVERA;
typedef struct _CORE_PRINTER_DRIVERW
{
    GUID CoreDriverGUID;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    WCHAR szPackageID[260];
} CORE_PRINTER_DRIVERW, *PCORE_PRINTER_DRIVERW;

typedef CORE_PRINTER_DRIVERA CORE_PRINTER_DRIVER;
typedef PCORE_PRINTER_DRIVERA PCORE_PRINTER_DRIVER;

typedef enum
{
    kPropertyTypeString = 1,
    kPropertyTypeInt32,
    kPropertyTypeInt64,
    kPropertyTypeByte,
    kPropertyTypeTime,
    kPropertyTypeDevMode,
    kPropertyTypeSD,
    kPropertyTypeNotificationReply,
    kPropertyTypeNotificationOptions,
    kPropertyTypeBuffer

} EPrintPropertyType;

typedef enum
{
    kAddingDocumentSequence = 0,
    kDocumentSequenceAdded = 1,
    kAddingFixedDocument = 2,
    kFixedDocumentAdded = 3,
    kAddingFixedPage = 4,
    kFixedPageAdded = 5,
    kResourceAdded = 6,
    kFontAdded = 7,
    kImageAdded = 8,
    kXpsDocumentCommitted = 9

} EPrintXPSJobProgress;

typedef enum
{
    kJobProduction = 1,
    kJobConsumption

} EPrintXPSJobOperation;

typedef struct
{
    EPrintPropertyType ePropertyType;
    union
    {
        BYTE propertyByte;
        PWSTR propertyString;
        LONG propertyInt32;
        LONGLONG propertyInt64;
        struct
        {
            DWORD cbBuf;
            LPVOID pBuf;
        } propertyBlob;
    } value;

} PrintPropertyValue;

typedef struct
{
    WCHAR *propertyName;
    PrintPropertyValue propertyValue;

} PrintNamedProperty;

typedef struct
{
    ULONG numberOfProperties;
    PrintNamedProperty *propertiesCollection;

} PrintPropertiesCollection;

typedef struct
{
    unsigned char ld[10];
} _LDOUBLE;
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;

typedef struct
{
    long double x;
} _LONGDOUBLE;

typedef struct
{
    unsigned char ld12[12];
} _LDBL12;

typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,

    REGCLS_MULTI_SEPARATE = 2,

    REGCLS_SUSPENDED = 4,

    REGCLS_SURROGATE = 8,
} REGCLS;

typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;

typedef enum tagCOINITBASE
{

    COINITBASE_MULTITHREADED = 0x0,

} COINITBASE;
typedef struct IUnknown IUnknown;

typedef struct AsyncIUnknown AsyncIUnknown;

typedef struct IClassFactory IClassFactory;

typedef IUnknown *LPUNKNOWN;
typedef struct IUnknownVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IUnknown *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IUnknown *This);

    ULONG(__stdcall *Release)
    (
        IUnknown *This);

} IUnknownVtbl;

struct IUnknown
{
    struct IUnknownVtbl *lpVtbl;
};

typedef struct AsyncIUnknownVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        AsyncIUnknown *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        AsyncIUnknown *This);

    ULONG(__stdcall *Release)
    (
        AsyncIUnknown *This);

    HRESULT(__stdcall *Begin_QueryInterface)
    (
        AsyncIUnknown *This,
        const IID *const riid);

    HRESULT(__stdcall *Finish_QueryInterface)
    (
        AsyncIUnknown *This,

        void **ppvObject);

    HRESULT(__stdcall *Begin_AddRef)
    (
        AsyncIUnknown *This);

    ULONG(__stdcall *Finish_AddRef)
    (
        AsyncIUnknown *This);

    HRESULT(__stdcall *Begin_Release)
    (
        AsyncIUnknown *This);

    ULONG(__stdcall *Finish_Release)
    (
        AsyncIUnknown *This);

} AsyncIUnknownVtbl;

struct AsyncIUnknown
{
    struct AsyncIUnknownVtbl *lpVtbl;
};

typedef IClassFactory *LPCLASSFACTORY;
typedef struct IClassFactoryVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IClassFactory *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IClassFactory *This);

    ULONG(__stdcall *Release)
    (
        IClassFactory *This);

    HRESULT(__stdcall *CreateInstance)
    (
        IClassFactory *This,

        IUnknown *pUnkOuter,

        const IID *const riid,

        void **ppvObject);

    HRESULT(__stdcall *LockServer)
    (
        IClassFactory *This,
        BOOL fLock);

} IClassFactoryVtbl;

struct IClassFactory
{
    struct IClassFactoryVtbl *lpVtbl;
};

typedef struct IMarshal IMarshal;

typedef struct INoMarshal INoMarshal;

typedef struct IAgileObject IAgileObject;

typedef struct IActivationFilter IActivationFilter;

typedef struct IMarshal2 IMarshal2;

typedef struct IMalloc IMalloc;

typedef struct IStdMarshalInfo IStdMarshalInfo;

typedef struct IExternalConnection IExternalConnection;

typedef struct IMultiQI IMultiQI;

typedef struct AsyncIMultiQI AsyncIMultiQI;

typedef struct IInternalUnknown IInternalUnknown;

typedef struct IEnumUnknown IEnumUnknown;

typedef struct IEnumString IEnumString;

typedef struct ISequentialStream ISequentialStream;

typedef struct IStream IStream;

typedef struct IRpcChannelBuffer IRpcChannelBuffer;

typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;

typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;

typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;

typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;

typedef struct IRpcProxyBuffer IRpcProxyBuffer;

typedef struct IRpcStubBuffer IRpcStubBuffer;

typedef struct IPSFactoryBuffer IPSFactoryBuffer;

typedef struct IChannelHook IChannelHook;

typedef struct IClientSecurity IClientSecurity;

typedef struct IServerSecurity IServerSecurity;

typedef struct IRpcOptions IRpcOptions;

typedef struct IGlobalOptions IGlobalOptions;

typedef struct ISurrogate ISurrogate;

typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;

typedef struct ISynchronize ISynchronize;

typedef struct ISynchronizeHandle ISynchronizeHandle;

typedef struct ISynchronizeEvent ISynchronizeEvent;

typedef struct ISynchronizeContainer ISynchronizeContainer;

typedef struct ISynchronizeMutex ISynchronizeMutex;

typedef struct ICancelMethodCalls ICancelMethodCalls;

typedef struct IAsyncManager IAsyncManager;

typedef struct ICallFactory ICallFactory;

typedef struct IRpcHelper IRpcHelper;

typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;

typedef struct IWaitMultiple IWaitMultiple;

typedef struct IAddrTrackingControl IAddrTrackingControl;

typedef struct IAddrExclusionControl IAddrExclusionControl;

typedef struct IPipeByte IPipeByte;

typedef struct AsyncIPipeByte AsyncIPipeByte;

typedef struct IPipeLong IPipeLong;

typedef struct AsyncIPipeLong AsyncIPipeLong;

typedef struct IPipeDouble IPipeDouble;

typedef struct AsyncIPipeDouble AsyncIPipeDouble;

typedef struct IEnumContextProps IEnumContextProps;

typedef struct IContext IContext;

typedef struct IObjContext IObjContext;

typedef struct IComThreadingInfo IComThreadingInfo;

typedef struct IProcessInitControl IProcessInitControl;

typedef struct IFastRundown IFastRundown;

typedef struct IMarshalingStream IMarshalingStream;

typedef struct IAgileReference IAgileReference;

typedef struct _COSERVERINFO
{
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
} COSERVERINFO;

typedef IMarshal *LPMARSHAL;
typedef struct IMarshalVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMarshal *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMarshal *This);

    ULONG(__stdcall *Release)
    (
        IMarshal *This);

    HRESULT(__stdcall *GetUnmarshalClass)
    (
        IMarshal *This,

        const IID *const riid,

        void *pv,

        DWORD dwDestContext,

        void *pvDestContext,

        DWORD mshlflags,

        CLSID *pCid);

    HRESULT(__stdcall *GetMarshalSizeMax)
    (
        IMarshal *This,

        const IID *const riid,

        void *pv,

        DWORD dwDestContext,

        void *pvDestContext,

        DWORD mshlflags,

        DWORD *pSize);

    HRESULT(__stdcall *MarshalInterface)
    (
        IMarshal *This,

        IStream *pStm,

        const IID *const riid,

        void *pv,

        DWORD dwDestContext,

        void *pvDestContext,

        DWORD mshlflags);

    HRESULT(__stdcall *UnmarshalInterface)
    (
        IMarshal *This,

        IStream *pStm,

        const IID *const riid,

        void **ppv);

    HRESULT(__stdcall *ReleaseMarshalData)
    (
        IMarshal *This,

        IStream *pStm);

    HRESULT(__stdcall *DisconnectObject)
    (
        IMarshal *This,

        DWORD dwReserved);

} IMarshalVtbl;

struct IMarshal
{
    struct IMarshalVtbl *lpVtbl;
};

typedef struct INoMarshalVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        INoMarshal *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        INoMarshal *This);

    ULONG(__stdcall *Release)
    (
        INoMarshal *This);

} INoMarshalVtbl;

struct INoMarshal
{
    struct INoMarshalVtbl *lpVtbl;
};
typedef struct IAgileObjectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAgileObject *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAgileObject *This);

    ULONG(__stdcall *Release)
    (
        IAgileObject *This);

} IAgileObjectVtbl;

struct IAgileObject
{
    struct IAgileObjectVtbl *lpVtbl;
};

typedef enum tagACTIVATIONTYPE
{
    ACTIVATIONTYPE_UNCATEGORIZED = 0,
    ACTIVATIONTYPE_FROM_MONIKER = 0x1,
    ACTIVATIONTYPE_FROM_DATA = 0x2,
    ACTIVATIONTYPE_FROM_STORAGE = 0x4,
    ACTIVATIONTYPE_FROM_STREAM = 0x8,
    ACTIVATIONTYPE_FROM_FILE = 0x10
} ACTIVATIONTYPE;

typedef struct IActivationFilterVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IActivationFilter *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IActivationFilter *This);

    ULONG(__stdcall *Release)
    (
        IActivationFilter *This);

    HRESULT(__stdcall *HandleActivation)
    (
        IActivationFilter *This,
        DWORD dwActivationType,
        const IID *const rclsid,
        CLSID *pReplacementClsId);

} IActivationFilterVtbl;

struct IActivationFilter
{
    struct IActivationFilterVtbl *lpVtbl;
};
typedef IMarshal2 *LPMARSHAL2;
typedef struct IMarshal2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMarshal2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMarshal2 *This);

    ULONG(__stdcall *Release)
    (
        IMarshal2 *This);

    HRESULT(__stdcall *GetUnmarshalClass)
    (
        IMarshal2 *This,

        const IID *const riid,

        void *pv,

        DWORD dwDestContext,

        void *pvDestContext,

        DWORD mshlflags,

        CLSID *pCid);

    HRESULT(__stdcall *GetMarshalSizeMax)
    (
        IMarshal2 *This,

        const IID *const riid,

        void *pv,

        DWORD dwDestContext,

        void *pvDestContext,

        DWORD mshlflags,

        DWORD *pSize);

    HRESULT(__stdcall *MarshalInterface)
    (
        IMarshal2 *This,

        IStream *pStm,

        const IID *const riid,

        void *pv,

        DWORD dwDestContext,

        void *pvDestContext,

        DWORD mshlflags);

    HRESULT(__stdcall *UnmarshalInterface)
    (
        IMarshal2 *This,

        IStream *pStm,

        const IID *const riid,

        void **ppv);

    HRESULT(__stdcall *ReleaseMarshalData)
    (
        IMarshal2 *This,

        IStream *pStm);

    HRESULT(__stdcall *DisconnectObject)
    (
        IMarshal2 *This,

        DWORD dwReserved);

} IMarshal2Vtbl;

struct IMarshal2
{
    struct IMarshal2Vtbl *lpVtbl;
};
typedef IMalloc *LPMALLOC;

typedef struct IMallocVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMalloc *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMalloc *This);

    ULONG(__stdcall *Release)
    (
        IMalloc *This);

    void *(__stdcall *Alloc)(
        IMalloc *This,

        SIZE_T cb);

    void *(__stdcall *Realloc)(
        IMalloc *This,

        void *pv,

        SIZE_T cb);

    void(__stdcall *Free)(
        IMalloc *This,

        void *pv);

    SIZE_T(__stdcall *GetSize)
    (
        IMalloc *This,

        void *pv);

    int(__stdcall *DidAlloc)(
        IMalloc *This,

        void *pv);

    void(__stdcall *HeapMinimize)(
        IMalloc *This);

} IMallocVtbl;

struct IMalloc
{
    struct IMallocVtbl *lpVtbl;
};
typedef IStdMarshalInfo *LPSTDMARSHALINFO;

typedef struct IStdMarshalInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IStdMarshalInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IStdMarshalInfo *This);

    ULONG(__stdcall *Release)
    (
        IStdMarshalInfo *This);

    HRESULT(__stdcall *GetClassForHandler)
    (
        IStdMarshalInfo *This,

        DWORD dwDestContext,

        void *pvDestContext,

        CLSID *pClsid);

} IStdMarshalInfoVtbl;

struct IStdMarshalInfo
{
    struct IStdMarshalInfoVtbl *lpVtbl;
};
typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef enum tagEXTCONN
{
    EXTCONN_STRONG = 0x1,
    EXTCONN_WEAK = 0x2,
    EXTCONN_CALLABLE = 0x4
} EXTCONN;

typedef struct IExternalConnectionVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IExternalConnection *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IExternalConnection *This);

    ULONG(__stdcall *Release)
    (
        IExternalConnection *This);

    DWORD(__stdcall *AddConnection)
    (
        IExternalConnection *This,

        DWORD extconn,

        DWORD reserved);

    DWORD(__stdcall *ReleaseConnection)
    (
        IExternalConnection *This,

        DWORD extconn,

        DWORD reserved,

        BOOL fLastReleaseCloses);

} IExternalConnectionVtbl;

struct IExternalConnection
{
    struct IExternalConnectionVtbl *lpVtbl;
};
typedef IMultiQI *LPMULTIQI;

typedef struct tagMULTI_QI
{
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
} MULTI_QI;

typedef struct IMultiQIVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMultiQI *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMultiQI *This);

    ULONG(__stdcall *Release)
    (
        IMultiQI *This);

    HRESULT(__stdcall *QueryMultipleInterfaces)
    (
        IMultiQI *This,

        ULONG cMQIs,

        MULTI_QI *pMQIs);

} IMultiQIVtbl;

struct IMultiQI
{
    struct IMultiQIVtbl *lpVtbl;
};
typedef struct AsyncIMultiQIVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        AsyncIMultiQI *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        AsyncIMultiQI *This);

    ULONG(__stdcall *Release)
    (
        AsyncIMultiQI *This);

    HRESULT(__stdcall *Begin_QueryMultipleInterfaces)
    (
        AsyncIMultiQI *This,

        ULONG cMQIs,

        MULTI_QI *pMQIs);

    HRESULT(__stdcall *Finish_QueryMultipleInterfaces)
    (
        AsyncIMultiQI *This,

        MULTI_QI *pMQIs);

} AsyncIMultiQIVtbl;

struct AsyncIMultiQI
{
    struct AsyncIMultiQIVtbl *lpVtbl;
};

typedef struct IInternalUnknownVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternalUnknown *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternalUnknown *This);

    ULONG(__stdcall *Release)
    (
        IInternalUnknown *This);

    HRESULT(__stdcall *QueryInternalInterface)
    (
        IInternalUnknown *This,

        const IID *const riid,

        void **ppv);

} IInternalUnknownVtbl;

struct IInternalUnknown
{
    struct IInternalUnknownVtbl *lpVtbl;
};

typedef IEnumUnknown *LPENUMUNKNOWN;
typedef struct IEnumUnknownVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumUnknown *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumUnknown *This);

    ULONG(__stdcall *Release)
    (
        IEnumUnknown *This);

    HRESULT(__stdcall *Next)
    (
        IEnumUnknown *This,

        ULONG celt,

        IUnknown **rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumUnknown *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumUnknown *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumUnknown *This,
        IEnumUnknown **ppenum);

} IEnumUnknownVtbl;

struct IEnumUnknown
{
    struct IEnumUnknownVtbl *lpVtbl;
};
typedef IEnumString *LPENUMSTRING;

typedef struct IEnumStringVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumString *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumString *This);

    ULONG(__stdcall *Release)
    (
        IEnumString *This);

    HRESULT(__stdcall *Next)
    (
        IEnumString *This,
        ULONG celt,

        LPOLESTR *rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumString *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumString *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumString *This,
        IEnumString **ppenum);

} IEnumStringVtbl;

struct IEnumString
{
    struct IEnumStringVtbl *lpVtbl;
};

typedef struct ISequentialStreamVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISequentialStream *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISequentialStream *This);

    ULONG(__stdcall *Release)
    (
        ISequentialStream *This);

    HRESULT(__stdcall *Read)
    (
        ISequentialStream *This,

        void *pv,

        ULONG cb,

        ULONG *pcbRead);

    HRESULT(__stdcall *Write)
    (
        ISequentialStream *This,

        const void *pv,

        ULONG cb,

        ULONG *pcbWritten);

} ISequentialStreamVtbl;

struct ISequentialStream
{
    struct ISequentialStreamVtbl *lpVtbl;
};

typedef IStream *LPSTREAM;

typedef struct tagSTATSTG
{
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
} STATSTG;

typedef enum tagSTGTY
{
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4
} STGTY;

typedef enum tagSTREAM_SEEK
{
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
} STREAM_SEEK;

typedef enum tagLOCKTYPE
{
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4
} LOCKTYPE;

typedef struct IStreamVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IStream *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IStream *This);

    ULONG(__stdcall *Release)
    (
        IStream *This);

    HRESULT(__stdcall *Read)
    (
        IStream *This,

        void *pv,

        ULONG cb,

        ULONG *pcbRead);

    HRESULT(__stdcall *Write)
    (
        IStream *This,

        const void *pv,

        ULONG cb,

        ULONG *pcbWritten);

    HRESULT(__stdcall *Seek)
    (
        IStream *This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,

        ULARGE_INTEGER *plibNewPosition);

    HRESULT(__stdcall *SetSize)
    (
        IStream *This,
        ULARGE_INTEGER libNewSize);

    HRESULT(__stdcall *CopyTo)
    (
        IStream *This,

        IStream *pstm,
        ULARGE_INTEGER cb,

        ULARGE_INTEGER *pcbRead,

        ULARGE_INTEGER *pcbWritten);

    HRESULT(__stdcall *Commit)
    (
        IStream *This,
        DWORD grfCommitFlags);

    HRESULT(__stdcall *Revert)
    (
        IStream *This);

    HRESULT(__stdcall *LockRegion)
    (
        IStream *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT(__stdcall *UnlockRegion)
    (
        IStream *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT(__stdcall *Stat)
    (
        IStream *This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

    HRESULT(__stdcall *Clone)
    (
        IStream *This,
        IStream **ppstm);

} IStreamVtbl;

struct IStream
{
    struct IStreamVtbl *lpVtbl;
};
typedef ULONG RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
{
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[5];
    ULONG rpcFlags;
} RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
typedef struct IRpcChannelBufferVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcChannelBuffer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcChannelBuffer *This);

    ULONG(__stdcall *Release)
    (
        IRpcChannelBuffer *This);

    HRESULT(__stdcall *GetBuffer)
    (
        IRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMessage,

        const IID *const riid);

    HRESULT(__stdcall *SendReceive)
    (
        IRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMessage,

        ULONG *pStatus);

    HRESULT(__stdcall *FreeBuffer)
    (
        IRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMessage);

    HRESULT(__stdcall *GetDestCtx)
    (
        IRpcChannelBuffer *This,

        DWORD *pdwDestContext,

        void **ppvDestContext);

    HRESULT(__stdcall *IsConnected)
    (
        IRpcChannelBuffer *This);

} IRpcChannelBufferVtbl;

struct IRpcChannelBuffer
{
    struct IRpcChannelBufferVtbl *lpVtbl;
};

typedef struct IRpcChannelBuffer2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcChannelBuffer2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcChannelBuffer2 *This);

    ULONG(__stdcall *Release)
    (
        IRpcChannelBuffer2 *This);

    HRESULT(__stdcall *GetBuffer)
    (
        IRpcChannelBuffer2 *This,

        RPCOLEMESSAGE *pMessage,

        const IID *const riid);

    HRESULT(__stdcall *SendReceive)
    (
        IRpcChannelBuffer2 *This,

        RPCOLEMESSAGE *pMessage,

        ULONG *pStatus);

    HRESULT(__stdcall *FreeBuffer)
    (
        IRpcChannelBuffer2 *This,

        RPCOLEMESSAGE *pMessage);

    HRESULT(__stdcall *GetDestCtx)
    (
        IRpcChannelBuffer2 *This,

        DWORD *pdwDestContext,

        void **ppvDestContext);

    HRESULT(__stdcall *IsConnected)
    (
        IRpcChannelBuffer2 *This);

    HRESULT(__stdcall *GetProtocolVersion)
    (
        IRpcChannelBuffer2 *This,

        DWORD *pdwVersion);

} IRpcChannelBuffer2Vtbl;

struct IRpcChannelBuffer2
{
    struct IRpcChannelBuffer2Vtbl *lpVtbl;
};

typedef struct IAsyncRpcChannelBufferVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAsyncRpcChannelBuffer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAsyncRpcChannelBuffer *This);

    ULONG(__stdcall *Release)
    (
        IAsyncRpcChannelBuffer *This);

    HRESULT(__stdcall *GetBuffer)
    (
        IAsyncRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMessage,

        const IID *const riid);

    HRESULT(__stdcall *SendReceive)
    (
        IAsyncRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMessage,

        ULONG *pStatus);

    HRESULT(__stdcall *FreeBuffer)
    (
        IAsyncRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMessage);

    HRESULT(__stdcall *GetDestCtx)
    (
        IAsyncRpcChannelBuffer *This,

        DWORD *pdwDestContext,

        void **ppvDestContext);

    HRESULT(__stdcall *IsConnected)
    (
        IAsyncRpcChannelBuffer *This);

    HRESULT(__stdcall *GetProtocolVersion)
    (
        IAsyncRpcChannelBuffer *This,

        DWORD *pdwVersion);

    HRESULT(__stdcall *Send)
    (
        IAsyncRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMsg,

        ISynchronize *pSync,

        ULONG *pulStatus);

    HRESULT(__stdcall *Receive)
    (
        IAsyncRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMsg,

        ULONG *pulStatus);

    HRESULT(__stdcall *GetDestCtxEx)
    (
        IAsyncRpcChannelBuffer *This,

        RPCOLEMESSAGE *pMsg,

        DWORD *pdwDestContext,

        void **ppvDestContext);

} IAsyncRpcChannelBufferVtbl;

struct IAsyncRpcChannelBuffer
{
    struct IAsyncRpcChannelBufferVtbl *lpVtbl;
};
typedef struct IRpcChannelBuffer3Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcChannelBuffer3 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcChannelBuffer3 *This);

    ULONG(__stdcall *Release)
    (
        IRpcChannelBuffer3 *This);

    HRESULT(__stdcall *GetBuffer)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMessage,

        const IID *const riid);

    HRESULT(__stdcall *SendReceive)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMessage,

        ULONG *pStatus);

    HRESULT(__stdcall *FreeBuffer)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMessage);

    HRESULT(__stdcall *GetDestCtx)
    (
        IRpcChannelBuffer3 *This,

        DWORD *pdwDestContext,

        void **ppvDestContext);

    HRESULT(__stdcall *IsConnected)
    (
        IRpcChannelBuffer3 *This);

    HRESULT(__stdcall *GetProtocolVersion)
    (
        IRpcChannelBuffer3 *This,

        DWORD *pdwVersion);

    HRESULT(__stdcall *Send)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMsg,

        ULONG *pulStatus);

    HRESULT(__stdcall *Receive)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMsg,

        ULONG ulSize,

        ULONG *pulStatus);

    HRESULT(__stdcall *Cancel)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMsg);

    HRESULT(__stdcall *GetCallContext)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMsg,

        const IID *const riid,

        void **pInterface);

    HRESULT(__stdcall *GetDestCtxEx)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMsg,

        DWORD *pdwDestContext,

        void **ppvDestContext);

    HRESULT(__stdcall *GetState)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMsg,

        DWORD *pState);

    HRESULT(__stdcall *RegisterAsync)
    (
        IRpcChannelBuffer3 *This,

        RPCOLEMESSAGE *pMsg,

        IAsyncManager *pAsyncMgr);

} IRpcChannelBuffer3Vtbl;

struct IRpcChannelBuffer3
{
    struct IRpcChannelBuffer3Vtbl *lpVtbl;
};
typedef struct IRpcSyntaxNegotiateVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcSyntaxNegotiate *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcSyntaxNegotiate *This);

    ULONG(__stdcall *Release)
    (
        IRpcSyntaxNegotiate *This);

    HRESULT(__stdcall *NegotiateSyntax)
    (
        IRpcSyntaxNegotiate *This,

        RPCOLEMESSAGE *pMsg);

} IRpcSyntaxNegotiateVtbl;

struct IRpcSyntaxNegotiate
{
    struct IRpcSyntaxNegotiateVtbl *lpVtbl;
};
typedef struct IRpcProxyBufferVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcProxyBuffer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcProxyBuffer *This);

    ULONG(__stdcall *Release)
    (
        IRpcProxyBuffer *This);

    HRESULT(__stdcall *Connect)
    (
        IRpcProxyBuffer *This,

        IRpcChannelBuffer *pRpcChannelBuffer);

    void(__stdcall *Disconnect)(
        IRpcProxyBuffer *This);

} IRpcProxyBufferVtbl;

struct IRpcProxyBuffer
{
    struct IRpcProxyBufferVtbl *lpVtbl;
};

typedef struct IRpcStubBufferVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcStubBuffer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcStubBuffer *This);

    ULONG(__stdcall *Release)
    (
        IRpcStubBuffer *This);

    HRESULT(__stdcall *Connect)
    (
        IRpcStubBuffer *This,

        IUnknown *pUnkServer);

    void(__stdcall *Disconnect)(
        IRpcStubBuffer *This);

    HRESULT(__stdcall *Invoke)
    (
        IRpcStubBuffer *This,

        RPCOLEMESSAGE *_prpcmsg,

        IRpcChannelBuffer *_pRpcChannelBuffer);

    IRpcStubBuffer *(__stdcall *IsIIDSupported)(
        IRpcStubBuffer *This,

        const IID *const riid);

    ULONG(__stdcall *CountRefs)
    (
        IRpcStubBuffer *This);

    HRESULT(__stdcall *DebugServerQueryInterface)
    (
        IRpcStubBuffer *This,

        void **ppv);

    void(__stdcall *DebugServerRelease)(
        IRpcStubBuffer *This,

        void *pv);

} IRpcStubBufferVtbl;

struct IRpcStubBuffer
{
    struct IRpcStubBufferVtbl *lpVtbl;
};
typedef struct IPSFactoryBufferVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPSFactoryBuffer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPSFactoryBuffer *This);

    ULONG(__stdcall *Release)
    (
        IPSFactoryBuffer *This);

    HRESULT(__stdcall *CreateProxy)
    (
        IPSFactoryBuffer *This,

        IUnknown *pUnkOuter,

        const IID *const riid,

        IRpcProxyBuffer **ppProxy,

        void **ppv);

    HRESULT(__stdcall *CreateStub)
    (
        IPSFactoryBuffer *This,

        const IID *const riid,

        IUnknown *pUnkServer,

        IRpcStubBuffer **ppStub);

} IPSFactoryBufferVtbl;

struct IPSFactoryBuffer
{
    struct IPSFactoryBufferVtbl *lpVtbl;
};

typedef struct SChannelHookCallInfo
{
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
} SChannelHookCallInfo;

typedef struct IChannelHookVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IChannelHook *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IChannelHook *This);

    ULONG(__stdcall *Release)
    (
        IChannelHook *This);

    void(__stdcall *ClientGetSize)(
        IChannelHook *This,

        const GUID *const uExtent,

        const IID *const riid,

        ULONG *pDataSize);

    void(__stdcall *ClientFillBuffer)(
        IChannelHook *This,

        const GUID *const uExtent,

        const IID *const riid,

        ULONG *pDataSize,

        void *pDataBuffer);

    void(__stdcall *ClientNotify)(
        IChannelHook *This,

        const GUID *const uExtent,

        const IID *const riid,

        ULONG cbDataSize,

        void *pDataBuffer,

        DWORD lDataRep,

        HRESULT hrFault);

    void(__stdcall *ServerNotify)(
        IChannelHook *This,

        const GUID *const uExtent,

        const IID *const riid,

        ULONG cbDataSize,

        void *pDataBuffer,

        DWORD lDataRep);

    void(__stdcall *ServerGetSize)(
        IChannelHook *This,

        const GUID *const uExtent,

        const IID *const riid,

        HRESULT hrFault,

        ULONG *pDataSize);

    void(__stdcall *ServerFillBuffer)(
        IChannelHook *This,

        const GUID *const uExtent,

        const IID *const riid,

        ULONG *pDataSize,

        void *pDataBuffer,

        HRESULT hrFault);

} IChannelHookVtbl;

struct IChannelHook
{
    struct IChannelHookVtbl *lpVtbl;
};

typedef struct tagSOLE_AUTHENTICATION_SERVICE
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
} SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES
{
    EOAC_NONE = 0,
    EOAC_MUTUAL_AUTH = 0x1,
    EOAC_STATIC_CLOAKING = 0x20,
    EOAC_DYNAMIC_CLOAKING = 0x40,
    EOAC_ANY_AUTHORITY = 0x80,
    EOAC_MAKE_FULLSIC = 0x100,
    EOAC_DEFAULT = 0x800,
    EOAC_SECURE_REFS = 0x2,
    EOAC_ACCESS_CONTROL = 0x4,
    EOAC_APPID = 0x8,
    EOAC_DYNAMIC = 0x10,
    EOAC_REQUIRE_FULLSIC = 0x200,
    EOAC_AUTO_IMPERSONATE = 0x400,
    EOAC_DISABLE_AAA = 0x1000,
    EOAC_NO_CUSTOM_MARSHAL = 0x2000,
    EOAC_RESERVED1 = 0x4000
} EOLE_AUTHENTICATION_CAPABILITIES;

typedef struct tagSOLE_AUTHENTICATION_INFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
} SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST
{
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
} SOLE_AUTHENTICATION_LIST;

typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;

typedef struct IClientSecurityVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IClientSecurity *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IClientSecurity *This);

    ULONG(__stdcall *Release)
    (
        IClientSecurity *This);

    HRESULT(__stdcall *QueryBlanket)
    (
        IClientSecurity *This,

        IUnknown *pProxy,

        DWORD *pAuthnSvc,

        DWORD *pAuthzSvc,

        OLECHAR **pServerPrincName,

        DWORD *pAuthnLevel,

        DWORD *pImpLevel,

        void **pAuthInfo,

        DWORD *pCapabilites);

    HRESULT(__stdcall *SetBlanket)
    (
        IClientSecurity *This,

        IUnknown *pProxy,

        DWORD dwAuthnSvc,

        DWORD dwAuthzSvc,

        OLECHAR *pServerPrincName,

        DWORD dwAuthnLevel,

        DWORD dwImpLevel,

        void *pAuthInfo,

        DWORD dwCapabilities);

    HRESULT(__stdcall *CopyProxy)
    (
        IClientSecurity *This,

        IUnknown *pProxy,

        IUnknown **ppCopy);

} IClientSecurityVtbl;

struct IClientSecurity
{
    struct IClientSecurityVtbl *lpVtbl;
};

typedef struct IServerSecurityVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IServerSecurity *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IServerSecurity *This);

    ULONG(__stdcall *Release)
    (
        IServerSecurity *This);

    HRESULT(__stdcall *QueryBlanket)
    (
        IServerSecurity *This,

        DWORD *pAuthnSvc,

        DWORD *pAuthzSvc,

        OLECHAR **pServerPrincName,

        DWORD *pAuthnLevel,

        DWORD *pImpLevel,

        void **pPrivs,

        DWORD *pCapabilities);

    HRESULT(__stdcall *ImpersonateClient)
    (
        IServerSecurity *This);

    HRESULT(__stdcall *RevertToSelf)
    (
        IServerSecurity *This);

    BOOL(__stdcall *IsImpersonating)
    (
        IServerSecurity *This);

} IServerSecurityVtbl;

struct IServerSecurity
{
    struct IServerSecurityVtbl *lpVtbl;
};
typedef enum tagRPCOPT_PROPERTIES
{
    COMBND_RPCTIMEOUT = 0x1,
    COMBND_SERVER_LOCALITY = 0x2,
    COMBND_RESERVED1 = 0x4,
    COMBND_RESERVED2 = 0x5,
    COMBND_RESERVED3 = 0x8,
    COMBND_RESERVED4 = 0x10
} RPCOPT_PROPERTIES;

typedef enum tagRPCOPT_SERVER_LOCALITY_VALUES
{
    SERVER_LOCALITY_PROCESS_LOCAL = 0,
    SERVER_LOCALITY_MACHINE_LOCAL = 1,
    SERVER_LOCALITY_REMOTE = 2
} RPCOPT_SERVER_LOCALITY_VALUES;

typedef struct IRpcOptionsVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcOptions *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcOptions *This);

    ULONG(__stdcall *Release)
    (
        IRpcOptions *This);

    HRESULT(__stdcall *Set)
    (
        IRpcOptions *This,

        IUnknown *pPrx,

        RPCOPT_PROPERTIES dwProperty,

        ULONG_PTR dwValue);

    HRESULT(__stdcall *Query)
    (
        IRpcOptions *This,

        IUnknown *pPrx,

        RPCOPT_PROPERTIES dwProperty,

        ULONG_PTR *pdwValue);

} IRpcOptionsVtbl;

struct IRpcOptions
{
    struct IRpcOptionsVtbl *lpVtbl;
};

typedef enum tagGLOBALOPT_PROPERTIES
{
    COMGLB_EXCEPTION_HANDLING = 1,
    COMGLB_APPID = 2,
    COMGLB_RPC_THREADPOOL_SETTING = 3,
    COMGLB_RO_SETTINGS = 4,
    COMGLB_UNMARSHALING_POLICY = 5,
    COMGLB_PROPERTIES_RESERVED1 = 6,
    COMGLB_PROPERTIES_RESERVED2 = 7,
    COMGLB_PROPERTIES_RESERVED3 = 8
} GLOBALOPT_PROPERTIES;

typedef enum tagGLOBALOPT_EH_VALUES
{
    COMGLB_EXCEPTION_HANDLE = 0,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
} GLOBALOPT_EH_VALUES;

typedef enum tagGLOBALOPT_RPCTP_VALUES
{
    COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
    COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
} GLOBALOPT_RPCTP_VALUES;

typedef enum tagGLOBALOPT_RO_FLAGS
{
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
    COMGLB_FAST_RUNDOWN = 0x8,
    COMGLB_RESERVED1 = 0x10,
    COMGLB_RESERVED2 = 0x20,
    COMGLB_RESERVED3 = 0x40,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
    COMGLB_RESERVED4 = 0x100,
    COMGLB_RESERVED5 = 0x200,
    COMGLB_RESERVED6 = 0x400
} GLOBALOPT_RO_FLAGS;

typedef enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
{
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
    COMGLB_UNMARSHALING_POLICY_STRONG = 1,
    COMGLB_UNMARSHALING_POLICY_HYBRID = 2
} GLOBALOPT_UNMARSHALING_POLICY_VALUES;

typedef struct IGlobalOptionsVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IGlobalOptions *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IGlobalOptions *This);

    ULONG(__stdcall *Release)
    (
        IGlobalOptions *This);

    HRESULT(__stdcall *Set)
    (
        IGlobalOptions *This,

        GLOBALOPT_PROPERTIES dwProperty,

        ULONG_PTR dwValue);

    HRESULT(__stdcall *Query)
    (
        IGlobalOptions *This,

        GLOBALOPT_PROPERTIES dwProperty,

        ULONG_PTR *pdwValue);

} IGlobalOptionsVtbl;

struct IGlobalOptions
{
    struct IGlobalOptionsVtbl *lpVtbl;
};

typedef ISurrogate *LPSURROGATE;
typedef struct ISurrogateVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISurrogate *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISurrogate *This);

    ULONG(__stdcall *Release)
    (
        ISurrogate *This);

    HRESULT(__stdcall *LoadDllServer)
    (
        ISurrogate *This,
        const IID *const Clsid);

    HRESULT(__stdcall *FreeSurrogate)
    (
        ISurrogate *This);

} ISurrogateVtbl;

struct ISurrogate
{
    struct ISurrogateVtbl *lpVtbl;
};
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
typedef struct IGlobalInterfaceTableVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IGlobalInterfaceTable *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IGlobalInterfaceTable *This);

    ULONG(__stdcall *Release)
    (
        IGlobalInterfaceTable *This);

    HRESULT(__stdcall *RegisterInterfaceInGlobal)
    (
        IGlobalInterfaceTable *This,

        IUnknown *pUnk,

        const IID *const riid,

        DWORD *pdwCookie);

    HRESULT(__stdcall *RevokeInterfaceFromGlobal)
    (
        IGlobalInterfaceTable *This,

        DWORD dwCookie);

    HRESULT(__stdcall *GetInterfaceFromGlobal)
    (
        IGlobalInterfaceTable *This,

        DWORD dwCookie,

        const IID *const riid,

        void **ppv);

} IGlobalInterfaceTableVtbl;

struct IGlobalInterfaceTable
{
    struct IGlobalInterfaceTableVtbl *lpVtbl;
};

typedef struct ISynchronizeVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISynchronize *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISynchronize *This);

    ULONG(__stdcall *Release)
    (
        ISynchronize *This);

    HRESULT(__stdcall *Wait)
    (
        ISynchronize *This,
        DWORD dwFlags,
        DWORD dwMilliseconds);

    HRESULT(__stdcall *Signal)
    (
        ISynchronize *This);

    HRESULT(__stdcall *Reset)
    (
        ISynchronize *This);

} ISynchronizeVtbl;

struct ISynchronize
{
    struct ISynchronizeVtbl *lpVtbl;
};
typedef struct ISynchronizeHandleVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISynchronizeHandle *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISynchronizeHandle *This);

    ULONG(__stdcall *Release)
    (
        ISynchronizeHandle *This);

    HRESULT(__stdcall *GetHandle)
    (
        ISynchronizeHandle *This,

        HANDLE *ph);

} ISynchronizeHandleVtbl;

struct ISynchronizeHandle
{
    struct ISynchronizeHandleVtbl *lpVtbl;
};
typedef struct ISynchronizeEventVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISynchronizeEvent *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISynchronizeEvent *This);

    ULONG(__stdcall *Release)
    (
        ISynchronizeEvent *This);

    HRESULT(__stdcall *GetHandle)
    (
        ISynchronizeEvent *This,

        HANDLE *ph);

    HRESULT(__stdcall *SetEventHandle)
    (
        ISynchronizeEvent *This,

        HANDLE *ph);

} ISynchronizeEventVtbl;

struct ISynchronizeEvent
{
    struct ISynchronizeEventVtbl *lpVtbl;
};
typedef struct ISynchronizeContainerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISynchronizeContainer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISynchronizeContainer *This);

    ULONG(__stdcall *Release)
    (
        ISynchronizeContainer *This);

    HRESULT(__stdcall *AddSynchronize)
    (
        ISynchronizeContainer *This,

        ISynchronize *pSync);

    HRESULT(__stdcall *WaitMultiple)
    (
        ISynchronizeContainer *This,

        DWORD dwFlags,

        DWORD dwTimeOut,

        ISynchronize **ppSync);

} ISynchronizeContainerVtbl;

struct ISynchronizeContainer
{
    struct ISynchronizeContainerVtbl *lpVtbl;
};

typedef struct ISynchronizeMutexVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISynchronizeMutex *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISynchronizeMutex *This);

    ULONG(__stdcall *Release)
    (
        ISynchronizeMutex *This);

    HRESULT(__stdcall *Wait)
    (
        ISynchronizeMutex *This,
        DWORD dwFlags,
        DWORD dwMilliseconds);

    HRESULT(__stdcall *Signal)
    (
        ISynchronizeMutex *This);

    HRESULT(__stdcall *Reset)
    (
        ISynchronizeMutex *This);

    HRESULT(__stdcall *ReleaseMutex)
    (
        ISynchronizeMutex *This);

} ISynchronizeMutexVtbl;

struct ISynchronizeMutex
{
    struct ISynchronizeMutexVtbl *lpVtbl;
};
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;

typedef struct ICancelMethodCallsVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICancelMethodCalls *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICancelMethodCalls *This);

    ULONG(__stdcall *Release)
    (
        ICancelMethodCalls *This);

    HRESULT(__stdcall *Cancel)
    (
        ICancelMethodCalls *This,

        ULONG ulSeconds);

    HRESULT(__stdcall *TestCancel)
    (
        ICancelMethodCalls *This);

} ICancelMethodCallsVtbl;

struct ICancelMethodCalls
{
    struct ICancelMethodCallsVtbl *lpVtbl;
};
typedef enum tagDCOM_CALL_STATE
{
    DCOM_NONE = 0,
    DCOM_CALL_COMPLETE = 0x1,
    DCOM_CALL_CANCELED = 0x2
} DCOM_CALL_STATE;

typedef struct IAsyncManagerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAsyncManager *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAsyncManager *This);

    ULONG(__stdcall *Release)
    (
        IAsyncManager *This);

    HRESULT(__stdcall *CompleteCall)
    (
        IAsyncManager *This,

        HRESULT Result);

    HRESULT(__stdcall *GetCallContext)
    (
        IAsyncManager *This,

        const IID *const riid,

        void **pInterface);

    HRESULT(__stdcall *GetState)
    (
        IAsyncManager *This,

        ULONG *pulStateFlags);

} IAsyncManagerVtbl;

struct IAsyncManager
{
    struct IAsyncManagerVtbl *lpVtbl;
};

typedef struct ICallFactoryVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICallFactory *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICallFactory *This);

    ULONG(__stdcall *Release)
    (
        ICallFactory *This);

    HRESULT(__stdcall *CreateCall)
    (
        ICallFactory *This,

        const IID *const riid,

        IUnknown *pCtrlUnk,

        const IID *const riid2,

        IUnknown **ppv);

} ICallFactoryVtbl;

struct ICallFactory
{
    struct ICallFactoryVtbl *lpVtbl;
};

typedef struct IRpcHelperVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRpcHelper *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRpcHelper *This);

    ULONG(__stdcall *Release)
    (
        IRpcHelper *This);

    HRESULT(__stdcall *GetDCOMProtocolVersion)
    (
        IRpcHelper *This,

        DWORD *pComVersion);

    HRESULT(__stdcall *GetIIDFromOBJREF)
    (
        IRpcHelper *This,

        void *pObjRef,

        IID **piid);

} IRpcHelperVtbl;

struct IRpcHelper
{
    struct IRpcHelperVtbl *lpVtbl;
};

typedef struct IReleaseMarshalBuffersVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IReleaseMarshalBuffers *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IReleaseMarshalBuffers *This);

    ULONG(__stdcall *Release)
    (
        IReleaseMarshalBuffers *This);

    HRESULT(__stdcall *ReleaseMarshalBuffer)
    (
        IReleaseMarshalBuffers *This,

        RPCOLEMESSAGE *pMsg,

        DWORD dwFlags,

        IUnknown *pChnl);

} IReleaseMarshalBuffersVtbl;

struct IReleaseMarshalBuffers
{
    struct IReleaseMarshalBuffersVtbl *lpVtbl;
};

typedef struct IWaitMultipleVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWaitMultiple *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWaitMultiple *This);

    ULONG(__stdcall *Release)
    (
        IWaitMultiple *This);

    HRESULT(__stdcall *WaitMultiple)
    (
        IWaitMultiple *This,

        DWORD timeout,

        ISynchronize **pSync);

    HRESULT(__stdcall *AddSynchronize)
    (
        IWaitMultiple *This,

        ISynchronize *pSync);

} IWaitMultipleVtbl;

struct IWaitMultiple
{
    struct IWaitMultipleVtbl *lpVtbl;
};
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;

typedef struct IAddrTrackingControlVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAddrTrackingControl *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAddrTrackingControl *This);

    ULONG(__stdcall *Release)
    (
        IAddrTrackingControl *This);

    HRESULT(__stdcall *EnableCOMDynamicAddrTracking)
    (
        IAddrTrackingControl *This);

    HRESULT(__stdcall *DisableCOMDynamicAddrTracking)
    (
        IAddrTrackingControl *This);

} IAddrTrackingControlVtbl;

struct IAddrTrackingControl
{
    struct IAddrTrackingControlVtbl *lpVtbl;
};
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;

typedef struct IAddrExclusionControlVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAddrExclusionControl *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAddrExclusionControl *This);

    ULONG(__stdcall *Release)
    (
        IAddrExclusionControl *This);

    HRESULT(__stdcall *GetCurrentAddrExclusionList)
    (
        IAddrExclusionControl *This,

        const IID *const riid,

        void **ppEnumerator);

    HRESULT(__stdcall *UpdateAddrExclusionList)
    (
        IAddrExclusionControl *This,

        IUnknown *pEnumerator);

} IAddrExclusionControlVtbl;

struct IAddrExclusionControl
{
    struct IAddrExclusionControlVtbl *lpVtbl;
};
typedef struct IPipeByteVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPipeByte *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPipeByte *This);

    ULONG(__stdcall *Release)
    (
        IPipeByte *This);

    HRESULT(__stdcall *Pull)
    (
        IPipeByte *This,
        BYTE *buf,
        ULONG cRequest,
        ULONG *pcReturned);

    HRESULT(__stdcall *Push)
    (
        IPipeByte *This,
        BYTE *buf,
        ULONG cSent);

} IPipeByteVtbl;

struct IPipeByte
{
    struct IPipeByteVtbl *lpVtbl;
};

typedef struct AsyncIPipeByteVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        AsyncIPipeByte *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        AsyncIPipeByte *This);

    ULONG(__stdcall *Release)
    (
        AsyncIPipeByte *This);

    HRESULT(__stdcall *Begin_Pull)
    (
        AsyncIPipeByte *This,
        ULONG cRequest);

    HRESULT(__stdcall *Finish_Pull)
    (
        AsyncIPipeByte *This,
        BYTE *buf,
        ULONG *pcReturned);

    HRESULT(__stdcall *Begin_Push)
    (
        AsyncIPipeByte *This,
        BYTE *buf,
        ULONG cSent);

    HRESULT(__stdcall *Finish_Push)
    (
        AsyncIPipeByte *This);

} AsyncIPipeByteVtbl;

struct AsyncIPipeByte
{
    struct AsyncIPipeByteVtbl *lpVtbl;
};

typedef struct IPipeLongVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPipeLong *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPipeLong *This);

    ULONG(__stdcall *Release)
    (
        IPipeLong *This);

    HRESULT(__stdcall *Pull)
    (
        IPipeLong *This,
        LONG *buf,
        ULONG cRequest,
        ULONG *pcReturned);

    HRESULT(__stdcall *Push)
    (
        IPipeLong *This,
        LONG *buf,
        ULONG cSent);

} IPipeLongVtbl;

struct IPipeLong
{
    struct IPipeLongVtbl *lpVtbl;
};

typedef struct AsyncIPipeLongVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        AsyncIPipeLong *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        AsyncIPipeLong *This);

    ULONG(__stdcall *Release)
    (
        AsyncIPipeLong *This);

    HRESULT(__stdcall *Begin_Pull)
    (
        AsyncIPipeLong *This,
        ULONG cRequest);

    HRESULT(__stdcall *Finish_Pull)
    (
        AsyncIPipeLong *This,
        LONG *buf,
        ULONG *pcReturned);

    HRESULT(__stdcall *Begin_Push)
    (
        AsyncIPipeLong *This,
        LONG *buf,
        ULONG cSent);

    HRESULT(__stdcall *Finish_Push)
    (
        AsyncIPipeLong *This);

} AsyncIPipeLongVtbl;

struct AsyncIPipeLong
{
    struct AsyncIPipeLongVtbl *lpVtbl;
};

typedef struct IPipeDoubleVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPipeDouble *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPipeDouble *This);

    ULONG(__stdcall *Release)
    (
        IPipeDouble *This);

    HRESULT(__stdcall *Pull)
    (
        IPipeDouble *This,
        DOUBLE *buf,
        ULONG cRequest,
        ULONG *pcReturned);

    HRESULT(__stdcall *Push)
    (
        IPipeDouble *This,
        DOUBLE *buf,
        ULONG cSent);

} IPipeDoubleVtbl;

struct IPipeDouble
{
    struct IPipeDoubleVtbl *lpVtbl;
};

typedef struct AsyncIPipeDoubleVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        AsyncIPipeDouble *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        AsyncIPipeDouble *This);

    ULONG(__stdcall *Release)
    (
        AsyncIPipeDouble *This);

    HRESULT(__stdcall *Begin_Pull)
    (
        AsyncIPipeDouble *This,
        ULONG cRequest);

    HRESULT(__stdcall *Finish_Pull)
    (
        AsyncIPipeDouble *This,
        DOUBLE *buf,
        ULONG *pcReturned);

    HRESULT(__stdcall *Begin_Push)
    (
        AsyncIPipeDouble *This,
        DOUBLE *buf,
        ULONG cSent);

    HRESULT(__stdcall *Finish_Push)
    (
        AsyncIPipeDouble *This);

} AsyncIPipeDoubleVtbl;

struct AsyncIPipeDouble
{
    struct AsyncIPipeDoubleVtbl *lpVtbl;
};

typedef enum _APTTYPEQUALIFIER
{
    APTTYPEQUALIFIER_NONE = 0,
    APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
    APTTYPEQUALIFIER_NA_ON_MTA = 2,
    APTTYPEQUALIFIER_NA_ON_STA = 3,
    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
    APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
    APTTYPEQUALIFIER_APPLICATION_STA = 6,
    APTTYPEQUALIFIER_RESERVED_1 = 7
} APTTYPEQUALIFIER;

typedef enum _APTTYPE
{
    APTTYPE_CURRENT = -1,
    APTTYPE_STA = 0,
    APTTYPE_MTA = 1,
    APTTYPE_NA = 2,
    APTTYPE_MAINSTA = 3
} APTTYPE;

typedef enum _THDTYPE
{
    THDTYPE_BLOCKMESSAGES = 0,
    THDTYPE_PROCESSMESSAGES = 1
} THDTYPE;

typedef DWORD APARTMENTID;

typedef struct IComThreadingInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IComThreadingInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IComThreadingInfo *This);

    ULONG(__stdcall *Release)
    (
        IComThreadingInfo *This);

    HRESULT(__stdcall *GetCurrentApartmentType)
    (
        IComThreadingInfo *This,

        APTTYPE *pAptType);

    HRESULT(__stdcall *GetCurrentThreadType)
    (
        IComThreadingInfo *This,

        THDTYPE *pThreadType);

    HRESULT(__stdcall *GetCurrentLogicalThreadId)
    (
        IComThreadingInfo *This,

        GUID *pguidLogicalThreadId);

    HRESULT(__stdcall *SetCurrentLogicalThreadId)
    (
        IComThreadingInfo *This,

        const GUID *const rguid);

} IComThreadingInfoVtbl;

struct IComThreadingInfo
{
    struct IComThreadingInfoVtbl *lpVtbl;
};

typedef struct IProcessInitControlVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IProcessInitControl *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IProcessInitControl *This);

    ULONG(__stdcall *Release)
    (
        IProcessInitControl *This);

    HRESULT(__stdcall *ResetInitializerTimeout)
    (
        IProcessInitControl *This,
        DWORD dwSecondsRemaining);

} IProcessInitControlVtbl;

struct IProcessInitControl
{
    struct IProcessInitControlVtbl *lpVtbl;
};

typedef struct IFastRundownVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IFastRundown *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IFastRundown *This);

    ULONG(__stdcall *Release)
    (
        IFastRundown *This);

} IFastRundownVtbl;

struct IFastRundown
{
    struct IFastRundownVtbl *lpVtbl;
};
typedef enum CO_MARSHALING_CONTEXT_ATTRIBUTES
{
    CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = 0x80000000,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = 0x80000001,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = 0x80000002,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = 0x80000003,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = 0x80000004,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = 0x80000005,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = 0x80000006,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = 0x80000007,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = 0x80000008,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = 0x80000009,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = 0x8000000a,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = 0x8000000b,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = 0x8000000c,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = 0x8000000d,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = 0x8000000e,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = 0x8000000f,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = 0x80000010,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = 0x80000011
} CO_MARSHALING_CONTEXT_ATTRIBUTES;

typedef struct IMarshalingStreamVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMarshalingStream *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMarshalingStream *This);

    ULONG(__stdcall *Release)
    (
        IMarshalingStream *This);

    HRESULT(__stdcall *Read)
    (
        IMarshalingStream *This,

        void *pv,

        ULONG cb,

        ULONG *pcbRead);

    HRESULT(__stdcall *Write)
    (
        IMarshalingStream *This,

        const void *pv,

        ULONG cb,

        ULONG *pcbWritten);

    HRESULT(__stdcall *Seek)
    (
        IMarshalingStream *This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,

        ULARGE_INTEGER *plibNewPosition);

    HRESULT(__stdcall *SetSize)
    (
        IMarshalingStream *This,
        ULARGE_INTEGER libNewSize);

    HRESULT(__stdcall *CopyTo)
    (
        IMarshalingStream *This,

        IStream *pstm,
        ULARGE_INTEGER cb,

        ULARGE_INTEGER *pcbRead,

        ULARGE_INTEGER *pcbWritten);

    HRESULT(__stdcall *Commit)
    (
        IMarshalingStream *This,
        DWORD grfCommitFlags);

    HRESULT(__stdcall *Revert)
    (
        IMarshalingStream *This);

    HRESULT(__stdcall *LockRegion)
    (
        IMarshalingStream *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT(__stdcall *UnlockRegion)
    (
        IMarshalingStream *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT(__stdcall *Stat)
    (
        IMarshalingStream *This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

    HRESULT(__stdcall *Clone)
    (
        IMarshalingStream *This,
        IStream **ppstm);

    HRESULT(__stdcall *GetMarshalingContextAttribute)
    (
        IMarshalingStream *This,
        CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
        ULONG_PTR *pAttributeValue);

} IMarshalingStreamVtbl;

struct IMarshalingStream
{
    struct IMarshalingStreamVtbl *lpVtbl;
};

typedef struct IAgileReferenceVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAgileReference *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAgileReference *This);

    ULONG(__stdcall *Release)
    (
        IAgileReference *This);

    HRESULT(__stdcall *Resolve)
    (
        IAgileReference *This,
        const IID *const riid,
        void **ppvObjectReference);

} IAgileReferenceVtbl;

struct IAgileReference
{
    struct IAgileReferenceVtbl *lpVtbl;
};

typedef struct tagPROPVARIANT PROPVARIANT;

typedef enum tagCOWAIT_FLAGS
{
    COWAIT_DEFAULT = 0,
    COWAIT_WAITALL = 1,
    COWAIT_ALERTABLE = 2,
    COWAIT_INPUTAVAILABLE = 4,
    COWAIT_DISPATCH_CALLS = 8,
    COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10,
} COWAIT_FLAGS;
typedef HRESULT(__stdcall *LPFNGETCLASSOBJECT)(const IID *const, const IID *const, LPVOID *);
typedef HRESULT(__stdcall *LPFNCANUNLOADNOW)(void);

typedef struct IMallocSpy IMallocSpy;

typedef struct IBindCtx IBindCtx;

typedef struct IEnumMoniker IEnumMoniker;

typedef struct IRunnableObject IRunnableObject;

typedef struct IRunningObjectTable IRunningObjectTable;

typedef struct IPersist IPersist;

typedef struct IPersistStream IPersistStream;

typedef struct IMoniker IMoniker;

typedef struct IROTData IROTData;

typedef struct IEnumSTATSTG IEnumSTATSTG;

typedef struct IStorage IStorage;

typedef struct IPersistFile IPersistFile;

typedef struct IPersistStorage IPersistStorage;

typedef struct ILockBytes ILockBytes;

typedef struct IEnumFORMATETC IEnumFORMATETC;

typedef struct IEnumSTATDATA IEnumSTATDATA;

typedef struct IRootStorage IRootStorage;

typedef struct IAdviseSink IAdviseSink;

typedef struct AsyncIAdviseSink AsyncIAdviseSink;

typedef struct IAdviseSink2 IAdviseSink2;

typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;

typedef struct IDataObject IDataObject;

typedef struct IDataAdviseHolder IDataAdviseHolder;

typedef struct IMessageFilter IMessageFilter;

typedef struct IClassActivator IClassActivator;

typedef struct IFillLockBytes IFillLockBytes;

typedef struct IProgressNotify IProgressNotify;

typedef struct ILayoutStorage ILayoutStorage;

typedef struct IBlockingLock IBlockingLock;

typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;

typedef struct IOplockStorage IOplockStorage;

typedef struct IDirectWriterLock IDirectWriterLock;

typedef struct IUrlMon IUrlMon;

typedef struct IForegroundTransfer IForegroundTransfer;

typedef struct IThumbnailExtractor IThumbnailExtractor;

typedef struct IDummyHICONIncluder IDummyHICONIncluder;

typedef struct IProcessLock IProcessLock;

typedef struct ISurrogateService ISurrogateService;

typedef struct IInitializeSpy IInitializeSpy;

typedef struct IApartmentShutdown IApartmentShutdown;

typedef IMallocSpy *LPMALLOCSPY;
typedef struct IMallocSpyVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMallocSpy *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMallocSpy *This);

    ULONG(__stdcall *Release)
    (
        IMallocSpy *This);

    SIZE_T(__stdcall *PreAlloc)
    (
        IMallocSpy *This,

        SIZE_T cbRequest);

    void *(__stdcall *PostAlloc)(
        IMallocSpy *This,

        void *pActual);

    void *(__stdcall *PreFree)(
        IMallocSpy *This,

        void *pRequest,

        BOOL fSpyed);

    void(__stdcall *PostFree)(
        IMallocSpy *This,

        BOOL fSpyed);

    SIZE_T(__stdcall *PreRealloc)
    (
        IMallocSpy *This,

        void *pRequest,

        SIZE_T cbRequest,

        void **ppNewRequest,

        BOOL fSpyed);

    void *(__stdcall *PostRealloc)(
        IMallocSpy *This,

        void *pActual,

        BOOL fSpyed);

    void *(__stdcall *PreGetSize)(
        IMallocSpy *This,

        void *pRequest,

        BOOL fSpyed);

    SIZE_T(__stdcall *PostGetSize)
    (
        IMallocSpy *This,

        SIZE_T cbActual,

        BOOL fSpyed);

    void *(__stdcall *PreDidAlloc)(
        IMallocSpy *This,

        void *pRequest,

        BOOL fSpyed);

    int(__stdcall *PostDidAlloc)(
        IMallocSpy *This,

        void *pRequest,

        BOOL fSpyed,

        int fActual);

    void(__stdcall *PreHeapMinimize)(
        IMallocSpy *This);

    void(__stdcall *PostHeapMinimize)(
        IMallocSpy *This);

} IMallocSpyVtbl;

struct IMallocSpy
{
    struct IMallocSpyVtbl *lpVtbl;
};

typedef IBindCtx *LPBC;

typedef IBindCtx *LPBINDCTX;

typedef struct tagBIND_OPTS
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
} BIND_OPTS;

typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct tagBIND_OPTS2
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
} BIND_OPTS2;

typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;

typedef struct tagBIND_OPTS3
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    HWND hwnd;
} BIND_OPTS3;

typedef struct tagBIND_OPTS3 *LPBIND_OPTS3;

typedef enum tagBIND_FLAGS
{
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
} BIND_FLAGS;

typedef struct IBindCtxVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBindCtx *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBindCtx *This);

    ULONG(__stdcall *Release)
    (
        IBindCtx *This);

    HRESULT(__stdcall *RegisterObjectBound)
    (
        IBindCtx *This,
        IUnknown *punk);

    HRESULT(__stdcall *RevokeObjectBound)
    (
        IBindCtx *This,
        IUnknown *punk);

    HRESULT(__stdcall *ReleaseBoundObjects)
    (
        IBindCtx *This);

    HRESULT(__stdcall *SetBindOptions)
    (
        IBindCtx *This,

        BIND_OPTS *pbindopts);

    HRESULT(__stdcall *GetBindOptions)
    (
        IBindCtx *This,

        BIND_OPTS *pbindopts);

    HRESULT(__stdcall *GetRunningObjectTable)
    (
        IBindCtx *This,
        IRunningObjectTable **pprot);

    HRESULT(__stdcall *RegisterObjectParam)
    (
        IBindCtx *This,
        LPOLESTR pszKey,
        IUnknown *punk);

    HRESULT(__stdcall *GetObjectParam)
    (
        IBindCtx *This,
        LPOLESTR pszKey,
        IUnknown **ppunk);

    HRESULT(__stdcall *EnumObjectParam)
    (
        IBindCtx *This,
        IEnumString **ppenum);

    HRESULT(__stdcall *RevokeObjectParam)
    (
        IBindCtx *This,
        LPOLESTR pszKey);

} IBindCtxVtbl;

struct IBindCtx
{
    struct IBindCtxVtbl *lpVtbl;
};
typedef IEnumMoniker *LPENUMMONIKER;

typedef struct IEnumMonikerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumMoniker *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumMoniker *This);

    ULONG(__stdcall *Release)
    (
        IEnumMoniker *This);

    HRESULT(__stdcall *Next)
    (
        IEnumMoniker *This,
        ULONG celt,

        IMoniker **rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumMoniker *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumMoniker *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumMoniker *This,
        IEnumMoniker **ppenum);

} IEnumMonikerVtbl;

struct IEnumMoniker
{
    struct IEnumMonikerVtbl *lpVtbl;
};

typedef IRunnableObject *LPRUNNABLEOBJECT;
typedef struct IRunnableObjectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRunnableObject *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRunnableObject *This);

    ULONG(__stdcall *Release)
    (
        IRunnableObject *This);

    HRESULT(__stdcall *GetRunningClass)
    (
        IRunnableObject *This,
        LPCLSID lpClsid);

    HRESULT(__stdcall *Run)
    (
        IRunnableObject *This,
        LPBINDCTX pbc);

    BOOL(__stdcall *IsRunning)
    (
        IRunnableObject *This);

    HRESULT(__stdcall *LockRunning)
    (
        IRunnableObject *This,
        BOOL fLock,
        BOOL fLastUnlockCloses);

    HRESULT(__stdcall *SetContainedObject)
    (
        IRunnableObject *This,
        BOOL fContained);

} IRunnableObjectVtbl;

struct IRunnableObject
{
    struct IRunnableObjectVtbl *lpVtbl;
};
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;

typedef struct IRunningObjectTableVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRunningObjectTable *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRunningObjectTable *This);

    ULONG(__stdcall *Release)
    (
        IRunningObjectTable *This);

    HRESULT(__stdcall *Register)
    (
        IRunningObjectTable *This,
        DWORD grfFlags,
        IUnknown *punkObject,
        IMoniker *pmkObjectName,
        DWORD *pdwRegister);

    HRESULT(__stdcall *Revoke)
    (
        IRunningObjectTable *This,
        DWORD dwRegister);

    HRESULT(__stdcall *IsRunning)
    (
        IRunningObjectTable *This,
        IMoniker *pmkObjectName);

    HRESULT(__stdcall *GetObjectA)
    (
        IRunningObjectTable *This,
        IMoniker *pmkObjectName,
        IUnknown **ppunkObject);

    HRESULT(__stdcall *NoteChangeTime)
    (
        IRunningObjectTable *This,
        DWORD dwRegister,
        FILETIME *pfiletime);

    HRESULT(__stdcall *GetTimeOfLastChange)
    (
        IRunningObjectTable *This,
        IMoniker *pmkObjectName,
        FILETIME *pfiletime);

    HRESULT(__stdcall *EnumRunning)
    (
        IRunningObjectTable *This,
        IEnumMoniker **ppenumMoniker);

} IRunningObjectTableVtbl;

struct IRunningObjectTable
{
    struct IRunningObjectTableVtbl *lpVtbl;
};

typedef IPersist *LPPERSIST;
typedef struct IPersistVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPersist *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPersist *This);

    ULONG(__stdcall *Release)
    (
        IPersist *This);

    HRESULT(__stdcall *GetClassID)
    (
        IPersist *This,
        CLSID *pClassID);

} IPersistVtbl;

struct IPersist
{
    struct IPersistVtbl *lpVtbl;
};
typedef IPersistStream *LPPERSISTSTREAM;

typedef struct IPersistStreamVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPersistStream *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPersistStream *This);

    ULONG(__stdcall *Release)
    (
        IPersistStream *This);

    HRESULT(__stdcall *GetClassID)
    (
        IPersistStream *This,
        CLSID *pClassID);

    HRESULT(__stdcall *IsDirty)
    (
        IPersistStream *This);

    HRESULT(__stdcall *Load)
    (
        IPersistStream *This,
        IStream *pStm);

    HRESULT(__stdcall *Save)
    (
        IPersistStream *This,
        IStream *pStm,
        BOOL fClearDirty);

    HRESULT(__stdcall *GetSizeMax)
    (
        IPersistStream *This,
        ULARGE_INTEGER *pcbSize);

} IPersistStreamVtbl;

struct IPersistStream
{
    struct IPersistStreamVtbl *lpVtbl;
};
typedef IMoniker *LPMONIKER;

typedef enum tagMKSYS
{
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,
    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER = 8,
    MKSYS_SESSIONMONIKER = 9,
    MKSYS_LUAMONIKER = 10
} MKSYS;

typedef enum tagMKREDUCE
{
    MKRREDUCE_ONE = (3 << 16),
    MKRREDUCE_TOUSER = (2 << 16),
    MKRREDUCE_THROUGHUSER = (1 << 16),
    MKRREDUCE_ALL = 0
} MKRREDUCE;

typedef struct IMonikerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMoniker *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMoniker *This);

    ULONG(__stdcall *Release)
    (
        IMoniker *This);

    HRESULT(__stdcall *GetClassID)
    (
        IMoniker *This,
        CLSID *pClassID);

    HRESULT(__stdcall *IsDirty)
    (
        IMoniker *This);

    HRESULT(__stdcall *Load)
    (
        IMoniker *This,
        IStream *pStm);

    HRESULT(__stdcall *Save)
    (
        IMoniker *This,
        IStream *pStm,
        BOOL fClearDirty);

    HRESULT(__stdcall *GetSizeMax)
    (
        IMoniker *This,
        ULARGE_INTEGER *pcbSize);

    HRESULT(__stdcall *BindToObject)
    (
        IMoniker *This,

        IBindCtx *pbc,

        IMoniker *pmkToLeft,

        const IID *const riidResult,

        void **ppvResult);

    HRESULT(__stdcall *BindToStorage)
    (
        IMoniker *This,

        IBindCtx *pbc,

        IMoniker *pmkToLeft,

        const IID *const riid,

        void **ppvObj);

    HRESULT(__stdcall *Reduce)
    (
        IMoniker *This,
        IBindCtx *pbc,
        DWORD dwReduceHowFar,
        IMoniker **ppmkToLeft,
        IMoniker **ppmkReduced);

    HRESULT(__stdcall *ComposeWith)
    (
        IMoniker *This,
        IMoniker *pmkRight,
        BOOL fOnlyIfNotGeneric,
        IMoniker **ppmkComposite);

    HRESULT(__stdcall *Enum)
    (
        IMoniker *This,
        BOOL fForward,
        IEnumMoniker **ppenumMoniker);

    HRESULT(__stdcall *IsEqual)
    (
        IMoniker *This,
        IMoniker *pmkOtherMoniker);

    HRESULT(__stdcall *Hash)
    (
        IMoniker *This,
        DWORD *pdwHash);

    HRESULT(__stdcall *IsRunning)
    (
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        IMoniker *pmkNewlyRunning);

    HRESULT(__stdcall *GetTimeOfLastChange)
    (
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        FILETIME *pFileTime);

    HRESULT(__stdcall *Inverse)
    (
        IMoniker *This,
        IMoniker **ppmk);

    HRESULT(__stdcall *CommonPrefixWith)
    (
        IMoniker *This,
        IMoniker *pmkOther,
        IMoniker **ppmkPrefix);

    HRESULT(__stdcall *RelativePathTo)
    (
        IMoniker *This,
        IMoniker *pmkOther,
        IMoniker **ppmkRelPath);

    HRESULT(__stdcall *GetDisplayName)
    (
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR *ppszDisplayName);

    HRESULT(__stdcall *ParseDisplayName)
    (
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    HRESULT(__stdcall *IsSystemMoniker)
    (
        IMoniker *This,
        DWORD *pdwMksys);

} IMonikerVtbl;

struct IMoniker
{
    struct IMonikerVtbl *lpVtbl;
};

typedef struct IROTDataVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IROTData *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IROTData *This);

    ULONG(__stdcall *Release)
    (
        IROTData *This);

    HRESULT(__stdcall *GetComparisonData)
    (
        IROTData *This,
        byte *pbData,
        ULONG cbMax,
        ULONG *pcbData);

} IROTDataVtbl;

struct IROTData
{
    struct IROTDataVtbl *lpVtbl;
};

typedef IEnumSTATSTG *LPENUMSTATSTG;
typedef struct IEnumSTATSTGVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumSTATSTG *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumSTATSTG *This);

    ULONG(__stdcall *Release)
    (
        IEnumSTATSTG *This);

    HRESULT(__stdcall *Next)
    (
        IEnumSTATSTG *This,
        ULONG celt,

        STATSTG *rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumSTATSTG *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumSTATSTG *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumSTATSTG *This,
        IEnumSTATSTG **ppenum);

} IEnumSTATSTGVtbl;

struct IEnumSTATSTG
{
    struct IEnumSTATSTGVtbl *lpVtbl;
};
typedef IStorage *LPSTORAGE;

typedef struct tagRemSNB
{
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR rgString[1];
} RemSNB;

typedef RemSNB *wireSNB;

typedef LPOLESTR *SNB;

typedef struct IStorageVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IStorage *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IStorage *This);

    ULONG(__stdcall *Release)
    (
        IStorage *This);

    HRESULT(__stdcall *CreateStream)
    (
        IStorage *This,
        const OLECHAR *pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStream **ppstm);

    HRESULT(__stdcall *OpenStream)
    (
        IStorage *This,

        const OLECHAR *pwcsName,

        void *reserved1,
        DWORD grfMode,
        DWORD reserved2,

        IStream **ppstm);

    HRESULT(__stdcall *CreateStorage)
    (
        IStorage *This,
        const OLECHAR *pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStorage **ppstg);

    HRESULT(__stdcall *OpenStorage)
    (
        IStorage *This,
        const OLECHAR *pwcsName,
        IStorage *pstgPriority,
        DWORD grfMode,
        SNB snbExclude,
        DWORD reserved,
        IStorage **ppstg);

    HRESULT(__stdcall *CopyTo)
    (
        IStorage *This,
        DWORD ciidExclude,

        const IID *rgiidExclude,

        SNB snbExclude,

        IStorage *pstgDest);

    HRESULT(__stdcall *MoveElementTo)
    (
        IStorage *This,
        const OLECHAR *pwcsName,
        IStorage *pstgDest,
        const OLECHAR *pwcsNewName,
        DWORD grfFlags);

    HRESULT(__stdcall *Commit)
    (
        IStorage *This,
        DWORD grfCommitFlags);

    HRESULT(__stdcall *Revert)
    (
        IStorage *This);

    HRESULT(__stdcall *EnumElements)
    (
        IStorage *This,

        DWORD reserved1,

        void *reserved2,

        DWORD reserved3,

        IEnumSTATSTG **ppenum);

    HRESULT(__stdcall *DestroyElement)
    (
        IStorage *This,
        const OLECHAR *pwcsName);

    HRESULT(__stdcall *RenameElement)
    (
        IStorage *This,
        const OLECHAR *pwcsOldName,
        const OLECHAR *pwcsNewName);

    HRESULT(__stdcall *SetElementTimes)
    (
        IStorage *This,
        const OLECHAR *pwcsName,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);

    HRESULT(__stdcall *SetClass)
    (
        IStorage *This,
        const IID *const clsid);

    HRESULT(__stdcall *SetStateBits)
    (
        IStorage *This,
        DWORD grfStateBits,
        DWORD grfMask);

    HRESULT(__stdcall *Stat)
    (
        IStorage *This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

} IStorageVtbl;

struct IStorage
{
    struct IStorageVtbl *lpVtbl;
};
typedef IPersistFile *LPPERSISTFILE;
typedef struct IPersistFileVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPersistFile *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPersistFile *This);

    ULONG(__stdcall *Release)
    (
        IPersistFile *This);

    HRESULT(__stdcall *GetClassID)
    (
        IPersistFile *This,
        CLSID *pClassID);

    HRESULT(__stdcall *IsDirty)
    (
        IPersistFile *This);

    HRESULT(__stdcall *Load)
    (
        IPersistFile *This,
        LPCOLESTR pszFileName,
        DWORD dwMode);

    HRESULT(__stdcall *Save)
    (
        IPersistFile *This,
        LPCOLESTR pszFileName,
        BOOL fRemember);

    HRESULT(__stdcall *SaveCompleted)
    (
        IPersistFile *This,
        LPCOLESTR pszFileName);

    HRESULT(__stdcall *GetCurFile)
    (
        IPersistFile *This,
        LPOLESTR *ppszFileName);

} IPersistFileVtbl;

struct IPersistFile
{
    struct IPersistFileVtbl *lpVtbl;
};
typedef IPersistStorage *LPPERSISTSTORAGE;

typedef struct IPersistStorageVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPersistStorage *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPersistStorage *This);

    ULONG(__stdcall *Release)
    (
        IPersistStorage *This);

    HRESULT(__stdcall *GetClassID)
    (
        IPersistStorage *This,
        CLSID *pClassID);

    HRESULT(__stdcall *IsDirty)
    (
        IPersistStorage *This);

    HRESULT(__stdcall *InitNew)
    (
        IPersistStorage *This,
        IStorage *pStg);

    HRESULT(__stdcall *Load)
    (
        IPersistStorage *This,
        IStorage *pStg);

    HRESULT(__stdcall *Save)
    (
        IPersistStorage *This,
        IStorage *pStgSave,
        BOOL fSameAsLoad);

    HRESULT(__stdcall *SaveCompleted)
    (
        IPersistStorage *This,
        IStorage *pStgNew);

    HRESULT(__stdcall *HandsOffStorage)
    (
        IPersistStorage *This);

} IPersistStorageVtbl;

struct IPersistStorage
{
    struct IPersistStorageVtbl *lpVtbl;
};

typedef ILockBytes *LPLOCKBYTES;
typedef struct ILockBytesVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ILockBytes *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ILockBytes *This);

    ULONG(__stdcall *Release)
    (
        ILockBytes *This);

    HRESULT(__stdcall *ReadAt)
    (
        ILockBytes *This,
        ULARGE_INTEGER ulOffset,

        void *pv,
        ULONG cb,

        ULONG *pcbRead);

    HRESULT(__stdcall *WriteAt)
    (
        ILockBytes *This,
        ULARGE_INTEGER ulOffset,

        const void *pv,
        ULONG cb,

        ULONG *pcbWritten);

    HRESULT(__stdcall *Flush)
    (
        ILockBytes *This);

    HRESULT(__stdcall *SetSize)
    (
        ILockBytes *This,
        ULARGE_INTEGER cb);

    HRESULT(__stdcall *LockRegion)
    (
        ILockBytes *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT(__stdcall *UnlockRegion)
    (
        ILockBytes *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT(__stdcall *Stat)
    (
        ILockBytes *This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

} ILockBytesVtbl;

struct ILockBytes
{
    struct ILockBytesVtbl *lpVtbl;
};
typedef IEnumFORMATETC *LPENUMFORMATETC;

typedef struct tagDVTARGETDEVICE
{
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
} DVTARGETDEVICE;

typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
{
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;

typedef struct IEnumFORMATETCVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumFORMATETC *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumFORMATETC *This);

    ULONG(__stdcall *Release)
    (
        IEnumFORMATETC *This);

    HRESULT(__stdcall *Next)
    (
        IEnumFORMATETC *This,
        ULONG celt,

        FORMATETC *rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumFORMATETC *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumFORMATETC *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumFORMATETC *This,
        IEnumFORMATETC **ppenum);

} IEnumFORMATETCVtbl;

struct IEnumFORMATETC
{
    struct IEnumFORMATETCVtbl *lpVtbl;
};

typedef IEnumSTATDATA *LPENUMSTATDATA;

typedef enum tagADVF
{
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
} ADVF;

typedef struct tagSTATDATA
{
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink *pAdvSink;
    DWORD dwConnection;
} STATDATA;

typedef STATDATA *LPSTATDATA;
typedef struct IEnumSTATDATAVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumSTATDATA *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumSTATDATA *This);

    ULONG(__stdcall *Release)
    (
        IEnumSTATDATA *This);

    HRESULT(__stdcall *Next)
    (
        IEnumSTATDATA *This,
        ULONG celt,

        STATDATA *rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumSTATDATA *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumSTATDATA *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumSTATDATA *This,
        IEnumSTATDATA **ppenum);

} IEnumSTATDATAVtbl;

struct IEnumSTATDATA
{
    struct IEnumSTATDATAVtbl *lpVtbl;
};

typedef IRootStorage *LPROOTSTORAGE;
typedef struct IRootStorageVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRootStorage *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRootStorage *This);

    ULONG(__stdcall *Release)
    (
        IRootStorage *This);

    HRESULT(__stdcall *SwitchToFile)
    (
        IRootStorage *This,
        LPOLESTR pszFile);

} IRootStorageVtbl;

struct IRootStorage
{
    struct IRootStorageVtbl *lpVtbl;
};
typedef IAdviseSink *LPADVISESINK;

typedef enum tagTYMED
{
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0
} TYMED;

typedef struct tagRemSTGMEDIUM
{
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    byte data[1];
} RemSTGMEDIUM;

typedef struct tagSTGMEDIUM
{
    DWORD tymed;
    union
    {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;

    } u;
    IUnknown *pUnkForRelease;
} uSTGMEDIUM;

typedef struct _GDI_OBJECT
{
    DWORD ObjectType;
    union __MIDL_IAdviseSink_0002
    {
        wireHBITMAP hBitmap;
        wireHPALETTE hPalette;
        wireHGLOBAL hGeneric;
    } u;
} GDI_OBJECT;

typedef struct _userSTGMEDIUM
{
    struct _STGMEDIUM_UNION
    {
        DWORD tymed;
        union __MIDL_IAdviseSink_0003
        {

            wireHMETAFILEPICT hMetaFilePict;
            wireHENHMETAFILE hHEnhMetaFile;
            GDI_OBJECT *hGdiHandle;
            wireHGLOBAL hGlobal;
            LPOLESTR lpszFileName;
            BYTE_BLOB *pstm;
            BYTE_BLOB *pstg;
        } u;
    } u;
    IUnknown *pUnkForRelease;
} userSTGMEDIUM;

typedef userSTGMEDIUM *wireSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
} userFLAG_STGMEDIUM;

typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef struct _FLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
} FLAG_STGMEDIUM;

typedef struct IAdviseSinkVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAdviseSink *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAdviseSink *This);

    ULONG(__stdcall *Release)
    (
        IAdviseSink *This);

    void(__stdcall *OnDataChange)(
        IAdviseSink *This,

        FORMATETC *pFormatetc,

        STGMEDIUM *pStgmed);

    void(__stdcall *OnViewChange)(
        IAdviseSink *This,
        DWORD dwAspect,
        LONG lindex);

    void(__stdcall *OnRename)(
        IAdviseSink *This,

        IMoniker *pmk);

    void(__stdcall *OnSave)(
        IAdviseSink *This);

    void(__stdcall *OnClose)(
        IAdviseSink *This);

} IAdviseSinkVtbl;

struct IAdviseSink
{
    struct IAdviseSinkVtbl *lpVtbl;
};

typedef struct AsyncIAdviseSinkVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        AsyncIAdviseSink *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        AsyncIAdviseSink *This);

    ULONG(__stdcall *Release)
    (
        AsyncIAdviseSink *This);

    void(__stdcall *Begin_OnDataChange)(
        AsyncIAdviseSink *This,

        FORMATETC *pFormatetc,

        STGMEDIUM *pStgmed);

    void(__stdcall *Finish_OnDataChange)(
        AsyncIAdviseSink *This);

    void(__stdcall *Begin_OnViewChange)(
        AsyncIAdviseSink *This,
        DWORD dwAspect,
        LONG lindex);

    void(__stdcall *Finish_OnViewChange)(
        AsyncIAdviseSink *This);

    void(__stdcall *Begin_OnRename)(
        AsyncIAdviseSink *This,

        IMoniker *pmk);

    void(__stdcall *Finish_OnRename)(
        AsyncIAdviseSink *This);

    void(__stdcall *Begin_OnSave)(
        AsyncIAdviseSink *This);

    void(__stdcall *Finish_OnSave)(
        AsyncIAdviseSink *This);

    void(__stdcall *Begin_OnClose)(
        AsyncIAdviseSink *This);

    void(__stdcall *Finish_OnClose)(
        AsyncIAdviseSink *This);

} AsyncIAdviseSinkVtbl;

struct AsyncIAdviseSink
{
    struct AsyncIAdviseSinkVtbl *lpVtbl;
};

typedef IAdviseSink2 *LPADVISESINK2;
typedef struct IAdviseSink2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAdviseSink2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAdviseSink2 *This);

    ULONG(__stdcall *Release)
    (
        IAdviseSink2 *This);

    void(__stdcall *OnDataChange)(
        IAdviseSink2 *This,

        FORMATETC *pFormatetc,

        STGMEDIUM *pStgmed);

    void(__stdcall *OnViewChange)(
        IAdviseSink2 *This,
        DWORD dwAspect,
        LONG lindex);

    void(__stdcall *OnRename)(
        IAdviseSink2 *This,

        IMoniker *pmk);

    void(__stdcall *OnSave)(
        IAdviseSink2 *This);

    void(__stdcall *OnClose)(
        IAdviseSink2 *This);

    void(__stdcall *OnLinkSrcChange)(
        IAdviseSink2 *This,

        IMoniker *pmk);

} IAdviseSink2Vtbl;

struct IAdviseSink2
{
    struct IAdviseSink2Vtbl *lpVtbl;
};
typedef struct AsyncIAdviseSink2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        AsyncIAdviseSink2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        AsyncIAdviseSink2 *This);

    ULONG(__stdcall *Release)
    (
        AsyncIAdviseSink2 *This);

    void(__stdcall *Begin_OnDataChange)(
        AsyncIAdviseSink2 *This,

        FORMATETC *pFormatetc,

        STGMEDIUM *pStgmed);

    void(__stdcall *Finish_OnDataChange)(
        AsyncIAdviseSink2 *This);

    void(__stdcall *Begin_OnViewChange)(
        AsyncIAdviseSink2 *This,
        DWORD dwAspect,
        LONG lindex);

    void(__stdcall *Finish_OnViewChange)(
        AsyncIAdviseSink2 *This);

    void(__stdcall *Begin_OnRename)(
        AsyncIAdviseSink2 *This,

        IMoniker *pmk);

    void(__stdcall *Finish_OnRename)(
        AsyncIAdviseSink2 *This);

    void(__stdcall *Begin_OnSave)(
        AsyncIAdviseSink2 *This);

    void(__stdcall *Finish_OnSave)(
        AsyncIAdviseSink2 *This);

    void(__stdcall *Begin_OnClose)(
        AsyncIAdviseSink2 *This);

    void(__stdcall *Finish_OnClose)(
        AsyncIAdviseSink2 *This);

    void(__stdcall *Begin_OnLinkSrcChange)(
        AsyncIAdviseSink2 *This,

        IMoniker *pmk);

    void(__stdcall *Finish_OnLinkSrcChange)(
        AsyncIAdviseSink2 *This);

} AsyncIAdviseSink2Vtbl;

struct AsyncIAdviseSink2
{
    struct AsyncIAdviseSink2Vtbl *lpVtbl;
};

typedef IDataObject *LPDATAOBJECT;

typedef enum tagDATADIR
{
    DATADIR_GET = 1,
    DATADIR_SET = 2
} DATADIR;

typedef struct IDataObjectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDataObject *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDataObject *This);

    ULONG(__stdcall *Release)
    (
        IDataObject *This);

    HRESULT(__stdcall *GetData)
    (
        IDataObject *This,

        FORMATETC *pformatetcIn,

        STGMEDIUM *pmedium);

    HRESULT(__stdcall *GetDataHere)
    (
        IDataObject *This,

        FORMATETC *pformatetc,

        STGMEDIUM *pmedium);

    HRESULT(__stdcall *QueryGetData)
    (
        IDataObject *This,
        FORMATETC *pformatetc);

    HRESULT(__stdcall *GetCanonicalFormatEtc)
    (
        IDataObject *This,
        FORMATETC *pformatectIn,
        FORMATETC *pformatetcOut);

    HRESULT(__stdcall *SetData)
    (
        IDataObject *This,

        FORMATETC *pformatetc,

        STGMEDIUM *pmedium,
        BOOL fRelease);

    HRESULT(__stdcall *EnumFormatEtc)
    (
        IDataObject *This,
        DWORD dwDirection,
        IEnumFORMATETC **ppenumFormatEtc);

    HRESULT(__stdcall *DAdvise)
    (
        IDataObject *This,
        FORMATETC *pformatetc,
        DWORD advf,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);

    HRESULT(__stdcall *DUnadvise)
    (
        IDataObject *This,
        DWORD dwConnection);

    HRESULT(__stdcall *EnumDAdvise)
    (
        IDataObject *This,
        IEnumSTATDATA **ppenumAdvise);

} IDataObjectVtbl;

struct IDataObject
{
    struct IDataObjectVtbl *lpVtbl;
};

typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
typedef struct IDataAdviseHolderVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDataAdviseHolder *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDataAdviseHolder *This);

    ULONG(__stdcall *Release)
    (
        IDataAdviseHolder *This);

    HRESULT(__stdcall *Advise)
    (
        IDataAdviseHolder *This,

        IDataObject *pDataObject,

        FORMATETC *pFetc,

        DWORD advf,

        IAdviseSink *pAdvise,

        DWORD *pdwConnection);

    HRESULT(__stdcall *Unadvise)
    (
        IDataAdviseHolder *This,

        DWORD dwConnection);

    HRESULT(__stdcall *EnumAdvise)
    (
        IDataAdviseHolder *This,

        IEnumSTATDATA **ppenumAdvise);

    HRESULT(__stdcall *SendOnDataChange)
    (
        IDataAdviseHolder *This,

        IDataObject *pDataObject,

        DWORD dwReserved,

        DWORD advf);

} IDataAdviseHolderVtbl;

struct IDataAdviseHolder
{
    struct IDataAdviseHolderVtbl *lpVtbl;
};
typedef IMessageFilter *LPMESSAGEFILTER;

typedef enum tagCALLTYPE
{
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5
} CALLTYPE;

typedef enum tagSERVERCALL
{
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2
} SERVERCALL;

typedef enum tagPENDINGTYPE
{
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2
} PENDINGTYPE;

typedef enum tagPENDINGMSG
{
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2
} PENDINGMSG;

typedef struct tagINTERFACEINFO
{
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
} INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
typedef struct IMessageFilterVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMessageFilter *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMessageFilter *This);

    ULONG(__stdcall *Release)
    (
        IMessageFilter *This);

    DWORD(__stdcall *HandleInComingCall)
    (
        IMessageFilter *This,

        DWORD dwCallType,

        HTASK htaskCaller,

        DWORD dwTickCount,

        LPINTERFACEINFO lpInterfaceInfo);

    DWORD(__stdcall *RetryRejectedCall)
    (
        IMessageFilter *This,

        HTASK htaskCallee,

        DWORD dwTickCount,

        DWORD dwRejectType);

    DWORD(__stdcall *MessagePending)
    (
        IMessageFilter *This,

        HTASK htaskCallee,

        DWORD dwTickCount,

        DWORD dwPendingType);

} IMessageFilterVtbl;

struct IMessageFilter
{
    struct IMessageFilterVtbl *lpVtbl;
};
typedef struct IClassActivatorVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IClassActivator *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IClassActivator *This);

    ULONG(__stdcall *Release)
    (
        IClassActivator *This);

    HRESULT(__stdcall *GetClassObject)
    (
        IClassActivator *This,
        const IID *const rclsid,
        DWORD dwClassContext,
        LCID locale,
        const IID *const riid,
        void **ppv);

} IClassActivatorVtbl;

struct IClassActivator
{
    struct IClassActivatorVtbl *lpVtbl;
};

typedef struct IFillLockBytesVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IFillLockBytes *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IFillLockBytes *This);

    ULONG(__stdcall *Release)
    (
        IFillLockBytes *This);

    HRESULT(__stdcall *FillAppend)
    (
        IFillLockBytes *This,

        const void *pv,

        ULONG cb,

        ULONG *pcbWritten);

    HRESULT(__stdcall *FillAt)
    (
        IFillLockBytes *This,

        ULARGE_INTEGER ulOffset,

        const void *pv,

        ULONG cb,

        ULONG *pcbWritten);

    HRESULT(__stdcall *SetFillSize)
    (
        IFillLockBytes *This,
        ULARGE_INTEGER ulSize);

    HRESULT(__stdcall *Terminate)
    (
        IFillLockBytes *This,
        BOOL bCanceled);

} IFillLockBytesVtbl;

struct IFillLockBytes
{
    struct IFillLockBytesVtbl *lpVtbl;
};
typedef struct IProgressNotifyVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IProgressNotify *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IProgressNotify *This);

    ULONG(__stdcall *Release)
    (
        IProgressNotify *This);

    HRESULT(__stdcall *OnProgress)
    (
        IProgressNotify *This,
        DWORD dwProgressCurrent,
        DWORD dwProgressMaximum,
        BOOL fAccurate,
        BOOL fOwner);

} IProgressNotifyVtbl;

struct IProgressNotify
{
    struct IProgressNotifyVtbl *lpVtbl;
};

typedef struct tagStorageLayout
{
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
} StorageLayout;

typedef struct ILayoutStorageVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ILayoutStorage *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ILayoutStorage *This);

    ULONG(__stdcall *Release)
    (
        ILayoutStorage *This);

    HRESULT(__stdcall *LayoutScript)
    (
        ILayoutStorage *This,

        StorageLayout *pStorageLayout,

        DWORD nEntries,

        DWORD glfInterleavedFlag);

    HRESULT(__stdcall *BeginMonitor)
    (
        ILayoutStorage *This);

    HRESULT(__stdcall *EndMonitor)
    (
        ILayoutStorage *This);

    HRESULT(__stdcall *ReLayoutDocfile)
    (
        ILayoutStorage *This,

        OLECHAR *pwcsNewDfName);

    HRESULT(__stdcall *ReLayoutDocfileOnILockBytes)
    (
        ILayoutStorage *This,

        ILockBytes *pILockBytes);

} ILayoutStorageVtbl;

struct ILayoutStorage
{
    struct ILayoutStorageVtbl *lpVtbl;
};

typedef struct IBlockingLockVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBlockingLock *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBlockingLock *This);

    ULONG(__stdcall *Release)
    (
        IBlockingLock *This);

    HRESULT(__stdcall *Lock)
    (
        IBlockingLock *This,
        DWORD dwTimeout);

    HRESULT(__stdcall *Unlock)
    (
        IBlockingLock *This);

} IBlockingLockVtbl;

struct IBlockingLock
{
    struct IBlockingLockVtbl *lpVtbl;
};
typedef struct ITimeAndNoticeControlVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITimeAndNoticeControl *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITimeAndNoticeControl *This);

    ULONG(__stdcall *Release)
    (
        ITimeAndNoticeControl *This);

    HRESULT(__stdcall *SuppressChanges)
    (
        ITimeAndNoticeControl *This,
        DWORD res1,
        DWORD res2);

} ITimeAndNoticeControlVtbl;

struct ITimeAndNoticeControl
{
    struct ITimeAndNoticeControlVtbl *lpVtbl;
};
typedef struct IOplockStorageVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOplockStorage *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOplockStorage *This);

    ULONG(__stdcall *Release)
    (
        IOplockStorage *This);

    HRESULT(__stdcall *CreateStorageEx)
    (
        IOplockStorage *This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID *const riid,
        void **ppstgOpen);

    HRESULT(__stdcall *OpenStorageEx)
    (
        IOplockStorage *This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID *const riid,
        void **ppstgOpen);

} IOplockStorageVtbl;

struct IOplockStorage
{
    struct IOplockStorageVtbl *lpVtbl;
};

typedef struct IDirectWriterLockVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDirectWriterLock *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDirectWriterLock *This);

    ULONG(__stdcall *Release)
    (
        IDirectWriterLock *This);

    HRESULT(__stdcall *WaitForWriteAccess)
    (
        IDirectWriterLock *This,
        DWORD dwTimeout);

    HRESULT(__stdcall *ReleaseWriteAccess)
    (
        IDirectWriterLock *This);

    HRESULT(__stdcall *HaveWriteAccess)
    (
        IDirectWriterLock *This);

} IDirectWriterLockVtbl;

struct IDirectWriterLock
{
    struct IDirectWriterLockVtbl *lpVtbl;
};

typedef struct IUrlMonVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IUrlMon *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IUrlMon *This);

    ULONG(__stdcall *Release)
    (
        IUrlMon *This);

    HRESULT(__stdcall *AsyncGetClassBits)
    (
        IUrlMon *This,
        const IID *const rclsid,
        LPCWSTR pszTYPE,
        LPCWSTR pszExt,
        DWORD dwFileVersionMS,
        DWORD dwFileVersionLS,
        LPCWSTR pszCodeBase,
        IBindCtx *pbc,
        DWORD dwClassContext,
        const IID *const riid,
        DWORD flags);

} IUrlMonVtbl;

struct IUrlMon
{
    struct IUrlMonVtbl *lpVtbl;
};
typedef struct IForegroundTransferVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IForegroundTransfer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IForegroundTransfer *This);

    ULONG(__stdcall *Release)
    (
        IForegroundTransfer *This);

    HRESULT(__stdcall *AllowForegroundTransfer)
    (
        IForegroundTransfer *This,

        void *lpvReserved);

} IForegroundTransferVtbl;

struct IForegroundTransfer
{
    struct IForegroundTransferVtbl *lpVtbl;
};

typedef struct IThumbnailExtractorVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IThumbnailExtractor *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IThumbnailExtractor *This);

    ULONG(__stdcall *Release)
    (
        IThumbnailExtractor *This);

    HRESULT(__stdcall *ExtractThumbnail)
    (
        IThumbnailExtractor *This,
        IStorage *pStg,
        ULONG ulLength,
        ULONG ulHeight,
        ULONG *pulOutputLength,
        ULONG *pulOutputHeight,
        HBITMAP *phOutputBitmap);

    HRESULT(__stdcall *OnFileUpdated)
    (
        IThumbnailExtractor *This,
        IStorage *pStg);

} IThumbnailExtractorVtbl;

struct IThumbnailExtractor
{
    struct IThumbnailExtractorVtbl *lpVtbl;
};

typedef struct IDummyHICONIncluderVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDummyHICONIncluder *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDummyHICONIncluder *This);

    ULONG(__stdcall *Release)
    (
        IDummyHICONIncluder *This);

    HRESULT(__stdcall *Dummy)
    (
        IDummyHICONIncluder *This,
        HICON h1,
        HDC h2);

} IDummyHICONIncluderVtbl;

struct IDummyHICONIncluder
{
    struct IDummyHICONIncluderVtbl *lpVtbl;
};
typedef enum tagApplicationType
{
    ServerApplication = 0,
    LibraryApplication = (ServerApplication + 1)
} ApplicationType;

typedef enum tagShutdownType
{
    IdleShutdown = 0,
    ForcedShutdown = (IdleShutdown + 1)
} ShutdownType;

typedef struct IProcessLockVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IProcessLock *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IProcessLock *This);

    ULONG(__stdcall *Release)
    (
        IProcessLock *This);

    ULONG(__stdcall *AddRefOnProcess)
    (
        IProcessLock *This);

    ULONG(__stdcall *ReleaseRefOnProcess)
    (
        IProcessLock *This);

} IProcessLockVtbl;

struct IProcessLock
{
    struct IProcessLockVtbl *lpVtbl;
};

typedef struct ISurrogateServiceVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISurrogateService *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISurrogateService *This);

    ULONG(__stdcall *Release)
    (
        ISurrogateService *This);

    HRESULT(__stdcall *Init)
    (
        ISurrogateService *This,

        const GUID *const rguidProcessID,

        IProcessLock *pProcessLock,

        BOOL *pfApplicationAware);

    HRESULT(__stdcall *ApplicationLaunch)
    (
        ISurrogateService *This,

        const GUID *const rguidApplID,

        ApplicationType appType);

    HRESULT(__stdcall *ApplicationFree)
    (
        ISurrogateService *This,

        const GUID *const rguidApplID);

    HRESULT(__stdcall *CatalogRefresh)
    (
        ISurrogateService *This,

        ULONG ulReserved);

    HRESULT(__stdcall *ProcessShutdown)
    (
        ISurrogateService *This,

        ShutdownType shutdownType);

} ISurrogateServiceVtbl;

struct ISurrogateService
{
    struct ISurrogateServiceVtbl *lpVtbl;
};

typedef IInitializeSpy *LPINITIALIZESPY;

typedef struct IInitializeSpyVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInitializeSpy *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInitializeSpy *This);

    ULONG(__stdcall *Release)
    (
        IInitializeSpy *This);

    HRESULT(__stdcall *PreInitialize)
    (
        IInitializeSpy *This,

        DWORD dwCoInit,

        DWORD dwCurThreadAptRefs);

    HRESULT(__stdcall *PostInitialize)
    (
        IInitializeSpy *This,

        HRESULT hrCoInit,

        DWORD dwCoInit,

        DWORD dwNewThreadAptRefs);

    HRESULT(__stdcall *PreUninitialize)
    (
        IInitializeSpy *This,

        DWORD dwCurThreadAptRefs);

    HRESULT(__stdcall *PostUninitialize)
    (
        IInitializeSpy *This,

        DWORD dwNewThreadAptRefs);

} IInitializeSpyVtbl;

struct IInitializeSpy
{
    struct IInitializeSpyVtbl *lpVtbl;
};

typedef struct IApartmentShutdownVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IApartmentShutdown *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IApartmentShutdown *This);

    ULONG(__stdcall *Release)
    (
        IApartmentShutdown *This);

    void(__stdcall *OnUninitialize)(
        IApartmentShutdown *This,

        UINT64 ui64ApartmentIdentifier);

} IApartmentShutdownVtbl;

struct IApartmentShutdown
{
    struct IApartmentShutdownVtbl *lpVtbl;
};

typedef struct IPropertyStorage IPropertyStorage;

typedef struct IPropertySetStorage IPropertySetStorage;

typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;

typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
typedef struct ICreateTypeInfo ICreateTypeInfo;

typedef struct ICreateTypeInfo2 ICreateTypeInfo2;

typedef struct ICreateTypeLib ICreateTypeLib;

typedef struct ICreateTypeLib2 ICreateTypeLib2;

typedef struct IDispatch IDispatch;

typedef struct IEnumVARIANT IEnumVARIANT;

typedef struct ITypeComp ITypeComp;

typedef struct ITypeInfo ITypeInfo;

typedef struct ITypeInfo2 ITypeInfo2;

typedef struct ITypeLib ITypeLib;

typedef struct ITypeLib2 ITypeLib2;

typedef struct ITypeChangeEvents ITypeChangeEvents;

typedef struct IErrorInfo IErrorInfo;

typedef struct ICreateErrorInfo ICreateErrorInfo;

typedef struct ISupportErrorInfo ISupportErrorInfo;

typedef struct ITypeFactory ITypeFactory;

typedef struct ITypeMarshal ITypeMarshal;

typedef struct IRecordInfo IRecordInfo;

typedef struct IErrorLog IErrorLog;

typedef struct IPropertyBag IPropertyBag;

typedef struct ITypeLibRegistrationReader ITypeLibRegistrationReader;

typedef struct ITypeLibRegistration ITypeLibRegistration;

typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
{
    ULONG cElements;
    LONG lLbound;
} SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;

typedef struct _wireVARIANT *wireVARIANT;

typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
{
    ULONG Size;
    wireBSTR *aBstr;
} SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
{
    ULONG Size;
    IUnknown **apUnknown;
} SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
{
    ULONG Size;
    IDispatch **apDispatch;
} SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
{
    ULONG Size;
    wireVARIANT *aVariant;
} SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
{
    ULONG Size;
    wireBRECORD *aRecord;
} SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
{
    ULONG Size;
    IUnknown **apUnknown;
    IID iid;
} SAFEARR_HAVEIID;

typedef enum tagSF_TYPE
{
    SF_ERROR = VT_ERROR,
    SF_I1 = VT_I1,
    SF_I2 = VT_I2,
    SF_I4 = VT_I4,
    SF_I8 = VT_I8,
    SF_BSTR = VT_BSTR,
    SF_UNKNOWN = VT_UNKNOWN,
    SF_DISPATCH = VT_DISPATCH,
    SF_VARIANT = VT_VARIANT,
    SF_RECORD = VT_RECORD,
    SF_HAVEIID = (VT_UNKNOWN | VT_RESERVED)
} SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
{
    ULONG sfType;
    union __MIDL_IOleAutomationTypes_0001
    {
        SAFEARR_BSTR BstrStr;
        SAFEARR_UNKNOWN UnknownStr;
        SAFEARR_DISPATCH DispatchStr;
        SAFEARR_VARIANT VariantStr;
        SAFEARR_BRECORD RecordStr;
        SAFEARR_HAVEIID HaveIidStr;
        BYTE_SIZEDARR ByteStr;
        WORD_SIZEDARR WordStr;
        DWORD_SIZEDARR LongStr;
        HYPER_SIZEDARR HyperStr;
    } u;
} SAFEARRAYUNION;

typedef struct _wireSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND rgsabound[1];
} * wireSAFEARRAY;

typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[1];
} SAFEARRAY;

typedef SAFEARRAY *LPSAFEARRAY;
typedef struct tagVARIANT VARIANT;

struct tagVARIANT
{
    union
    {
        struct __tagVARIANT
        {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union
            {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                VARIANT_BOOL __OBSOLETE__VARIANT_BOOL;
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                VARIANT_BOOL *__OBSOLETE__VARIANT_PBOOL;
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct __tagBRECORD
                {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                } brecVal;
            } n3;
        } n2;
        DECIMAL decVal;
    } n1;
};
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;
struct _wireBRECORD
{
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
    byte *pRecord;
};
struct _wireVARIANT
{
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    union
    {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        wireBSTR bstrVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        wirePSAFEARRAY parray;
        wireBRECORD brecVal;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        LONGLONG *pllVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        wireBSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        wirePSAFEARRAY *pparray;
        wireVARIANT *pvarVal;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL decVal;
        DECIMAL *pdecVal;
        CHAR *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        ULONGLONG *pullVal;
        INT *pintVal;
        UINT *puintVal;

    } u;
};
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef enum tagTYPEKIND
{
    TKIND_ENUM = 0,
    TKIND_RECORD = (TKIND_ENUM + 1),
    TKIND_MODULE = (TKIND_RECORD + 1),
    TKIND_INTERFACE = (TKIND_MODULE + 1),
    TKIND_DISPATCH = (TKIND_INTERFACE + 1),
    TKIND_COCLASS = (TKIND_DISPATCH + 1),
    TKIND_ALIAS = (TKIND_COCLASS + 1),
    TKIND_UNION = (TKIND_ALIAS + 1),
    TKIND_MAX = (TKIND_UNION + 1)
} TYPEKIND;

typedef struct tagTYPEDESC
{
    union
    {
        struct tagTYPEDESC *lptdesc;
        struct tagARRAYDESC *lpadesc;
        HREFTYPE hreftype;

    } u;
    VARTYPE vt;
} TYPEDESC;

typedef struct tagARRAYDESC
{
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND rgbounds[1];
} ARRAYDESC;

typedef struct tagPARAMDESCEX
{
    ULONG cBytes;
    VARIANTARG varDefaultValue;
} PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
{
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
} PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct tagIDLDESC
{
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
} IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;
typedef struct tagELEMDESC
{
    TYPEDESC tdesc;
    union
    {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    } u;
} ELEMDESC, *LPELEMDESC;

typedef struct tagTYPEATTR
{
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
} TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
{
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
} DISPPARAMS;
typedef struct tagEXCEPINFO
{
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT(__stdcall *pfnDeferredFillIn)
    (struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, *LPEXCEPINFO;

typedef enum tagCALLCONV
{
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = (CC_CDECL + 1),
    CC_PASCAL = CC_MSCPASCAL,
    CC_MACPASCAL = (CC_PASCAL + 1),
    CC_STDCALL = (CC_MACPASCAL + 1),
    CC_FPFASTCALL = (CC_STDCALL + 1),
    CC_SYSCALL = (CC_FPFASTCALL + 1),
    CC_MPWCDECL = (CC_SYSCALL + 1),
    CC_MPWPASCAL = (CC_MPWCDECL + 1),
    CC_MAX = (CC_MPWPASCAL + 1)
} CALLCONV;

typedef enum tagFUNCKIND
{
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = (FUNC_VIRTUAL + 1),
    FUNC_NONVIRTUAL = (FUNC_PUREVIRTUAL + 1),
    FUNC_STATIC = (FUNC_NONVIRTUAL + 1),
    FUNC_DISPATCH = (FUNC_STATIC + 1)
} FUNCKIND;

typedef enum tagINVOKEKIND
{
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8
} INVOKEKIND;

typedef struct tagFUNCDESC
{
    MEMBERID memid;
    SCODE *lprgscode;
    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
} FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef enum tagVARKIND
{
    VAR_PERINSTANCE = 0,
    VAR_STATIC = (VAR_PERINSTANCE + 1),
    VAR_CONST = (VAR_STATIC + 1),
    VAR_DISPATCH = (VAR_CONST + 1)
} VARKIND;

typedef struct tagVARDESC
{
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    union
    {
        ULONG oInst;
        VARIANT *lpvarValue;
    } u;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
} VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef enum tagTYPEFLAGS
{
    TYPEFLAG_FAPPOBJECT = 0x1,
    TYPEFLAG_FCANCREATE = 0x2,
    TYPEFLAG_FLICENSED = 0x4,
    TYPEFLAG_FPREDECLID = 0x8,
    TYPEFLAG_FHIDDEN = 0x10,
    TYPEFLAG_FCONTROL = 0x20,
    TYPEFLAG_FDUAL = 0x40,
    TYPEFLAG_FNONEXTENSIBLE = 0x80,
    TYPEFLAG_FOLEAUTOMATION = 0x100,
    TYPEFLAG_FRESTRICTED = 0x200,
    TYPEFLAG_FAGGREGATABLE = 0x400,
    TYPEFLAG_FREPLACEABLE = 0x800,
    TYPEFLAG_FDISPATCHABLE = 0x1000,
    TYPEFLAG_FREVERSEBIND = 0x2000,
    TYPEFLAG_FPROXY = 0x4000
} TYPEFLAGS;

typedef enum tagFUNCFLAGS
{
    FUNCFLAG_FRESTRICTED = 0x1,
    FUNCFLAG_FSOURCE = 0x2,
    FUNCFLAG_FBINDABLE = 0x4,
    FUNCFLAG_FREQUESTEDIT = 0x8,
    FUNCFLAG_FDISPLAYBIND = 0x10,
    FUNCFLAG_FDEFAULTBIND = 0x20,
    FUNCFLAG_FHIDDEN = 0x40,
    FUNCFLAG_FUSESGETLASTERROR = 0x80,
    FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
    FUNCFLAG_FUIDEFAULT = 0x200,
    FUNCFLAG_FNONBROWSABLE = 0x400,
    FUNCFLAG_FREPLACEABLE = 0x800,
    FUNCFLAG_FIMMEDIATEBIND = 0x1000
} FUNCFLAGS;

typedef enum tagVARFLAGS
{
    VARFLAG_FREADONLY = 0x1,
    VARFLAG_FSOURCE = 0x2,
    VARFLAG_FBINDABLE = 0x4,
    VARFLAG_FREQUESTEDIT = 0x8,
    VARFLAG_FDISPLAYBIND = 0x10,
    VARFLAG_FDEFAULTBIND = 0x20,
    VARFLAG_FHIDDEN = 0x40,
    VARFLAG_FRESTRICTED = 0x80,
    VARFLAG_FDEFAULTCOLLELEM = 0x100,
    VARFLAG_FUIDEFAULT = 0x200,
    VARFLAG_FNONBROWSABLE = 0x400,
    VARFLAG_FREPLACEABLE = 0x800,
    VARFLAG_FIMMEDIATEBIND = 0x1000
} VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE
{
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
} CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
{
    GUID guid;
    VARIANTARG varValue;
} CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
{
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
} CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;

typedef ICreateTypeInfo *LPCREATETYPEINFO;
typedef struct ICreateTypeInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICreateTypeInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICreateTypeInfo *This);

    ULONG(__stdcall *Release)
    (
        ICreateTypeInfo *This);

    HRESULT(__stdcall *SetGuid)
    (
        ICreateTypeInfo *This,
        const GUID *const guid);

    HRESULT(__stdcall *SetTypeFlags)
    (
        ICreateTypeInfo *This,
        UINT uTypeFlags);

    HRESULT(__stdcall *SetDocString)
    (
        ICreateTypeInfo *This,

        LPOLESTR pStrDoc);

    HRESULT(__stdcall *SetHelpContext)
    (
        ICreateTypeInfo *This,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetVersion)
    (
        ICreateTypeInfo *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT(__stdcall *AddRefTypeInfo)
    (
        ICreateTypeInfo *This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);

    HRESULT(__stdcall *AddFuncDesc)
    (
        ICreateTypeInfo *This,
        UINT index,
        FUNCDESC *pFuncDesc);

    HRESULT(__stdcall *AddImplType)
    (
        ICreateTypeInfo *This,
        UINT index,
        HREFTYPE hRefType);

    HRESULT(__stdcall *SetImplTypeFlags)
    (
        ICreateTypeInfo *This,
        UINT index,
        INT implTypeFlags);

    HRESULT(__stdcall *SetAlignment)
    (
        ICreateTypeInfo *This,
        WORD cbAlignment);

    HRESULT(__stdcall *SetSchema)
    (
        ICreateTypeInfo *This,

        LPOLESTR pStrSchema);

    HRESULT(__stdcall *AddVarDesc)
    (
        ICreateTypeInfo *This,
        UINT index,
        VARDESC *pVarDesc);

    HRESULT(__stdcall *SetFuncAndParamNames)
    (
        ICreateTypeInfo *This,
        UINT index,

        LPOLESTR *rgszNames,
        UINT cNames);

    HRESULT(__stdcall *SetVarName)
    (
        ICreateTypeInfo *This,
        UINT index,

        LPOLESTR szName);

    HRESULT(__stdcall *SetTypeDescAlias)
    (
        ICreateTypeInfo *This,
        TYPEDESC *pTDescAlias);

    HRESULT(__stdcall *DefineFuncAsDllEntry)
    (
        ICreateTypeInfo *This,
        UINT index,

        LPOLESTR szDllName,

        LPOLESTR szProcName);

    HRESULT(__stdcall *SetFuncDocString)
    (
        ICreateTypeInfo *This,
        UINT index,

        LPOLESTR szDocString);

    HRESULT(__stdcall *SetVarDocString)
    (
        ICreateTypeInfo *This,
        UINT index,

        LPOLESTR szDocString);

    HRESULT(__stdcall *SetFuncHelpContext)
    (
        ICreateTypeInfo *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetVarHelpContext)
    (
        ICreateTypeInfo *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetMops)
    (
        ICreateTypeInfo *This,
        UINT index,

        BSTR bstrMops);

    HRESULT(__stdcall *SetTypeIdldesc)
    (
        ICreateTypeInfo *This,
        IDLDESC *pIdlDesc);

    HRESULT(__stdcall *LayOut)
    (
        ICreateTypeInfo *This);

} ICreateTypeInfoVtbl;

struct ICreateTypeInfo
{
    struct ICreateTypeInfoVtbl *lpVtbl;
};
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;

typedef struct ICreateTypeInfo2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICreateTypeInfo2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICreateTypeInfo2 *This);

    ULONG(__stdcall *Release)
    (
        ICreateTypeInfo2 *This);

    HRESULT(__stdcall *SetGuid)
    (
        ICreateTypeInfo2 *This,
        const GUID *const guid);

    HRESULT(__stdcall *SetTypeFlags)
    (
        ICreateTypeInfo2 *This,
        UINT uTypeFlags);

    HRESULT(__stdcall *SetDocString)
    (
        ICreateTypeInfo2 *This,

        LPOLESTR pStrDoc);

    HRESULT(__stdcall *SetHelpContext)
    (
        ICreateTypeInfo2 *This,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetVersion)
    (
        ICreateTypeInfo2 *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT(__stdcall *AddRefTypeInfo)
    (
        ICreateTypeInfo2 *This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);

    HRESULT(__stdcall *AddFuncDesc)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        FUNCDESC *pFuncDesc);

    HRESULT(__stdcall *AddImplType)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        HREFTYPE hRefType);

    HRESULT(__stdcall *SetImplTypeFlags)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        INT implTypeFlags);

    HRESULT(__stdcall *SetAlignment)
    (
        ICreateTypeInfo2 *This,
        WORD cbAlignment);

    HRESULT(__stdcall *SetSchema)
    (
        ICreateTypeInfo2 *This,

        LPOLESTR pStrSchema);

    HRESULT(__stdcall *AddVarDesc)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        VARDESC *pVarDesc);

    HRESULT(__stdcall *SetFuncAndParamNames)
    (
        ICreateTypeInfo2 *This,
        UINT index,

        LPOLESTR *rgszNames,
        UINT cNames);

    HRESULT(__stdcall *SetVarName)
    (
        ICreateTypeInfo2 *This,
        UINT index,

        LPOLESTR szName);

    HRESULT(__stdcall *SetTypeDescAlias)
    (
        ICreateTypeInfo2 *This,
        TYPEDESC *pTDescAlias);

    HRESULT(__stdcall *DefineFuncAsDllEntry)
    (
        ICreateTypeInfo2 *This,
        UINT index,

        LPOLESTR szDllName,

        LPOLESTR szProcName);

    HRESULT(__stdcall *SetFuncDocString)
    (
        ICreateTypeInfo2 *This,
        UINT index,

        LPOLESTR szDocString);

    HRESULT(__stdcall *SetVarDocString)
    (
        ICreateTypeInfo2 *This,
        UINT index,

        LPOLESTR szDocString);

    HRESULT(__stdcall *SetFuncHelpContext)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetVarHelpContext)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetMops)
    (
        ICreateTypeInfo2 *This,
        UINT index,

        BSTR bstrMops);

    HRESULT(__stdcall *SetTypeIdldesc)
    (
        ICreateTypeInfo2 *This,
        IDLDESC *pIdlDesc);

    HRESULT(__stdcall *LayOut)
    (
        ICreateTypeInfo2 *This);

    HRESULT(__stdcall *DeleteFuncDesc)
    (
        ICreateTypeInfo2 *This,
        UINT index);

    HRESULT(__stdcall *DeleteFuncDescByMemId)
    (
        ICreateTypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind);

    HRESULT(__stdcall *DeleteVarDesc)
    (
        ICreateTypeInfo2 *This,
        UINT index);

    HRESULT(__stdcall *DeleteVarDescByMemId)
    (
        ICreateTypeInfo2 *This,
        MEMBERID memid);

    HRESULT(__stdcall *DeleteImplType)
    (
        ICreateTypeInfo2 *This,
        UINT index);

    HRESULT(__stdcall *SetCustData)
    (
        ICreateTypeInfo2 *This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *SetFuncCustData)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *SetParamCustData)
    (
        ICreateTypeInfo2 *This,
        UINT indexFunc,
        UINT indexParam,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *SetVarCustData)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *SetImplTypeCustData)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *SetHelpStringContext)
    (
        ICreateTypeInfo2 *This,
        ULONG dwHelpStringContext);

    HRESULT(__stdcall *SetFuncHelpStringContext)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        ULONG dwHelpStringContext);

    HRESULT(__stdcall *SetVarHelpStringContext)
    (
        ICreateTypeInfo2 *This,
        UINT index,
        ULONG dwHelpStringContext);

    HRESULT(__stdcall *Invalidate)
    (
        ICreateTypeInfo2 *This);

    HRESULT(__stdcall *SetName)
    (
        ICreateTypeInfo2 *This,

        LPOLESTR szName);

} ICreateTypeInfo2Vtbl;

struct ICreateTypeInfo2
{
    struct ICreateTypeInfo2Vtbl *lpVtbl;
};
typedef ICreateTypeLib *LPCREATETYPELIB;
typedef struct ICreateTypeLibVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICreateTypeLib *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICreateTypeLib *This);

    ULONG(__stdcall *Release)
    (
        ICreateTypeLib *This);

    HRESULT(__stdcall *CreateTypeInfo)
    (
        ICreateTypeLib *This,

        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);

    HRESULT(__stdcall *SetName)
    (
        ICreateTypeLib *This,

        LPOLESTR szName);

    HRESULT(__stdcall *SetVersion)
    (
        ICreateTypeLib *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT(__stdcall *SetGuid)
    (
        ICreateTypeLib *This,
        const GUID *const guid);

    HRESULT(__stdcall *SetDocString)
    (
        ICreateTypeLib *This,

        LPOLESTR szDoc);

    HRESULT(__stdcall *SetHelpFileName)
    (
        ICreateTypeLib *This,

        LPOLESTR szHelpFileName);

    HRESULT(__stdcall *SetHelpContext)
    (
        ICreateTypeLib *This,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetLcid)
    (
        ICreateTypeLib *This,
        LCID lcid);

    HRESULT(__stdcall *SetLibFlags)
    (
        ICreateTypeLib *This,
        UINT uLibFlags);

    HRESULT(__stdcall *SaveAllChanges)
    (
        ICreateTypeLib *This);

} ICreateTypeLibVtbl;

struct ICreateTypeLib
{
    struct ICreateTypeLibVtbl *lpVtbl;
};
typedef ICreateTypeLib2 *LPCREATETYPELIB2;
typedef struct ICreateTypeLib2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICreateTypeLib2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICreateTypeLib2 *This);

    ULONG(__stdcall *Release)
    (
        ICreateTypeLib2 *This);

    HRESULT(__stdcall *CreateTypeInfo)
    (
        ICreateTypeLib2 *This,

        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);

    HRESULT(__stdcall *SetName)
    (
        ICreateTypeLib2 *This,

        LPOLESTR szName);

    HRESULT(__stdcall *SetVersion)
    (
        ICreateTypeLib2 *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT(__stdcall *SetGuid)
    (
        ICreateTypeLib2 *This,
        const GUID *const guid);

    HRESULT(__stdcall *SetDocString)
    (
        ICreateTypeLib2 *This,

        LPOLESTR szDoc);

    HRESULT(__stdcall *SetHelpFileName)
    (
        ICreateTypeLib2 *This,

        LPOLESTR szHelpFileName);

    HRESULT(__stdcall *SetHelpContext)
    (
        ICreateTypeLib2 *This,
        DWORD dwHelpContext);

    HRESULT(__stdcall *SetLcid)
    (
        ICreateTypeLib2 *This,
        LCID lcid);

    HRESULT(__stdcall *SetLibFlags)
    (
        ICreateTypeLib2 *This,
        UINT uLibFlags);

    HRESULT(__stdcall *SaveAllChanges)
    (
        ICreateTypeLib2 *This);

    HRESULT(__stdcall *DeleteTypeInfo)
    (
        ICreateTypeLib2 *This,

        LPOLESTR szName);

    HRESULT(__stdcall *SetCustData)
    (
        ICreateTypeLib2 *This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *SetHelpStringContext)
    (
        ICreateTypeLib2 *This,
        ULONG dwHelpStringContext);

    HRESULT(__stdcall *SetHelpStringDll)
    (
        ICreateTypeLib2 *This,

        LPOLESTR szFileName);

} ICreateTypeLib2Vtbl;

struct ICreateTypeLib2
{
    struct ICreateTypeLib2Vtbl *lpVtbl;
};

typedef IDispatch *LPDISPATCH;
typedef struct IDispatchVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDispatch *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDispatch *This);

    ULONG(__stdcall *Release)
    (
        IDispatch *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IDispatch *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IDispatch *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IDispatch *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IDispatch *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

} IDispatchVtbl;

struct IDispatch
{
    struct IDispatchVtbl *lpVtbl;
};

typedef IEnumVARIANT *LPENUMVARIANT;
typedef struct IEnumVARIANTVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumVARIANT *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumVARIANT *This);

    ULONG(__stdcall *Release)
    (
        IEnumVARIANT *This);

    HRESULT(__stdcall *Next)
    (
        IEnumVARIANT *This,
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumVARIANT *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumVARIANT *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumVARIANT *This,
        IEnumVARIANT **ppEnum);

} IEnumVARIANTVtbl;

struct IEnumVARIANT
{
    struct IEnumVARIANTVtbl *lpVtbl;
};
typedef ITypeComp *LPTYPECOMP;

typedef enum tagDESCKIND
{
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = (DESCKIND_NONE + 1),
    DESCKIND_VARDESC = (DESCKIND_FUNCDESC + 1),
    DESCKIND_TYPECOMP = (DESCKIND_VARDESC + 1),
    DESCKIND_IMPLICITAPPOBJ = (DESCKIND_TYPECOMP + 1),
    DESCKIND_MAX = (DESCKIND_IMPLICITAPPOBJ + 1)
} DESCKIND;

typedef union tagBINDPTR
{
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
} BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;
typedef struct ITypeCompVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeComp *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeComp *This);

    ULONG(__stdcall *Release)
    (
        ITypeComp *This);

    HRESULT(__stdcall *Bind)
    (
        ITypeComp *This,

        LPOLESTR szName,
        ULONG lHashVal,
        WORD wFlags,
        ITypeInfo **ppTInfo,
        DESCKIND *pDescKind,
        BINDPTR *pBindPtr);

    HRESULT(__stdcall *BindType)
    (
        ITypeComp *This,

        LPOLESTR szName,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        ITypeComp **ppTComp);

} ITypeCompVtbl;

struct ITypeComp
{
    struct ITypeCompVtbl *lpVtbl;
};

typedef ITypeInfo *LPTYPEINFO;
typedef struct ITypeInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeInfo *This);

    ULONG(__stdcall *Release)
    (
        ITypeInfo *This);

    HRESULT(__stdcall *GetTypeAttr)
    (
        ITypeInfo *This,
        TYPEATTR **ppTypeAttr);

    HRESULT(__stdcall *GetTypeComp)
    (
        ITypeInfo *This,
        ITypeComp **ppTComp);

    HRESULT(__stdcall *GetFuncDesc)
    (
        ITypeInfo *This,
        UINT index,
        FUNCDESC **ppFuncDesc);

    HRESULT(__stdcall *GetVarDesc)
    (
        ITypeInfo *This,
        UINT index,
        VARDESC **ppVarDesc);

    HRESULT(__stdcall *GetNames)
    (
        ITypeInfo *This,
        MEMBERID memid,

        BSTR *rgBstrNames,
        UINT cMaxNames,

        UINT *pcNames);

    HRESULT(__stdcall *GetRefTypeOfImplType)
    (
        ITypeInfo *This,
        UINT index,
        HREFTYPE *pRefType);

    HRESULT(__stdcall *GetImplTypeFlags)
    (
        ITypeInfo *This,
        UINT index,
        INT *pImplTypeFlags);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        ITypeInfo *This,

        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);

    HRESULT(__stdcall *Invoke)
    (
        ITypeInfo *This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    HRESULT(__stdcall *GetDocumentation)
    (
        ITypeInfo *This,
        MEMBERID memid,

        BSTR *pBstrName,

        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,

        BSTR *pBstrHelpFile);

    HRESULT(__stdcall *GetDllEntry)
    (
        ITypeInfo *This,
        MEMBERID memid,
        INVOKEKIND invKind,

        BSTR *pBstrDllName,

        BSTR *pBstrName,
        WORD *pwOrdinal);

    HRESULT(__stdcall *GetRefTypeInfo)
    (
        ITypeInfo *This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *AddressOfMember)
    (
        ITypeInfo *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);

    HRESULT(__stdcall *CreateInstance)
    (
        ITypeInfo *This,
        IUnknown *pUnkOuter,
        const IID *const riid,
        PVOID *ppvObj);

    HRESULT(__stdcall *GetMops)
    (
        ITypeInfo *This,
        MEMBERID memid,
        BSTR *pBstrMops);

    HRESULT(__stdcall *GetContainingTypeLib)
    (
        ITypeInfo *This,
        ITypeLib **ppTLib,
        UINT *pIndex);

    void(__stdcall *ReleaseTypeAttr)(
        ITypeInfo *This,
        TYPEATTR *pTypeAttr);

    void(__stdcall *ReleaseFuncDesc)(
        ITypeInfo *This,
        FUNCDESC *pFuncDesc);

    void(__stdcall *ReleaseVarDesc)(
        ITypeInfo *This,
        VARDESC *pVarDesc);

} ITypeInfoVtbl;

struct ITypeInfo
{
    struct ITypeInfoVtbl *lpVtbl;
};

typedef ITypeInfo2 *LPTYPEINFO2;

typedef struct ITypeInfo2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeInfo2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeInfo2 *This);

    ULONG(__stdcall *Release)
    (
        ITypeInfo2 *This);

    HRESULT(__stdcall *GetTypeAttr)
    (
        ITypeInfo2 *This,
        TYPEATTR **ppTypeAttr);

    HRESULT(__stdcall *GetTypeComp)
    (
        ITypeInfo2 *This,
        ITypeComp **ppTComp);

    HRESULT(__stdcall *GetFuncDesc)
    (
        ITypeInfo2 *This,
        UINT index,
        FUNCDESC **ppFuncDesc);

    HRESULT(__stdcall *GetVarDesc)
    (
        ITypeInfo2 *This,
        UINT index,
        VARDESC **ppVarDesc);

    HRESULT(__stdcall *GetNames)
    (
        ITypeInfo2 *This,
        MEMBERID memid,

        BSTR *rgBstrNames,
        UINT cMaxNames,

        UINT *pcNames);

    HRESULT(__stdcall *GetRefTypeOfImplType)
    (
        ITypeInfo2 *This,
        UINT index,
        HREFTYPE *pRefType);

    HRESULT(__stdcall *GetImplTypeFlags)
    (
        ITypeInfo2 *This,
        UINT index,
        INT *pImplTypeFlags);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        ITypeInfo2 *This,

        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);

    HRESULT(__stdcall *Invoke)
    (
        ITypeInfo2 *This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    HRESULT(__stdcall *GetDocumentation)
    (
        ITypeInfo2 *This,
        MEMBERID memid,

        BSTR *pBstrName,

        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,

        BSTR *pBstrHelpFile);

    HRESULT(__stdcall *GetDllEntry)
    (
        ITypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind,

        BSTR *pBstrDllName,

        BSTR *pBstrName,
        WORD *pwOrdinal);

    HRESULT(__stdcall *GetRefTypeInfo)
    (
        ITypeInfo2 *This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *AddressOfMember)
    (
        ITypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);

    HRESULT(__stdcall *CreateInstance)
    (
        ITypeInfo2 *This,
        IUnknown *pUnkOuter,
        const IID *const riid,
        PVOID *ppvObj);

    HRESULT(__stdcall *GetMops)
    (
        ITypeInfo2 *This,
        MEMBERID memid,
        BSTR *pBstrMops);

    HRESULT(__stdcall *GetContainingTypeLib)
    (
        ITypeInfo2 *This,
        ITypeLib **ppTLib,
        UINT *pIndex);

    void(__stdcall *ReleaseTypeAttr)(
        ITypeInfo2 *This,
        TYPEATTR *pTypeAttr);

    void(__stdcall *ReleaseFuncDesc)(
        ITypeInfo2 *This,
        FUNCDESC *pFuncDesc);

    void(__stdcall *ReleaseVarDesc)(
        ITypeInfo2 *This,
        VARDESC *pVarDesc);

    HRESULT(__stdcall *GetTypeKind)
    (
        ITypeInfo2 *This,
        TYPEKIND *pTypeKind);

    HRESULT(__stdcall *GetTypeFlags)
    (
        ITypeInfo2 *This,
        ULONG *pTypeFlags);

    HRESULT(__stdcall *GetFuncIndexOfMemId)
    (
        ITypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        UINT *pFuncIndex);

    HRESULT(__stdcall *GetVarIndexOfMemId)
    (
        ITypeInfo2 *This,
        MEMBERID memid,
        UINT *pVarIndex);

    HRESULT(__stdcall *GetCustData)
    (
        ITypeInfo2 *This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *GetFuncCustData)
    (
        ITypeInfo2 *This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *GetParamCustData)
    (
        ITypeInfo2 *This,
        UINT indexFunc,
        UINT indexParam,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *GetVarCustData)
    (
        ITypeInfo2 *This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *GetImplTypeCustData)
    (
        ITypeInfo2 *This,
        UINT index,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *GetDocumentation2)
    (
        ITypeInfo2 *This,
        MEMBERID memid,
        LCID lcid,

        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,

        BSTR *pbstrHelpStringDll);

    HRESULT(__stdcall *GetAllCustData)
    (
        ITypeInfo2 *This,
        CUSTDATA *pCustData);

    HRESULT(__stdcall *GetAllFuncCustData)
    (
        ITypeInfo2 *This,
        UINT index,
        CUSTDATA *pCustData);

    HRESULT(__stdcall *GetAllParamCustData)
    (
        ITypeInfo2 *This,
        UINT indexFunc,
        UINT indexParam,
        CUSTDATA *pCustData);

    HRESULT(__stdcall *GetAllVarCustData)
    (
        ITypeInfo2 *This,
        UINT index,
        CUSTDATA *pCustData);

    HRESULT(__stdcall *GetAllImplTypeCustData)
    (
        ITypeInfo2 *This,
        UINT index,
        CUSTDATA *pCustData);

} ITypeInfo2Vtbl;

struct ITypeInfo2
{
    struct ITypeInfo2Vtbl *lpVtbl;
};

typedef enum tagSYSKIND
{
    SYS_WIN16 = 0,
    SYS_WIN32 = (SYS_WIN16 + 1),
    SYS_MAC = (SYS_WIN32 + 1),
    SYS_WIN64 = (SYS_MAC + 1)
} SYSKIND;

typedef enum tagLIBFLAGS
{
    LIBFLAG_FRESTRICTED = 0x1,
    LIBFLAG_FCONTROL = 0x2,
    LIBFLAG_FHIDDEN = 0x4,
    LIBFLAG_FHASDISKIMAGE = 0x8
} LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
{
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
} TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;

typedef struct ITypeLibVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeLib *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeLib *This);

    ULONG(__stdcall *Release)
    (
        ITypeLib *This);

    UINT(__stdcall *GetTypeInfoCount)
    (
        ITypeLib *This);

    HRESULT(__stdcall *GetTypeInfo)
    (
        ITypeLib *This,
        UINT index,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetTypeInfoType)
    (
        ITypeLib *This,
        UINT index,
        TYPEKIND *pTKind);

    HRESULT(__stdcall *GetTypeInfoOfGuid)
    (
        ITypeLib *This,
        const GUID *const guid,
        ITypeInfo **ppTinfo);

    HRESULT(__stdcall *GetLibAttr)
    (
        ITypeLib *This,
        TLIBATTR **ppTLibAttr);

    HRESULT(__stdcall *GetTypeComp)
    (
        ITypeLib *This,
        ITypeComp **ppTComp);

    HRESULT(__stdcall *GetDocumentation)
    (
        ITypeLib *This,
        INT index,

        BSTR *pBstrName,

        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,

        BSTR *pBstrHelpFile);

    HRESULT(__stdcall *IsName)
    (
        ITypeLib *This,

        LPOLESTR szNameBuf,
        ULONG lHashVal,
        BOOL *pfName);

    HRESULT(__stdcall *FindName)
    (
        ITypeLib *This,

        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);

    void(__stdcall *ReleaseTLibAttr)(
        ITypeLib *This,
        TLIBATTR *pTLibAttr);

} ITypeLibVtbl;

struct ITypeLib
{
    struct ITypeLibVtbl *lpVtbl;
};

typedef ITypeLib2 *LPTYPELIB2;
typedef struct ITypeLib2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeLib2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeLib2 *This);

    ULONG(__stdcall *Release)
    (
        ITypeLib2 *This);

    UINT(__stdcall *GetTypeInfoCount)
    (
        ITypeLib2 *This);

    HRESULT(__stdcall *GetTypeInfo)
    (
        ITypeLib2 *This,
        UINT index,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetTypeInfoType)
    (
        ITypeLib2 *This,
        UINT index,
        TYPEKIND *pTKind);

    HRESULT(__stdcall *GetTypeInfoOfGuid)
    (
        ITypeLib2 *This,
        const GUID *const guid,
        ITypeInfo **ppTinfo);

    HRESULT(__stdcall *GetLibAttr)
    (
        ITypeLib2 *This,
        TLIBATTR **ppTLibAttr);

    HRESULT(__stdcall *GetTypeComp)
    (
        ITypeLib2 *This,
        ITypeComp **ppTComp);

    HRESULT(__stdcall *GetDocumentation)
    (
        ITypeLib2 *This,
        INT index,

        BSTR *pBstrName,

        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,

        BSTR *pBstrHelpFile);

    HRESULT(__stdcall *IsName)
    (
        ITypeLib2 *This,

        LPOLESTR szNameBuf,
        ULONG lHashVal,
        BOOL *pfName);

    HRESULT(__stdcall *FindName)
    (
        ITypeLib2 *This,

        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);

    void(__stdcall *ReleaseTLibAttr)(
        ITypeLib2 *This,
        TLIBATTR *pTLibAttr);

    HRESULT(__stdcall *GetCustData)
    (
        ITypeLib2 *This,
        const GUID *const guid,
        VARIANT *pVarVal);

    HRESULT(__stdcall *GetLibStatistics)
    (
        ITypeLib2 *This,
        ULONG *pcUniqueNames,
        ULONG *pcchUniqueNames);

    HRESULT(__stdcall *GetDocumentation2)
    (
        ITypeLib2 *This,
        INT index,
        LCID lcid,

        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,

        BSTR *pbstrHelpStringDll);

    HRESULT(__stdcall *GetAllCustData)
    (
        ITypeLib2 *This,
        CUSTDATA *pCustData);

} ITypeLib2Vtbl;

struct ITypeLib2
{
    struct ITypeLib2Vtbl *lpVtbl;
};
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef enum tagCHANGEKIND
{
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = (CHANGEKIND_ADDMEMBER + 1),
    CHANGEKIND_SETNAMES = (CHANGEKIND_DELETEMEMBER + 1),
    CHANGEKIND_SETDOCUMENTATION = (CHANGEKIND_SETNAMES + 1),
    CHANGEKIND_GENERAL = (CHANGEKIND_SETDOCUMENTATION + 1),
    CHANGEKIND_INVALIDATE = (CHANGEKIND_GENERAL + 1),
    CHANGEKIND_CHANGEFAILED = (CHANGEKIND_INVALIDATE + 1),
    CHANGEKIND_MAX = (CHANGEKIND_CHANGEFAILED + 1)
} CHANGEKIND;

typedef struct ITypeChangeEventsVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeChangeEvents *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeChangeEvents *This);

    ULONG(__stdcall *Release)
    (
        ITypeChangeEvents *This);

    HRESULT(__stdcall *RequestTypeChange)
    (
        ITypeChangeEvents *This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoBefore,

        LPOLESTR pStrName,
        INT *pfCancel);

    HRESULT(__stdcall *AfterTypeChange)
    (
        ITypeChangeEvents *This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoAfter,

        LPOLESTR pStrName);

} ITypeChangeEventsVtbl;

struct ITypeChangeEvents
{
    struct ITypeChangeEventsVtbl *lpVtbl;
};
typedef IErrorInfo *LPERRORINFO;

typedef struct IErrorInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IErrorInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IErrorInfo *This);

    ULONG(__stdcall *Release)
    (
        IErrorInfo *This);

    HRESULT(__stdcall *GetGUID)
    (
        IErrorInfo *This,
        GUID *pGUID);

    HRESULT(__stdcall *GetSource)
    (
        IErrorInfo *This,
        BSTR *pBstrSource);

    HRESULT(__stdcall *GetDescription)
    (
        IErrorInfo *This,
        BSTR *pBstrDescription);

    HRESULT(__stdcall *GetHelpFile)
    (
        IErrorInfo *This,
        BSTR *pBstrHelpFile);

    HRESULT(__stdcall *GetHelpContext)
    (
        IErrorInfo *This,
        DWORD *pdwHelpContext);

} IErrorInfoVtbl;

struct IErrorInfo
{
    struct IErrorInfoVtbl *lpVtbl;
};
typedef ICreateErrorInfo *LPCREATEERRORINFO;

typedef struct ICreateErrorInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICreateErrorInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICreateErrorInfo *This);

    ULONG(__stdcall *Release)
    (
        ICreateErrorInfo *This);

    HRESULT(__stdcall *SetGUID)
    (
        ICreateErrorInfo *This,
        const GUID *const rguid);

    HRESULT(__stdcall *SetSource)
    (
        ICreateErrorInfo *This,
        LPOLESTR szSource);

    HRESULT(__stdcall *SetDescription)
    (
        ICreateErrorInfo *This,
        LPOLESTR szDescription);

    HRESULT(__stdcall *SetHelpFile)
    (
        ICreateErrorInfo *This,
        LPOLESTR szHelpFile);

    HRESULT(__stdcall *SetHelpContext)
    (
        ICreateErrorInfo *This,
        DWORD dwHelpContext);

} ICreateErrorInfoVtbl;

struct ICreateErrorInfo
{
    struct ICreateErrorInfoVtbl *lpVtbl;
};
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
typedef struct ISupportErrorInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISupportErrorInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISupportErrorInfo *This);

    ULONG(__stdcall *Release)
    (
        ISupportErrorInfo *This);

    HRESULT(__stdcall *InterfaceSupportsErrorInfo)
    (
        ISupportErrorInfo *This,
        const IID *const riid);

} ISupportErrorInfoVtbl;

struct ISupportErrorInfo
{
    struct ISupportErrorInfoVtbl *lpVtbl;
};
typedef struct ITypeFactoryVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeFactory *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeFactory *This);

    ULONG(__stdcall *Release)
    (
        ITypeFactory *This);

    HRESULT(__stdcall *CreateFromTypeInfo)
    (
        ITypeFactory *This,
        ITypeInfo *pTypeInfo,
        const IID *const riid,
        IUnknown **ppv);

} ITypeFactoryVtbl;

struct ITypeFactory
{
    struct ITypeFactoryVtbl *lpVtbl;
};
typedef struct ITypeMarshalVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeMarshal *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeMarshal *This);

    ULONG(__stdcall *Release)
    (
        ITypeMarshal *This);

    HRESULT(__stdcall *Size)
    (
        ITypeMarshal *This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG *pSize);

    HRESULT(__stdcall *Marshal)
    (
        ITypeMarshal *This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG cbBufferLength,

        BYTE *pBuffer,

        ULONG *pcbWritten);

    HRESULT(__stdcall *Unmarshal)
    (
        ITypeMarshal *This,
        PVOID pvType,
        DWORD dwFlags,
        ULONG cbBufferLength,

        BYTE *pBuffer,

        ULONG *pcbRead);

    HRESULT(__stdcall *Free)
    (
        ITypeMarshal *This,
        PVOID pvType);

} ITypeMarshalVtbl;

struct ITypeMarshal
{
    struct ITypeMarshalVtbl *lpVtbl;
};
typedef IRecordInfo *LPRECORDINFO;

typedef struct IRecordInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IRecordInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IRecordInfo *This);

    ULONG(__stdcall *Release)
    (
        IRecordInfo *This);

    HRESULT(__stdcall *RecordInit)
    (
        IRecordInfo *This,
        PVOID pvNew);

    HRESULT(__stdcall *RecordClear)
    (
        IRecordInfo *This,
        PVOID pvExisting);

    HRESULT(__stdcall *RecordCopy)
    (
        IRecordInfo *This,
        PVOID pvExisting,
        PVOID pvNew);

    HRESULT(__stdcall *GetGuid)
    (
        IRecordInfo *This,
        GUID *pguid);

    HRESULT(__stdcall *GetName)
    (
        IRecordInfo *This,

        BSTR *pbstrName);

    HRESULT(__stdcall *GetSize)
    (
        IRecordInfo *This,
        ULONG *pcbSize);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IRecordInfo *This,
        ITypeInfo **ppTypeInfo);

    HRESULT(__stdcall *GetField)
    (
        IRecordInfo *This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT(__stdcall *GetFieldNoCopy)
    (
        IRecordInfo *This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField,
        PVOID *ppvDataCArray);

    HRESULT(__stdcall *PutField)
    (
        IRecordInfo *This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT(__stdcall *PutFieldNoCopy)
    (
        IRecordInfo *This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT(__stdcall *GetFieldNames)
    (
        IRecordInfo *This,
        ULONG *pcNames,

        BSTR *rgBstrNames);

    BOOL(__stdcall *IsMatchingType)
    (
        IRecordInfo *This,
        IRecordInfo *pRecordInfo);

    PVOID(__stdcall *RecordCreate)
    (
        IRecordInfo *This);

    HRESULT(__stdcall *RecordCreateCopy)
    (
        IRecordInfo *This,
        PVOID pvSource,
        PVOID *ppvDest);

    HRESULT(__stdcall *RecordDestroy)
    (
        IRecordInfo *This,
        PVOID pvRecord);

} IRecordInfoVtbl;

struct IRecordInfo
{
    struct IRecordInfoVtbl *lpVtbl;
};
typedef IErrorLog *LPERRORLOG;

typedef struct IErrorLogVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IErrorLog *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IErrorLog *This);

    ULONG(__stdcall *Release)
    (
        IErrorLog *This);

    HRESULT(__stdcall *AddError)
    (
        IErrorLog *This,
        LPCOLESTR pszPropName,
        EXCEPINFO *pExcepInfo);

} IErrorLogVtbl;

struct IErrorLog
{
    struct IErrorLogVtbl *lpVtbl;
};
typedef IPropertyBag *LPPROPERTYBAG;
typedef struct IPropertyBagVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPropertyBag *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPropertyBag *This);

    ULONG(__stdcall *Release)
    (
        IPropertyBag *This);

    HRESULT(__stdcall *Read)
    (
        IPropertyBag *This,
        LPCOLESTR pszPropName,
        VARIANT *pVar,
        IErrorLog *pErrorLog);

    HRESULT(__stdcall *Write)
    (
        IPropertyBag *This,
        LPCOLESTR pszPropName,
        VARIANT *pVar);

} IPropertyBagVtbl;

struct IPropertyBag
{
    struct IPropertyBagVtbl *lpVtbl;
};
typedef struct ITypeLibRegistrationReaderVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeLibRegistrationReader *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeLibRegistrationReader *This);

    ULONG(__stdcall *Release)
    (
        ITypeLibRegistrationReader *This);

    HRESULT(__stdcall *EnumTypeLibRegistrations)
    (
        ITypeLibRegistrationReader *This,
        IEnumUnknown **ppEnumUnknown);

} ITypeLibRegistrationReaderVtbl;

struct ITypeLibRegistrationReader
{
    struct ITypeLibRegistrationReaderVtbl *lpVtbl;
};

typedef struct ITypeLibRegistrationVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ITypeLibRegistration *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ITypeLibRegistration *This);

    ULONG(__stdcall *Release)
    (
        ITypeLibRegistration *This);

    HRESULT(__stdcall *GetGuid)
    (
        ITypeLibRegistration *This,
        GUID *pGuid);

    HRESULT(__stdcall *GetVersion)
    (
        ITypeLibRegistration *This,
        BSTR *pVersion);

    HRESULT(__stdcall *GetLcid)
    (
        ITypeLibRegistration *This,
        LCID *pLcid);

    HRESULT(__stdcall *GetWin32Path)
    (
        ITypeLibRegistration *This,
        BSTR *pWin32Path);

    HRESULT(__stdcall *GetWin64Path)
    (
        ITypeLibRegistration *This,
        BSTR *pWin64Path);

    HRESULT(__stdcall *GetDisplayName)
    (
        ITypeLibRegistration *This,
        BSTR *pDisplayName);

    HRESULT(__stdcall *GetFlags)
    (
        ITypeLibRegistration *This,
        DWORD *pFlags);

    HRESULT(__stdcall *GetHelpDir)
    (
        ITypeLibRegistration *This,
        BSTR *pHelpDir);

} ITypeLibRegistrationVtbl;

struct ITypeLibRegistration
{
    struct ITypeLibRegistrationVtbl *lpVtbl;
};

typedef struct tagVersionedStream
{
    GUID guidVersion;
    IStream *pStream;
} VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct tagCAC
{
    ULONG cElems;
    CHAR *pElems;
} CAC;

typedef struct tagCAUB
{
    ULONG cElems;
    UCHAR *pElems;
} CAUB;

typedef struct tagCAI
{
    ULONG cElems;
    SHORT *pElems;
} CAI;

typedef struct tagCAUI
{
    ULONG cElems;
    USHORT *pElems;
} CAUI;

typedef struct tagCAL
{
    ULONG cElems;
    LONG *pElems;
} CAL;

typedef struct tagCAUL
{
    ULONG cElems;
    ULONG *pElems;
} CAUL;

typedef struct tagCAFLT
{
    ULONG cElems;
    FLOAT *pElems;
} CAFLT;

typedef struct tagCADBL
{
    ULONG cElems;
    DOUBLE *pElems;
} CADBL;

typedef struct tagCACY
{
    ULONG cElems;
    CY *pElems;
} CACY;

typedef struct tagCADATE
{
    ULONG cElems;
    DATE *pElems;
} CADATE;

typedef struct tagCABSTR
{
    ULONG cElems;
    BSTR *pElems;
} CABSTR;

typedef struct tagCABSTRBLOB
{
    ULONG cElems;
    BSTRBLOB *pElems;
} CABSTRBLOB;

typedef struct tagCABOOL
{
    ULONG cElems;
    VARIANT_BOOL *pElems;
} CABOOL;

typedef struct tagCASCODE
{
    ULONG cElems;
    SCODE *pElems;
} CASCODE;

typedef struct tagCAPROPVARIANT
{
    ULONG cElems;
    PROPVARIANT *pElems;
} CAPROPVARIANT;

typedef struct tagCAH
{
    ULONG cElems;
    LARGE_INTEGER *pElems;
} CAH;

typedef struct tagCAUH
{
    ULONG cElems;
    ULARGE_INTEGER *pElems;
} CAUH;

typedef struct tagCALPSTR
{
    ULONG cElems;
    LPSTR *pElems;
} CALPSTR;

typedef struct tagCALPWSTR
{
    ULONG cElems;
    LPWSTR *pElems;
} CALPWSTR;

typedef struct tagCAFILETIME
{
    ULONG cElems;
    FILETIME *pElems;
} CAFILETIME;

typedef struct tagCACLIPDATA
{
    ULONG cElems;
    CLIPDATA *pElems;
} CACLIPDATA;

typedef struct tagCACLSID
{
    ULONG cElems;
    CLSID *pElems;
} CACLSID;
typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;

struct tagPROPVARIANT;
typedef struct tagPROPVARIANT *LPPROPVARIANT;
typedef struct tagPROPSPEC
{
    ULONG ulKind;
    union
    {
        PROPID propid;
        LPOLESTR lpwstr;

    } u;
} PROPSPEC;

typedef struct tagSTATPROPSTG
{
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
} STATPROPSTG;

typedef struct tagSTATPROPSETSTG
{
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
} STATPROPSETSTG;

struct tagPROPVARIANT
{
    union
    {
        struct tag_inner_PROPVARIANT
        {
            VARTYPE vt;
            PROPVAR_PAD1 wReserved1;
            PROPVAR_PAD2 wReserved2;
            PROPVAR_PAD3 wReserved3;
            union
            {
                /* [case()] */ /* Empty union arm */
                /* [case()] */ CHAR cVal;
                /* [case()] */ UCHAR bVal;
                /* [case()] */ SHORT iVal;
                /* [case()] */ USHORT uiVal;
                /* [case()] */ LONG lVal;
                /* [case()] */ ULONG ulVal;
                /* [case()] */ INT intVal;
                /* [case()] */ UINT uintVal;
                /* [case()] */ LARGE_INTEGER hVal;
                /* [case()] */ ULARGE_INTEGER uhVal;
                /* [case()] */ FLOAT fltVal;
                /* [case()] */ DOUBLE dblVal;
                /* [case()] */ VARIANT_BOOL boolVal;
                /* [case()] */ VARIANT_BOOL __OBSOLETE__VARIANT_BOOL;
                /* [case()] */ SCODE scode;
                /* [case()] */ CY cyVal;
                /* [case()] */ DATE date;
                /* [case()] */ FILETIME filetime;
                /* [case()] */ CLSID *puuid;
                /* [case()] */ CLIPDATA *pclipdata;
                /* [case()] */ BSTR bstrVal;
                /* [case()] */ BSTRBLOB bstrblobVal;
                /* [case()] */ BLOB blob;
                /* [case()] */ LPSTR pszVal;
                /* [case()] */ LPWSTR pwszVal;
                /* [case()] */ IUnknown *punkVal;
                /* [case()] */ IDispatch *pdispVal;
                /* [case()] */ IStream *pStream;
                /* [case()] */ IStorage *pStorage;
                /* [case()] */ LPVERSIONEDSTREAM pVersionedStream;
                /* [case()] */ LPSAFEARRAY parray;
                /* [case()] */ CAC cac;
                /* [case()] */ CAUB caub;
                /* [case()] */ CAI cai;
                /* [case()] */ CAUI caui;
                /* [case()] */ CAL cal;
                /* [case()] */ CAUL caul;
                /* [case()] */ CAH cah;
                /* [case()] */ CAUH cauh;
                /* [case()] */ CAFLT caflt;
                /* [case()] */ CADBL cadbl;
                /* [case()] */ CABOOL cabool;
                /* [case()] */ CASCODE cascode;
                /* [case()] */ CACY cacy;
                /* [case()] */ CADATE cadate;
                /* [case()] */ CAFILETIME cafiletime;
                /* [case()] */ CACLSID cauuid;
                /* [case()] */ CACLIPDATA caclipdata;
                /* [case()] */ CABSTR cabstr;
                /* [case()] */ CABSTRBLOB cabstrblob;
                /* [case()] */ CALPSTR calpstr;
                /* [case()] */ CALPWSTR calpwstr;
                /* [case()] */ CAPROPVARIANT capropvar;
                /* [case()] */ CHAR *pcVal;
                /* [case()] */ UCHAR *pbVal;
                /* [case()] */ SHORT *piVal;
                /* [case()] */ USHORT *puiVal;
                /* [case()] */ LONG *plVal;
                /* [case()] */ ULONG *pulVal;
                /* [case()] */ INT *pintVal;
                /* [case()] */ UINT *puintVal;
                /* [case()] */ FLOAT *pfltVal;
                /* [case()] */ DOUBLE *pdblVal;
                /* [case()] */ VARIANT_BOOL *pboolVal;
                /* [case()] */ DECIMAL *pdecVal;
                /* [case()] */ SCODE *pscode;
                /* [case()] */ CY *pcyVal;
                /* [case()] */ DATE *pdate;
                /* [case()] */ BSTR *pbstrVal;
                /* [case()] */ IUnknown **ppunkVal;
                /* [case()] */ IDispatch **ppdispVal;
                /* [case()] */ LPSAFEARRAY *pparray;
                /* [case()] */ PROPVARIANT *pvarVal;
            };
        };
        DECIMAL decVal;
    };
};

typedef struct IPropertyStorageVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPropertyStorage *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPropertyStorage *This);

    ULONG(__stdcall *Release)
    (
        IPropertyStorage *This);

    HRESULT(__stdcall *ReadMultiple)
    (
        IPropertyStorage *This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        PROPVARIANT rgpropvar[]);

    HRESULT(__stdcall *WriteMultiple)
    (
        IPropertyStorage *This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        const PROPVARIANT rgpropvar[],
        PROPID propidNameFirst);

    HRESULT(__stdcall *DeleteMultiple)
    (
        IPropertyStorage *This,
        ULONG cpspec,
        const PROPSPEC rgpspec[]);

    HRESULT(__stdcall *ReadPropertyNames)
    (
        IPropertyStorage *This,
        ULONG cpropid,
        const PROPID rgpropid[],
        LPOLESTR rglpwstrName[]);

    HRESULT(__stdcall *WritePropertyNames)
    (
        IPropertyStorage *This,
        ULONG cpropid,
        const PROPID rgpropid[],
        const LPOLESTR rglpwstrName[]);

    HRESULT(__stdcall *DeletePropertyNames)
    (
        IPropertyStorage *This,
        ULONG cpropid,
        const PROPID rgpropid[]);

    HRESULT(__stdcall *Commit)
    (
        IPropertyStorage *This,
        DWORD grfCommitFlags);

    HRESULT(__stdcall *Revert)
    (
        IPropertyStorage *This);

    HRESULT(__stdcall *Enum)
    (
        IPropertyStorage *This,
        IEnumSTATPROPSTG **ppenum);

    HRESULT(__stdcall *SetTimes)
    (
        IPropertyStorage *This,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);

    HRESULT(__stdcall *SetClass)
    (
        IPropertyStorage *This,
        const IID *const clsid);

    HRESULT(__stdcall *Stat)
    (
        IPropertyStorage *This,
        STATPROPSETSTG *pstatpsstg);

} IPropertyStorageVtbl;

struct IPropertyStorage
{
    struct IPropertyStorageVtbl *lpVtbl;
};
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;

typedef struct IPropertySetStorageVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPropertySetStorage *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPropertySetStorage *This);

    ULONG(__stdcall *Release)
    (
        IPropertySetStorage *This);

    HRESULT(__stdcall *Create)
    (
        IPropertySetStorage *This,
        const IID *const rfmtid,
        const CLSID *pclsid,
        DWORD grfFlags,
        DWORD grfMode,
        IPropertyStorage **ppprstg);

    HRESULT(__stdcall *Open)
    (
        IPropertySetStorage *This,
        const IID *const rfmtid,
        DWORD grfMode,
        IPropertyStorage **ppprstg);

    HRESULT(__stdcall *Delete)
    (
        IPropertySetStorage *This,
        const IID *const rfmtid);

    HRESULT(__stdcall *Enum)
    (
        IPropertySetStorage *This,
        IEnumSTATPROPSETSTG **ppenum);

} IPropertySetStorageVtbl;

struct IPropertySetStorage
{
    struct IPropertySetStorageVtbl *lpVtbl;
};
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;

typedef struct IEnumSTATPROPSTGVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumSTATPROPSTG *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumSTATPROPSTG *This);

    ULONG(__stdcall *Release)
    (
        IEnumSTATPROPSTG *This);

    HRESULT(__stdcall *Next)
    (
        IEnumSTATPROPSTG *This,
        ULONG celt,

        STATPROPSTG *rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumSTATPROPSTG *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumSTATPROPSTG *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumSTATPROPSTG *This,
        IEnumSTATPROPSTG **ppenum);

} IEnumSTATPROPSTGVtbl;

struct IEnumSTATPROPSTG
{
    struct IEnumSTATPROPSTGVtbl *lpVtbl;
};
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
typedef struct IEnumSTATPROPSETSTGVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumSTATPROPSETSTG *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumSTATPROPSETSTG *This);

    ULONG(__stdcall *Release)
    (
        IEnumSTATPROPSETSTG *This);

    HRESULT(__stdcall *Next)
    (
        IEnumSTATPROPSETSTG *This,
        ULONG celt,

        STATPROPSETSTG *rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumSTATPROPSETSTG *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumSTATPROPSETSTG *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumSTATPROPSETSTG *This,
        IEnumSTATPROPSETSTG **ppenum);

} IEnumSTATPROPSETSTGVtbl;

struct IEnumSTATPROPSETSTG
{
    struct IEnumSTATPROPSETSTGVtbl *lpVtbl;
};

typedef IPropertyStorage *LPPROPERTYSTORAGE;
typedef DWORD STGFMT;

typedef struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;

    const WCHAR *pwcsTemplateFile;

} STGOPTIONS;

typedef enum tagCOINIT
{
    COINIT_APARTMENTTHREADED = 0x2,

    COINIT_MULTITHREADED = COINITBASE_MULTITHREADED,
    COINIT_DISABLE_OLE1DDE = 0x4,
    COINIT_SPEED_OVER_MEMORY = 0x8,

} COINIT;

typedef enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,
    SD_ACCESSPERMISSIONS = 1,
    SD_LAUNCHRESTRICTIONS = 2,
    SD_ACCESSRESTRICTIONS = 3

} COMSD;

typedef struct IPersistMoniker IPersistMoniker;

typedef struct IMonikerProp IMonikerProp;

typedef struct IBindProtocol IBindProtocol;

typedef struct IBinding IBinding;

typedef struct IBindStatusCallback IBindStatusCallback;

typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;

typedef struct IAuthenticate IAuthenticate;

typedef struct IAuthenticateEx IAuthenticateEx;

typedef struct IHttpNegotiate IHttpNegotiate;

typedef struct IHttpNegotiate2 IHttpNegotiate2;

typedef struct IHttpNegotiate3 IHttpNegotiate3;

typedef struct IWinInetFileStream IWinInetFileStream;

typedef struct IWindowForBindingUI IWindowForBindingUI;

typedef struct ICodeInstall ICodeInstall;

typedef struct IUri IUri;

typedef struct IUriContainer IUriContainer;

typedef struct IUriBuilder IUriBuilder;

typedef struct IUriBuilderFactory IUriBuilderFactory;

typedef struct IWinInetInfo IWinInetInfo;

typedef struct IHttpSecurity IHttpSecurity;

typedef struct IWinInetHttpInfo IWinInetHttpInfo;

typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;

typedef struct IWinInetCacheHints IWinInetCacheHints;

typedef struct IWinInetCacheHints2 IWinInetCacheHints2;

typedef struct IBindHost IBindHost;

typedef struct IInternet IInternet;

typedef struct IInternetBindInfo IInternetBindInfo;

typedef struct IInternetBindInfoEx IInternetBindInfoEx;

typedef struct IInternetProtocolRoot IInternetProtocolRoot;

typedef struct IInternetProtocol IInternetProtocol;

typedef struct IInternetProtocolEx IInternetProtocolEx;

typedef struct IInternetProtocolSink IInternetProtocolSink;

typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;

typedef struct IInternetSession IInternetSession;

typedef struct IInternetThreadSwitch IInternetThreadSwitch;

typedef struct IInternetPriority IInternetPriority;

typedef struct IInternetProtocolInfo IInternetProtocolInfo;

typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;

typedef struct IInternetSecurityManager IInternetSecurityManager;

typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;

typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;

typedef struct IZoneIdentifier IZoneIdentifier;

typedef struct IZoneIdentifier2 IZoneIdentifier2;

typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;

typedef struct IInternetZoneManager IInternetZoneManager;

typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;

typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;

typedef struct ISoftDistExt ISoftDistExt;

typedef struct ICatalogFileInfo ICatalogFileInfo;

typedef struct IDataFilter IDataFilter;

typedef struct IEncodingFilterFactory IEncodingFilterFactory;

typedef struct IWrappedProtocol IWrappedProtocol;

typedef struct IGetBindHandle IGetBindHandle;

typedef struct IBindCallbackRedirect IBindCallbackRedirect;

typedef struct IBindHttpSecurity IBindHttpSecurity;
typedef struct IOleAdviseHolder IOleAdviseHolder;

typedef struct IOleCache IOleCache;

typedef struct IOleCache2 IOleCache2;

typedef struct IOleCacheControl IOleCacheControl;

typedef struct IParseDisplayName IParseDisplayName;

typedef struct IOleContainer IOleContainer;

typedef struct IOleClientSite IOleClientSite;

typedef struct IOleObject IOleObject;

typedef struct IOleWindow IOleWindow;

typedef struct IOleLink IOleLink;

typedef struct IOleItemContainer IOleItemContainer;

typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;

typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;

typedef struct IOleInPlaceFrame IOleInPlaceFrame;

typedef struct IOleInPlaceObject IOleInPlaceObject;

typedef struct IOleInPlaceSite IOleInPlaceSite;

typedef struct IContinue IContinue;

typedef struct IViewObject IViewObject;

typedef struct IViewObject2 IViewObject2;

typedef struct IDropSource IDropSource;

typedef struct IDropTarget IDropTarget;

typedef struct IDropSourceNotify IDropSourceNotify;

typedef struct IEnterpriseDropTarget IEnterpriseDropTarget;

typedef struct IEnumOLEVERB IEnumOLEVERB;

typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
typedef struct IOleAdviseHolderVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleAdviseHolder *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleAdviseHolder *This);

    ULONG(__stdcall *Release)
    (
        IOleAdviseHolder *This);

    HRESULT(__stdcall *Advise)
    (
        IOleAdviseHolder *This,

        IAdviseSink *pAdvise,

        DWORD *pdwConnection);

    HRESULT(__stdcall *Unadvise)
    (
        IOleAdviseHolder *This,
        DWORD dwConnection);

    HRESULT(__stdcall *EnumAdvise)
    (
        IOleAdviseHolder *This,

        IEnumSTATDATA **ppenumAdvise);

    HRESULT(__stdcall *SendOnRename)
    (
        IOleAdviseHolder *This,

        IMoniker *pmk);

    HRESULT(__stdcall *SendOnSave)
    (
        IOleAdviseHolder *This);

    HRESULT(__stdcall *SendOnClose)
    (
        IOleAdviseHolder *This);

} IOleAdviseHolderVtbl;

struct IOleAdviseHolder
{
    struct IOleAdviseHolderVtbl *lpVtbl;
};

typedef IOleCache *LPOLECACHE;
typedef struct IOleCacheVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleCache *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleCache *This);

    ULONG(__stdcall *Release)
    (
        IOleCache *This);

    HRESULT(__stdcall *Cache)
    (
        IOleCache *This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);

    HRESULT(__stdcall *Uncache)
    (
        IOleCache *This,
        DWORD dwConnection);

    HRESULT(__stdcall *EnumCache)
    (
        IOleCache *This,
        IEnumSTATDATA **ppenumSTATDATA);

    HRESULT(__stdcall *InitCache)
    (
        IOleCache *This,
        IDataObject *pDataObject);

    HRESULT(__stdcall *SetData)
    (
        IOleCache *This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);

} IOleCacheVtbl;

struct IOleCache
{
    struct IOleCacheVtbl *lpVtbl;
};
typedef IOleCache2 *LPOLECACHE2;
typedef enum tagDISCARDCACHE
{
    DISCARDCACHE_SAVEIFDIRTY = 0,
    DISCARDCACHE_NOSAVE = 1
} DISCARDCACHE;

typedef struct IOleCache2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleCache2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleCache2 *This);

    ULONG(__stdcall *Release)
    (
        IOleCache2 *This);

    HRESULT(__stdcall *Cache)
    (
        IOleCache2 *This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);

    HRESULT(__stdcall *Uncache)
    (
        IOleCache2 *This,
        DWORD dwConnection);

    HRESULT(__stdcall *EnumCache)
    (
        IOleCache2 *This,
        IEnumSTATDATA **ppenumSTATDATA);

    HRESULT(__stdcall *InitCache)
    (
        IOleCache2 *This,
        IDataObject *pDataObject);

    HRESULT(__stdcall *SetData)
    (
        IOleCache2 *This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);

    HRESULT(__stdcall *UpdateCache)
    (
        IOleCache2 *This,

        LPDATAOBJECT pDataObject,

        DWORD grfUpdf,

        LPVOID pReserved);

    HRESULT(__stdcall *DiscardCache)
    (
        IOleCache2 *This,
        DWORD dwDiscardOptions);

} IOleCache2Vtbl;

struct IOleCache2
{
    struct IOleCache2Vtbl *lpVtbl;
};

typedef IOleCacheControl *LPOLECACHECONTROL;
typedef struct IOleCacheControlVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleCacheControl *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleCacheControl *This);

    ULONG(__stdcall *Release)
    (
        IOleCacheControl *This);

    HRESULT(__stdcall *OnRun)
    (
        IOleCacheControl *This,
        LPDATAOBJECT pDataObject);

    HRESULT(__stdcall *OnStop)
    (
        IOleCacheControl *This);

} IOleCacheControlVtbl;

struct IOleCacheControl
{
    struct IOleCacheControlVtbl *lpVtbl;
};
typedef IParseDisplayName *LPPARSEDISPLAYNAME;

typedef struct IParseDisplayNameVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IParseDisplayName *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IParseDisplayName *This);

    ULONG(__stdcall *Release)
    (
        IParseDisplayName *This);

    HRESULT(__stdcall *ParseDisplayName)
    (
        IParseDisplayName *This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

} IParseDisplayNameVtbl;

struct IParseDisplayName
{
    struct IParseDisplayNameVtbl *lpVtbl;
};
typedef IOleContainer *LPOLECONTAINER;
typedef struct IOleContainerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleContainer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleContainer *This);

    ULONG(__stdcall *Release)
    (
        IOleContainer *This);

    HRESULT(__stdcall *ParseDisplayName)
    (
        IOleContainer *This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    HRESULT(__stdcall *EnumObjects)
    (
        IOleContainer *This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);

    HRESULT(__stdcall *LockContainer)
    (
        IOleContainer *This,
        BOOL fLock);

} IOleContainerVtbl;

struct IOleContainer
{
    struct IOleContainerVtbl *lpVtbl;
};
typedef IOleClientSite *LPOLECLIENTSITE;
typedef struct IOleClientSiteVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleClientSite *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleClientSite *This);

    ULONG(__stdcall *Release)
    (
        IOleClientSite *This);

    HRESULT(__stdcall *SaveObject)
    (
        IOleClientSite *This);

    HRESULT(__stdcall *GetMoniker)
    (
        IOleClientSite *This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);

    HRESULT(__stdcall *GetContainer)
    (
        IOleClientSite *This,
        IOleContainer **ppContainer);

    HRESULT(__stdcall *ShowObject)
    (
        IOleClientSite *This);

    HRESULT(__stdcall *OnShowWindow)
    (
        IOleClientSite *This,
        BOOL fShow);

    HRESULT(__stdcall *RequestNewObjectLayout)
    (
        IOleClientSite *This);

} IOleClientSiteVtbl;

struct IOleClientSite
{
    struct IOleClientSiteVtbl *lpVtbl;
};
typedef IOleObject *LPOLEOBJECT;

typedef enum tagOLEGETMONIKER
{
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN = 2,
    OLEGETMONIKER_UNASSIGN = 3,
    OLEGETMONIKER_TEMPFORUSER = 4
} OLEGETMONIKER;

typedef enum tagOLEWHICHMK
{
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL = 2,
    OLEWHICHMK_OBJFULL = 3
} OLEWHICHMK;

typedef enum tagUSERCLASSTYPE
{
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT = 2,
    USERCLASSTYPE_APPNAME = 3
} USERCLASSTYPE;

typedef enum tagOLEMISC
{
    OLEMISC_RECOMPOSEONRESIZE = 0x1,
    OLEMISC_ONLYICONIC = 0x2,
    OLEMISC_INSERTNOTREPLACE = 0x4,
    OLEMISC_STATIC = 0x8,
    OLEMISC_CANTLINKINSIDE = 0x10,
    OLEMISC_CANLINKBYOLE1 = 0x20,
    OLEMISC_ISLINKOBJECT = 0x40,
    OLEMISC_INSIDEOUT = 0x80,
    OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
    OLEMISC_INVISIBLEATRUNTIME = 0x400,
    OLEMISC_ALWAYSRUN = 0x800,
    OLEMISC_ACTSLIKEBUTTON = 0x1000,
    OLEMISC_ACTSLIKELABEL = 0x2000,
    OLEMISC_NOUIACTIVATE = 0x4000,
    OLEMISC_ALIGNABLE = 0x8000,
    OLEMISC_SIMPLEFRAME = 0x10000,
    OLEMISC_SETCLIENTSITEFIRST = 0x20000,
    OLEMISC_IMEMODE = 0x40000,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
    OLEMISC_WANTSTOMENUMERGE = 0x100000,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
} OLEMISC;

typedef enum tagOLECLOSE
{
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE = 1,
    OLECLOSE_PROMPTSAVE = 2
} OLECLOSE;

typedef struct IOleObjectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleObject *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleObject *This);

    ULONG(__stdcall *Release)
    (
        IOleObject *This);

    HRESULT(__stdcall *SetClientSite)
    (
        IOleObject *This,
        IOleClientSite *pClientSite);

    HRESULT(__stdcall *GetClientSite)
    (
        IOleObject *This,
        IOleClientSite **ppClientSite);

    HRESULT(__stdcall *SetHostNames)
    (
        IOleObject *This,
        LPCOLESTR szContainerApp,
        LPCOLESTR szContainerObj);

    HRESULT(__stdcall *Close)
    (
        IOleObject *This,
        DWORD dwSaveOption);

    HRESULT(__stdcall *SetMoniker)
    (
        IOleObject *This,
        DWORD dwWhichMoniker,
        IMoniker *pmk);

    HRESULT(__stdcall *GetMoniker)
    (
        IOleObject *This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);

    HRESULT(__stdcall *InitFromData)
    (
        IOleObject *This,
        IDataObject *pDataObject,
        BOOL fCreation,
        DWORD dwReserved);

    HRESULT(__stdcall *GetClipboardData)
    (
        IOleObject *This,
        DWORD dwReserved,
        IDataObject **ppDataObject);

    HRESULT(__stdcall *DoVerb)
    (
        IOleObject *This,
        LONG iVerb,
        LPMSG lpmsg,
        IOleClientSite *pActiveSite,
        LONG lindex,
        HWND hwndParent,
        LPCRECT lprcPosRect);

    HRESULT(__stdcall *EnumVerbs)
    (
        IOleObject *This,
        IEnumOLEVERB **ppEnumOleVerb);

    HRESULT(__stdcall *Update)
    (
        IOleObject *This);

    HRESULT(__stdcall *IsUpToDate)
    (
        IOleObject *This);

    HRESULT(__stdcall *GetUserClassID)
    (
        IOleObject *This,
        CLSID *pClsid);

    HRESULT(__stdcall *GetUserType)
    (
        IOleObject *This,
        DWORD dwFormOfType,
        LPOLESTR *pszUserType);

    HRESULT(__stdcall *SetExtent)
    (
        IOleObject *This,
        DWORD dwDrawAspect,
        SIZEL *psizel);

    HRESULT(__stdcall *GetExtent)
    (
        IOleObject *This,
        DWORD dwDrawAspect,
        SIZEL *psizel);

    HRESULT(__stdcall *Advise)
    (
        IOleObject *This,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);

    HRESULT(__stdcall *Unadvise)
    (
        IOleObject *This,
        DWORD dwConnection);

    HRESULT(__stdcall *EnumAdvise)
    (
        IOleObject *This,
        IEnumSTATDATA **ppenumAdvise);

    HRESULT(__stdcall *GetMiscStatus)
    (
        IOleObject *This,
        DWORD dwAspect,
        DWORD *pdwStatus);

    HRESULT(__stdcall *SetColorScheme)
    (
        IOleObject *This,
        LOGPALETTE *pLogpal);

} IOleObjectVtbl;

struct IOleObject
{
    struct IOleObjectVtbl *lpVtbl;
};
typedef enum tagOLERENDER
{
    OLERENDER_NONE = 0,
    OLERENDER_DRAW = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS = 3
} OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
{
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
} OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;

typedef IOleWindow *LPOLEWINDOW;
typedef struct IOleWindowVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleWindow *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleWindow *This);

    ULONG(__stdcall *Release)
    (
        IOleWindow *This);

    HRESULT(__stdcall *GetWindow)
    (
        IOleWindow *This,
        HWND *phwnd);

    HRESULT(__stdcall *ContextSensitiveHelp)
    (
        IOleWindow *This,
        BOOL fEnterMode);

} IOleWindowVtbl;

struct IOleWindow
{
    struct IOleWindowVtbl *lpVtbl;
};
typedef IOleLink *LPOLELINK;

typedef enum tagOLEUPDATE
{
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3
} OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef enum tagOLELINKBIND
{
    OLELINKBIND_EVENIFCLASSDIFF = 1
} OLELINKBIND;

typedef struct IOleLinkVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleLink *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleLink *This);

    ULONG(__stdcall *Release)
    (
        IOleLink *This);

    HRESULT(__stdcall *SetUpdateOptions)
    (
        IOleLink *This,
        DWORD dwUpdateOpt);

    HRESULT(__stdcall *GetUpdateOptions)
    (
        IOleLink *This,
        DWORD *pdwUpdateOpt);

    HRESULT(__stdcall *SetSourceMoniker)
    (
        IOleLink *This,
        IMoniker *pmk,
        const IID *const rclsid);

    HRESULT(__stdcall *GetSourceMoniker)
    (
        IOleLink *This,
        IMoniker **ppmk);

    HRESULT(__stdcall *SetSourceDisplayName)
    (
        IOleLink *This,
        LPCOLESTR pszStatusText);

    HRESULT(__stdcall *GetSourceDisplayName)
    (
        IOleLink *This,
        LPOLESTR *ppszDisplayName);

    HRESULT(__stdcall *BindToSource)
    (
        IOleLink *This,
        DWORD bindflags,
        IBindCtx *pbc);

    HRESULT(__stdcall *BindIfRunning)
    (
        IOleLink *This);

    HRESULT(__stdcall *GetBoundSource)
    (
        IOleLink *This,
        IUnknown **ppunk);

    HRESULT(__stdcall *UnbindSource)
    (
        IOleLink *This);

    HRESULT(__stdcall *Update)
    (
        IOleLink *This,
        IBindCtx *pbc);

} IOleLinkVtbl;

struct IOleLink
{
    struct IOleLinkVtbl *lpVtbl;
};
typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef enum tagBINDSPEED
{
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE = 2,
    BINDSPEED_IMMEDIATE = 3
} BINDSPEED;

typedef enum tagOLECONTF
{
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS = 2,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16
} OLECONTF;

typedef struct IOleItemContainerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleItemContainer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleItemContainer *This);

    ULONG(__stdcall *Release)
    (
        IOleItemContainer *This);

    HRESULT(__stdcall *ParseDisplayName)
    (
        IOleItemContainer *This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    HRESULT(__stdcall *EnumObjects)
    (
        IOleItemContainer *This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);

    HRESULT(__stdcall *LockContainer)
    (
        IOleItemContainer *This,
        BOOL fLock);

    HRESULT(__stdcall *GetObjectA)
    (
        IOleItemContainer *This,
        LPOLESTR pszItem,
        DWORD dwSpeedNeeded,
        IBindCtx *pbc,
        const IID *const riid,
        void **ppvObject);

    HRESULT(__stdcall *GetObjectStorage)
    (
        IOleItemContainer *This,
        LPOLESTR pszItem,
        IBindCtx *pbc,
        const IID *const riid,
        void **ppvStorage);

    HRESULT(__stdcall *IsRunning)
    (
        IOleItemContainer *This,
        LPOLESTR pszItem);

} IOleItemContainerVtbl;

struct IOleItemContainer
{
    struct IOleItemContainerVtbl *lpVtbl;
};
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;

typedef struct IOleInPlaceUIWindowVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleInPlaceUIWindow *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleInPlaceUIWindow *This);

    ULONG(__stdcall *Release)
    (
        IOleInPlaceUIWindow *This);

    HRESULT(__stdcall *GetWindow)
    (
        IOleInPlaceUIWindow *This,
        HWND *phwnd);

    HRESULT(__stdcall *ContextSensitiveHelp)
    (
        IOleInPlaceUIWindow *This,
        BOOL fEnterMode);

    HRESULT(__stdcall *GetBorder)
    (
        IOleInPlaceUIWindow *This,
        LPRECT lprectBorder);

    HRESULT(__stdcall *RequestBorderSpace)
    (
        IOleInPlaceUIWindow *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT(__stdcall *SetBorderSpace)
    (
        IOleInPlaceUIWindow *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT(__stdcall *SetActiveObject)
    (
        IOleInPlaceUIWindow *This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);

} IOleInPlaceUIWindowVtbl;

struct IOleInPlaceUIWindow
{
    struct IOleInPlaceUIWindowVtbl *lpVtbl;
};
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;

typedef struct IOleInPlaceActiveObjectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleInPlaceActiveObject *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleInPlaceActiveObject *This);

    ULONG(__stdcall *Release)
    (
        IOleInPlaceActiveObject *This);

    HRESULT(__stdcall *GetWindow)
    (
        IOleInPlaceActiveObject *This,
        HWND *phwnd);

    HRESULT(__stdcall *ContextSensitiveHelp)
    (
        IOleInPlaceActiveObject *This,
        BOOL fEnterMode);

    HRESULT(__stdcall *TranslateAcceleratorA)
    (
        IOleInPlaceActiveObject *This,

        LPMSG lpmsg);

    HRESULT(__stdcall *OnFrameWindowActivate)
    (
        IOleInPlaceActiveObject *This,
        BOOL fActivate);

    HRESULT(__stdcall *OnDocWindowActivate)
    (
        IOleInPlaceActiveObject *This,
        BOOL fActivate);

    HRESULT(__stdcall *ResizeBorder)
    (
        IOleInPlaceActiveObject *This,

        LPCRECT prcBorder,

        IOleInPlaceUIWindow *pUIWindow,

        BOOL fFrameWindow);

    HRESULT(__stdcall *EnableModeless)
    (
        IOleInPlaceActiveObject *This,
        BOOL fEnable);

} IOleInPlaceActiveObjectVtbl;

struct IOleInPlaceActiveObject
{
    struct IOleInPlaceActiveObjectVtbl *lpVtbl;
};
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
{
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
} OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
{
    LONG width[6];
} OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;
typedef struct IOleInPlaceFrameVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleInPlaceFrame *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleInPlaceFrame *This);

    ULONG(__stdcall *Release)
    (
        IOleInPlaceFrame *This);

    HRESULT(__stdcall *GetWindow)
    (
        IOleInPlaceFrame *This,
        HWND *phwnd);

    HRESULT(__stdcall *ContextSensitiveHelp)
    (
        IOleInPlaceFrame *This,
        BOOL fEnterMode);

    HRESULT(__stdcall *GetBorder)
    (
        IOleInPlaceFrame *This,
        LPRECT lprectBorder);

    HRESULT(__stdcall *RequestBorderSpace)
    (
        IOleInPlaceFrame *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT(__stdcall *SetBorderSpace)
    (
        IOleInPlaceFrame *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT(__stdcall *SetActiveObject)
    (
        IOleInPlaceFrame *This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);

    HRESULT(__stdcall *InsertMenus)
    (
        IOleInPlaceFrame *This,
        HMENU hmenuShared,
        LPOLEMENUGROUPWIDTHS lpMenuWidths);

    HRESULT(__stdcall *SetMenu)
    (
        IOleInPlaceFrame *This,
        HMENU hmenuShared,
        HOLEMENU holemenu,
        HWND hwndActiveObject);

    HRESULT(__stdcall *RemoveMenus)
    (
        IOleInPlaceFrame *This,
        HMENU hmenuShared);

    HRESULT(__stdcall *SetStatusText)
    (
        IOleInPlaceFrame *This,
        LPCOLESTR pszStatusText);

    HRESULT(__stdcall *EnableModeless)
    (
        IOleInPlaceFrame *This,
        BOOL fEnable);

    HRESULT(__stdcall *TranslateAcceleratorA)
    (
        IOleInPlaceFrame *This,
        LPMSG lpmsg,
        WORD wID);

} IOleInPlaceFrameVtbl;

struct IOleInPlaceFrame
{
    struct IOleInPlaceFrameVtbl *lpVtbl;
};
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
typedef struct IOleInPlaceObjectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleInPlaceObject *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleInPlaceObject *This);

    ULONG(__stdcall *Release)
    (
        IOleInPlaceObject *This);

    HRESULT(__stdcall *GetWindow)
    (
        IOleInPlaceObject *This,
        HWND *phwnd);

    HRESULT(__stdcall *ContextSensitiveHelp)
    (
        IOleInPlaceObject *This,
        BOOL fEnterMode);

    HRESULT(__stdcall *InPlaceDeactivate)
    (
        IOleInPlaceObject *This);

    HRESULT(__stdcall *UIDeactivate)
    (
        IOleInPlaceObject *This);

    HRESULT(__stdcall *SetObjectRects)
    (
        IOleInPlaceObject *This,
        LPCRECT lprcPosRect,
        LPCRECT lprcClipRect);

    HRESULT(__stdcall *ReactivateAndUndo)
    (
        IOleInPlaceObject *This);

} IOleInPlaceObjectVtbl;

struct IOleInPlaceObject
{
    struct IOleInPlaceObjectVtbl *lpVtbl;
};
typedef IOleInPlaceSite *LPOLEINPLACESITE;

typedef struct IOleInPlaceSiteVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IOleInPlaceSite *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IOleInPlaceSite *This);

    ULONG(__stdcall *Release)
    (
        IOleInPlaceSite *This);

    HRESULT(__stdcall *GetWindow)
    (
        IOleInPlaceSite *This,
        HWND *phwnd);

    HRESULT(__stdcall *ContextSensitiveHelp)
    (
        IOleInPlaceSite *This,
        BOOL fEnterMode);

    HRESULT(__stdcall *CanInPlaceActivate)
    (
        IOleInPlaceSite *This);

    HRESULT(__stdcall *OnInPlaceActivate)
    (
        IOleInPlaceSite *This);

    HRESULT(__stdcall *OnUIActivate)
    (
        IOleInPlaceSite *This);

    HRESULT(__stdcall *GetWindowContext)
    (
        IOleInPlaceSite *This,
        IOleInPlaceFrame **ppFrame,
        IOleInPlaceUIWindow **ppDoc,
        LPRECT lprcPosRect,
        LPRECT lprcClipRect,
        LPOLEINPLACEFRAMEINFO lpFrameInfo);

    HRESULT(__stdcall *Scroll)
    (
        IOleInPlaceSite *This,
        SIZE scrollExtant);

    HRESULT(__stdcall *OnUIDeactivate)
    (
        IOleInPlaceSite *This,
        BOOL fUndoable);

    HRESULT(__stdcall *OnInPlaceDeactivate)
    (
        IOleInPlaceSite *This);

    HRESULT(__stdcall *DiscardUndoState)
    (
        IOleInPlaceSite *This);

    HRESULT(__stdcall *DeactivateAndUndo)
    (
        IOleInPlaceSite *This);

    HRESULT(__stdcall *OnPosRectChange)
    (
        IOleInPlaceSite *This,
        LPCRECT lprcPosRect);

} IOleInPlaceSiteVtbl;

struct IOleInPlaceSite
{
    struct IOleInPlaceSiteVtbl *lpVtbl;
};
typedef struct IContinueVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IContinue *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IContinue *This);

    ULONG(__stdcall *Release)
    (
        IContinue *This);

    HRESULT(__stdcall *FContinue)
    (
        IContinue *This);

} IContinueVtbl;

struct IContinue
{
    struct IContinueVtbl *lpVtbl;
};
typedef IViewObject *LPVIEWOBJECT;

typedef struct IViewObjectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IViewObject *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IViewObject *This);

    ULONG(__stdcall *Release)
    (
        IViewObject *This);

    HRESULT(__stdcall *Draw)
    (
        IViewObject *This,

        DWORD dwDrawAspect,

        LONG lindex,

        void *pvAspect,

        DVTARGETDEVICE *ptd,

        HDC hdcTargetDev,

        HDC hdcDraw,

        LPCRECTL lprcBounds,

        ULONG_PTR dwContinue);

    HRESULT(__stdcall *GetColorSet)
    (
        IViewObject *This,

        DWORD dwDrawAspect,

        LONG lindex,

        void *pvAspect,

        DVTARGETDEVICE *ptd,

        HDC hicTargetDev,

        LOGPALETTE **ppColorSet);

    HRESULT(__stdcall *Freeze)
    (
        IViewObject *This,

        DWORD dwDrawAspect,

        LONG lindex,

        void *pvAspect,

        DWORD *pdwFreeze);

    HRESULT(__stdcall *Unfreeze)
    (
        IViewObject *This,
        DWORD dwFreeze);

    HRESULT(__stdcall *SetAdvise)
    (
        IViewObject *This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);

    HRESULT(__stdcall *GetAdvise)
    (
        IViewObject *This,

        DWORD *pAspects,

        DWORD *pAdvf,

        IAdviseSink **ppAdvSink);

} IViewObjectVtbl;

struct IViewObject
{
    struct IViewObjectVtbl *lpVtbl;
};
typedef IViewObject2 *LPVIEWOBJECT2;

typedef struct IViewObject2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IViewObject2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IViewObject2 *This);

    ULONG(__stdcall *Release)
    (
        IViewObject2 *This);

    HRESULT(__stdcall *Draw)
    (
        IViewObject2 *This,

        DWORD dwDrawAspect,

        LONG lindex,

        void *pvAspect,

        DVTARGETDEVICE *ptd,

        HDC hdcTargetDev,

        HDC hdcDraw,

        LPCRECTL lprcBounds,

        ULONG_PTR dwContinue);

    HRESULT(__stdcall *GetColorSet)
    (
        IViewObject2 *This,

        DWORD dwDrawAspect,

        LONG lindex,

        void *pvAspect,

        DVTARGETDEVICE *ptd,

        HDC hicTargetDev,

        LOGPALETTE **ppColorSet);

    HRESULT(__stdcall *Freeze)
    (
        IViewObject2 *This,

        DWORD dwDrawAspect,

        LONG lindex,

        void *pvAspect,

        DWORD *pdwFreeze);

    HRESULT(__stdcall *Unfreeze)
    (
        IViewObject2 *This,
        DWORD dwFreeze);

    HRESULT(__stdcall *SetAdvise)
    (
        IViewObject2 *This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);

    HRESULT(__stdcall *GetAdvise)
    (
        IViewObject2 *This,

        DWORD *pAspects,

        DWORD *pAdvf,

        IAdviseSink **ppAdvSink);

    HRESULT(__stdcall *GetExtent)
    (
        IViewObject2 *This,
        DWORD dwDrawAspect,
        LONG lindex,
        DVTARGETDEVICE *ptd,
        LPSIZEL lpsizel);

} IViewObject2Vtbl;

struct IViewObject2
{
    struct IViewObject2Vtbl *lpVtbl;
};
typedef IDropSource *LPDROPSOURCE;

typedef struct IDropSourceVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDropSource *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDropSource *This);

    ULONG(__stdcall *Release)
    (
        IDropSource *This);

    HRESULT(__stdcall *QueryContinueDrag)
    (
        IDropSource *This,

        BOOL fEscapePressed,

        DWORD grfKeyState);

    HRESULT(__stdcall *GiveFeedback)
    (
        IDropSource *This,

        DWORD dwEffect);

} IDropSourceVtbl;

struct IDropSource
{
    struct IDropSourceVtbl *lpVtbl;
};
typedef IDropTarget *LPDROPTARGET;

typedef struct IDropTargetVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDropTarget *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDropTarget *This);

    ULONG(__stdcall *Release)
    (
        IDropTarget *This);

    HRESULT(__stdcall *DragEnter)
    (
        IDropTarget *This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

    HRESULT(__stdcall *DragOver)
    (
        IDropTarget *This,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

    HRESULT(__stdcall *DragLeave)
    (
        IDropTarget *This);

    HRESULT(__stdcall *Drop)
    (
        IDropTarget *This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

} IDropTargetVtbl;

struct IDropTarget
{
    struct IDropTargetVtbl *lpVtbl;
};

typedef struct IDropSourceNotifyVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDropSourceNotify *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDropSourceNotify *This);

    ULONG(__stdcall *Release)
    (
        IDropSourceNotify *This);

    HRESULT(__stdcall *DragEnterTarget)
    (
        IDropSourceNotify *This,

        HWND hwndTarget);

    HRESULT(__stdcall *DragLeaveTarget)
    (
        IDropSourceNotify *This);

} IDropSourceNotifyVtbl;

struct IDropSourceNotify
{
    struct IDropSourceNotifyVtbl *lpVtbl;
};

typedef struct IEnterpriseDropTargetVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnterpriseDropTarget *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnterpriseDropTarget *This);

    ULONG(__stdcall *Release)
    (
        IEnterpriseDropTarget *This);

    HRESULT(__stdcall *SetDropSourceEnterpriseId)
    (
        IEnterpriseDropTarget *This,
        LPCWSTR identity);

    HRESULT(__stdcall *IsEvaluatingEdpPolicy)
    (
        IEnterpriseDropTarget *This,
        BOOL *value);

} IEnterpriseDropTargetVtbl;

struct IEnterpriseDropTarget
{
    struct IEnterpriseDropTargetVtbl *lpVtbl;
};

typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
{
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
} OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef enum tagOLEVERBATTRIB
{
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2
} OLEVERBATTRIB;

typedef struct IEnumOLEVERBVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEnumOLEVERB *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEnumOLEVERB *This);

    ULONG(__stdcall *Release)
    (
        IEnumOLEVERB *This);

    HRESULT(__stdcall *Next)
    (
        IEnumOLEVERB *This,

        ULONG celt,

        LPOLEVERB rgelt,

        ULONG *pceltFetched);

    HRESULT(__stdcall *Skip)
    (
        IEnumOLEVERB *This,
        ULONG celt);

    HRESULT(__stdcall *Reset)
    (
        IEnumOLEVERB *This);

    HRESULT(__stdcall *Clone)
    (
        IEnumOLEVERB *This,
        IEnumOLEVERB **ppenum);

} IEnumOLEVERBVtbl;

struct IEnumOLEVERB
{
    struct IEnumOLEVERBVtbl *lpVtbl;
};
typedef struct IServiceProvider IServiceProvider;
typedef IServiceProvider *LPSERVICEPROVIDER;
typedef struct IServiceProviderVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IServiceProvider *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IServiceProvider *This);

    ULONG(__stdcall *Release)
    (
        IServiceProvider *This);

    HRESULT(__stdcall *QueryService)
    (
        IServiceProvider *This,

        const GUID *const guidService,

        const IID *const riid,

        void **ppvObject);

} IServiceProviderVtbl;

struct IServiceProvider
{
    struct IServiceProviderVtbl *lpVtbl;
};
typedef struct IXMLDOMImplementation IXMLDOMImplementation;

typedef struct IXMLDOMNode IXMLDOMNode;

typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;

typedef struct IXMLDOMDocument IXMLDOMDocument;

typedef struct IXMLDOMNodeList IXMLDOMNodeList;

typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;

typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;

typedef struct IXMLDOMAttribute IXMLDOMAttribute;

typedef struct IXMLDOMElement IXMLDOMElement;

typedef struct IXMLDOMText IXMLDOMText;

typedef struct IXMLDOMComment IXMLDOMComment;

typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;

typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;

typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;

typedef struct IXMLDOMNotation IXMLDOMNotation;

typedef struct IXMLDOMEntity IXMLDOMEntity;

typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;

typedef struct IXMLDOMParseError IXMLDOMParseError;

typedef struct IXTLRuntime IXTLRuntime;

typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;

typedef struct DOMDocument DOMDocument;
typedef struct DOMFreeThreadedDocument DOMFreeThreadedDocument;

typedef struct IXMLHttpRequest IXMLHttpRequest;

typedef struct XMLHTTPRequest XMLHTTPRequest;

typedef struct IXMLDSOControl IXMLDSOControl;

typedef struct XMLDSOControl XMLDSOControl;

typedef struct IXMLElementCollection IXMLElementCollection;

typedef struct IXMLDocument IXMLDocument;

typedef struct IXMLDocument2 IXMLDocument2;

typedef struct IXMLElement IXMLElement;

typedef struct IXMLElement2 IXMLElement2;

typedef struct IXMLAttribute IXMLAttribute;

typedef struct IXMLError IXMLError;

typedef struct XMLDocument XMLDocument;

typedef struct _xml_error
{
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
} XML_ERROR;

typedef enum tagDOMNodeType
{
    NODE_INVALID = 0,
    NODE_ELEMENT = (NODE_INVALID + 1),
    NODE_ATTRIBUTE = (NODE_ELEMENT + 1),
    NODE_TEXT = (NODE_ATTRIBUTE + 1),
    NODE_CDATA_SECTION = (NODE_TEXT + 1),
    NODE_ENTITY_REFERENCE = (NODE_CDATA_SECTION + 1),
    NODE_ENTITY = (NODE_ENTITY_REFERENCE + 1),
    NODE_PROCESSING_INSTRUCTION = (NODE_ENTITY + 1),
    NODE_COMMENT = (NODE_PROCESSING_INSTRUCTION + 1),
    NODE_DOCUMENT = (NODE_COMMENT + 1),
    NODE_DOCUMENT_TYPE = (NODE_DOCUMENT + 1),
    NODE_DOCUMENT_FRAGMENT = (NODE_DOCUMENT_TYPE + 1),
    NODE_NOTATION = (NODE_DOCUMENT_FRAGMENT + 1)
} DOMNodeType;

typedef enum tagXMLEMEM_TYPE
{
    XMLELEMTYPE_ELEMENT = 0,
    XMLELEMTYPE_TEXT = (XMLELEMTYPE_ELEMENT + 1),
    XMLELEMTYPE_COMMENT = (XMLELEMTYPE_TEXT + 1),
    XMLELEMTYPE_DOCUMENT = (XMLELEMTYPE_COMMENT + 1),
    XMLELEMTYPE_DTD = (XMLELEMTYPE_DOCUMENT + 1),
    XMLELEMTYPE_PI = (XMLELEMTYPE_DTD + 1),
    XMLELEMTYPE_OTHER = (XMLELEMTYPE_PI + 1)
} XMLELEM_TYPE;

typedef struct IXMLDOMImplementationVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMImplementation *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMImplementation *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMImplementation *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMImplementation *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMImplementation *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMImplementation *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMImplementation *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *hasFeature)
    (
        IXMLDOMImplementation *This,
        BSTR feature,
        BSTR version,
        VARIANT_BOOL *hasFeature);

} IXMLDOMImplementationVtbl;

struct IXMLDOMImplementation
{
    struct IXMLDOMImplementationVtbl *lpVtbl;
};
typedef struct IXMLDOMNodeVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMNode *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMNode *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMNode *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMNode *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMNode *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMNode *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMNode *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMNode *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMNode *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMNode *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMNode *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMNode *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMNode *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMNode *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMNode *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMNode *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMNode *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMNode *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMNode *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMNode *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMNode *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMNode *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMNode *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMNode *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMNode *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMNode *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMNode *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMNode *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMNode *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMNode *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMNode *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMNode *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMNode *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMNode *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMNode *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMNode *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMNode *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMNode *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMNode *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMNode *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMNode *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMNode *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMNode *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

} IXMLDOMNodeVtbl;

struct IXMLDOMNode
{
    struct IXMLDOMNodeVtbl *lpVtbl;
};
typedef struct IXMLDOMDocumentFragmentVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMDocumentFragment *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMDocumentFragment *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMDocumentFragment *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMDocumentFragment *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMDocumentFragment *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMDocumentFragment *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMDocumentFragment *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMDocumentFragment *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMDocumentFragment *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMDocumentFragment *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMDocumentFragment *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMDocumentFragment *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMDocumentFragment *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMDocumentFragment *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMDocumentFragment *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMDocumentFragment *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMDocumentFragment *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMDocumentFragment *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMDocumentFragment *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMDocumentFragment *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMDocumentFragment *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

} IXMLDOMDocumentFragmentVtbl;

struct IXMLDOMDocumentFragment
{
    struct IXMLDOMDocumentFragmentVtbl *lpVtbl;
};
typedef struct IXMLDOMDocumentVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMDocument *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMDocument *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMDocument *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMDocument *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMDocument *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMDocument *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMDocument *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMDocument *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMDocument *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMDocument *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMDocument *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMDocument *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMDocument *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMDocument *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMDocument *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMDocument *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMDocument *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMDocument *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMDocument *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMDocument *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMDocument *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMDocument *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMDocument *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMDocument *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMDocument *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMDocument *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMDocument *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMDocument *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_doctype)
    (
        IXMLDOMDocument *This,
        IXMLDOMDocumentType **documentType);

    HRESULT(__stdcall *get_implementation)
    (
        IXMLDOMDocument *This,
        IXMLDOMImplementation **impl);

    HRESULT(__stdcall *get_documentElement)
    (
        IXMLDOMDocument *This,
        IXMLDOMElement **DOMElement);

    HRESULT(__stdcall *putref_documentElement)
    (
        IXMLDOMDocument *This,
        IXMLDOMElement *DOMElement);

    HRESULT(__stdcall *createElement)
    (
        IXMLDOMDocument *This,
        BSTR tagName,
        IXMLDOMElement **element);

    HRESULT(__stdcall *createDocumentFragment)
    (
        IXMLDOMDocument *This,
        IXMLDOMDocumentFragment **docFrag);

    HRESULT(__stdcall *createTextNode)
    (
        IXMLDOMDocument *This,
        BSTR data,
        IXMLDOMText **text);

    HRESULT(__stdcall *createComment)
    (
        IXMLDOMDocument *This,
        BSTR data,
        IXMLDOMComment **comment);

    HRESULT(__stdcall *createCDATASection)
    (
        IXMLDOMDocument *This,
        BSTR data,
        IXMLDOMCDATASection **cdata);

    HRESULT(__stdcall *createProcessingInstruction)
    (
        IXMLDOMDocument *This,
        BSTR target,
        BSTR data,
        IXMLDOMProcessingInstruction **pi);

    HRESULT(__stdcall *createAttribute)
    (
        IXMLDOMDocument *This,
        BSTR name,
        IXMLDOMAttribute **attribute);

    HRESULT(__stdcall *createEntityReference)
    (
        IXMLDOMDocument *This,
        BSTR name,
        IXMLDOMEntityReference **entityRef);

    HRESULT(__stdcall *getElementsByTagName)
    (
        IXMLDOMDocument *This,
        BSTR tagName,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *createNode)
    (
        IXMLDOMDocument *This,
        VARIANT Type,
        BSTR name,
        BSTR namespaceURI,
        IXMLDOMNode **node);

    HRESULT(__stdcall *nodeFromID)
    (
        IXMLDOMDocument *This,
        BSTR idString,
        IXMLDOMNode **node);

    HRESULT(__stdcall *load)
    (
        IXMLDOMDocument *This,
        VARIANT xmlSource,
        VARIANT_BOOL *isSuccessful);

    HRESULT(__stdcall *get_readyState)
    (
        IXMLDOMDocument *This,
        long *value);

    HRESULT(__stdcall *get_parseError)
    (
        IXMLDOMDocument *This,
        IXMLDOMParseError **errorObj);

    HRESULT(__stdcall *get_url)
    (
        IXMLDOMDocument *This,
        BSTR *urlString);

    HRESULT(__stdcall *get_async)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL *isAsync);

    HRESULT(__stdcall *put_async)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL isAsync);

    HRESULT(__stdcall *abort)
    (
        IXMLDOMDocument *This);

    HRESULT(__stdcall *loadXML)
    (
        IXMLDOMDocument *This,
        BSTR bstrXML,
        VARIANT_BOOL *isSuccessful);

    HRESULT(__stdcall *save)
    (
        IXMLDOMDocument *This,
        VARIANT destination);

    HRESULT(__stdcall *get_validateOnParse)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL *isValidating);

    HRESULT(__stdcall *put_validateOnParse)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL isValidating);

    HRESULT(__stdcall *get_resolveExternals)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL *isResolving);

    HRESULT(__stdcall *put_resolveExternals)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL isResolving);

    HRESULT(__stdcall *get_preserveWhiteSpace)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL *isPreserving);

    HRESULT(__stdcall *put_preserveWhiteSpace)
    (
        IXMLDOMDocument *This,
        VARIANT_BOOL isPreserving);

    HRESULT(__stdcall *put_onreadystatechange)
    (
        IXMLDOMDocument *This,
        VARIANT readystatechangeSink);

    HRESULT(__stdcall *put_ondataavailable)
    (
        IXMLDOMDocument *This,
        VARIANT ondataavailableSink);

    HRESULT(__stdcall *put_ontransformnode)
    (
        IXMLDOMDocument *This,
        VARIANT ontransformnodeSink);

} IXMLDOMDocumentVtbl;

struct IXMLDOMDocument
{
    struct IXMLDOMDocumentVtbl *lpVtbl;
};
typedef struct IXMLDOMNodeListVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMNodeList *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMNodeList *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMNodeList *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMNodeList *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMNodeList *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMNodeList *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMNodeList *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_item)
    (
        IXMLDOMNodeList *This,
        long index,
        IXMLDOMNode **listItem);

    HRESULT(__stdcall *get_length)
    (
        IXMLDOMNodeList *This,
        long *listLength);

    HRESULT(__stdcall *nextNode)
    (
        IXMLDOMNodeList *This,
        IXMLDOMNode **nextItem);

    HRESULT(__stdcall *reset)
    (
        IXMLDOMNodeList *This);

    HRESULT(__stdcall *get__newEnum)
    (
        IXMLDOMNodeList *This,
        IUnknown **ppUnk);

} IXMLDOMNodeListVtbl;

struct IXMLDOMNodeList
{
    struct IXMLDOMNodeListVtbl *lpVtbl;
};
typedef struct IXMLDOMNamedNodeMapVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMNamedNodeMap *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMNamedNodeMap *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMNamedNodeMap *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMNamedNodeMap *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMNamedNodeMap *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMNamedNodeMap *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMNamedNodeMap *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *getNamedItem)
    (
        IXMLDOMNamedNodeMap *This,
        BSTR name,
        IXMLDOMNode **namedItem);

    HRESULT(__stdcall *setNamedItem)
    (
        IXMLDOMNamedNodeMap *This,
        IXMLDOMNode *newItem,
        IXMLDOMNode **nameItem);

    HRESULT(__stdcall *removeNamedItem)
    (
        IXMLDOMNamedNodeMap *This,
        BSTR name,
        IXMLDOMNode **namedItem);

    HRESULT(__stdcall *get_item)
    (
        IXMLDOMNamedNodeMap *This,
        long index,
        IXMLDOMNode **listItem);

    HRESULT(__stdcall *get_length)
    (
        IXMLDOMNamedNodeMap *This,
        long *listLength);

    HRESULT(__stdcall *getQualifiedItem)
    (
        IXMLDOMNamedNodeMap *This,
        BSTR baseName,
        BSTR namespaceURI,
        IXMLDOMNode **qualifiedItem);

    HRESULT(__stdcall *removeQualifiedItem)
    (
        IXMLDOMNamedNodeMap *This,
        BSTR baseName,
        BSTR namespaceURI,
        IXMLDOMNode **qualifiedItem);

    HRESULT(__stdcall *nextNode)
    (
        IXMLDOMNamedNodeMap *This,
        IXMLDOMNode **nextItem);

    HRESULT(__stdcall *reset)
    (
        IXMLDOMNamedNodeMap *This);

    HRESULT(__stdcall *get__newEnum)
    (
        IXMLDOMNamedNodeMap *This,
        IUnknown **ppUnk);

} IXMLDOMNamedNodeMapVtbl;

struct IXMLDOMNamedNodeMap
{
    struct IXMLDOMNamedNodeMapVtbl *lpVtbl;
};
typedef struct IXMLDOMCharacterDataVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMCharacterData *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMCharacterData *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMCharacterData *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMCharacterData *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMCharacterData *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMCharacterData *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMCharacterData *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMCharacterData *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMCharacterData *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMCharacterData *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMCharacterData *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMCharacterData *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMCharacterData *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMCharacterData *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMCharacterData *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMCharacterData *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMCharacterData *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMCharacterData *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMCharacterData *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMCharacterData *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMCharacterData *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMCharacterData *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMCharacterData *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMCharacterData *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMCharacterData *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMCharacterData *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMCharacterData *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMCharacterData *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMCharacterData *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_data)
    (
        IXMLDOMCharacterData *This,
        BSTR *data);

    HRESULT(__stdcall *put_data)
    (
        IXMLDOMCharacterData *This,
        BSTR data);

    HRESULT(__stdcall *get_length)
    (
        IXMLDOMCharacterData *This,
        long *dataLength);

    HRESULT(__stdcall *substringData)
    (
        IXMLDOMCharacterData *This,
        long offset,
        long count,
        BSTR *data);

    HRESULT(__stdcall *appendData)
    (
        IXMLDOMCharacterData *This,
        BSTR data);

    HRESULT(__stdcall *insertData)
    (
        IXMLDOMCharacterData *This,
        long offset,
        BSTR data);

    HRESULT(__stdcall *deleteData)
    (
        IXMLDOMCharacterData *This,
        long offset,
        long count);

    HRESULT(__stdcall *replaceData)
    (
        IXMLDOMCharacterData *This,
        long offset,
        long count,
        BSTR data);

} IXMLDOMCharacterDataVtbl;

struct IXMLDOMCharacterData
{
    struct IXMLDOMCharacterDataVtbl *lpVtbl;
};
typedef struct IXMLDOMAttributeVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMAttribute *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMAttribute *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMAttribute *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMAttribute *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMAttribute *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMAttribute *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMAttribute *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMAttribute *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMAttribute *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMAttribute *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMAttribute *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMAttribute *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMAttribute *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMAttribute *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMAttribute *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMAttribute *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMAttribute *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMAttribute *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMAttribute *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMAttribute *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMAttribute *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMAttribute *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMAttribute *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMAttribute *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMAttribute *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMAttribute *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMAttribute *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMAttribute *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMAttribute *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMAttribute *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_name)
    (
        IXMLDOMAttribute *This,
        BSTR *attributeName);

    HRESULT(__stdcall *get_value)
    (
        IXMLDOMAttribute *This,
        VARIANT *attributeValue);

    HRESULT(__stdcall *put_value)
    (
        IXMLDOMAttribute *This,
        VARIANT attributeValue);

} IXMLDOMAttributeVtbl;

struct IXMLDOMAttribute
{
    struct IXMLDOMAttributeVtbl *lpVtbl;
};
typedef struct IXMLDOMElementVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMElement *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMElement *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMElement *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMElement *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMElement *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMElement *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMElement *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMElement *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMElement *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMElement *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMElement *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMElement *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMElement *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMElement *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMElement *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMElement *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMElement *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMElement *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMElement *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMElement *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMElement *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMElement *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMElement *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMElement *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMElement *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMElement *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMElement *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMElement *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMElement *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMElement *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMElement *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMElement *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMElement *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMElement *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMElement *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMElement *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMElement *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMElement *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMElement *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMElement *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMElement *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMElement *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMElement *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_tagName)
    (
        IXMLDOMElement *This,
        BSTR *tagName);

    HRESULT(__stdcall *getAttribute)
    (
        IXMLDOMElement *This,
        BSTR name,
        VARIANT *value);

    HRESULT(__stdcall *setAttribute)
    (
        IXMLDOMElement *This,
        BSTR name,
        VARIANT value);

    HRESULT(__stdcall *removeAttribute)
    (
        IXMLDOMElement *This,
        BSTR name);

    HRESULT(__stdcall *getAttributeNode)
    (
        IXMLDOMElement *This,
        BSTR name,
        IXMLDOMAttribute **attributeNode);

    HRESULT(__stdcall *setAttributeNode)
    (
        IXMLDOMElement *This,
        IXMLDOMAttribute *DOMAttribute,
        IXMLDOMAttribute **attributeNode);

    HRESULT(__stdcall *removeAttributeNode)
    (
        IXMLDOMElement *This,
        IXMLDOMAttribute *DOMAttribute,
        IXMLDOMAttribute **attributeNode);

    HRESULT(__stdcall *getElementsByTagName)
    (
        IXMLDOMElement *This,
        BSTR tagName,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *normalize)
    (
        IXMLDOMElement *This);

} IXMLDOMElementVtbl;

struct IXMLDOMElement
{
    struct IXMLDOMElementVtbl *lpVtbl;
};
typedef struct IXMLDOMTextVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMText *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMText *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMText *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMText *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMText *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMText *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMText *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMText *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMText *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMText *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMText *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMText *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMText *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMText *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMText *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMText *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMText *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMText *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMText *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMText *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMText *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMText *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMText *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMText *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMText *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMText *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMText *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMText *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMText *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMText *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMText *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMText *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMText *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMText *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMText *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMText *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMText *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMText *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMText *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMText *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMText *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMText *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMText *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_data)
    (
        IXMLDOMText *This,
        BSTR *data);

    HRESULT(__stdcall *put_data)
    (
        IXMLDOMText *This,
        BSTR data);

    HRESULT(__stdcall *get_length)
    (
        IXMLDOMText *This,
        long *dataLength);

    HRESULT(__stdcall *substringData)
    (
        IXMLDOMText *This,
        long offset,
        long count,
        BSTR *data);

    HRESULT(__stdcall *appendData)
    (
        IXMLDOMText *This,
        BSTR data);

    HRESULT(__stdcall *insertData)
    (
        IXMLDOMText *This,
        long offset,
        BSTR data);

    HRESULT(__stdcall *deleteData)
    (
        IXMLDOMText *This,
        long offset,
        long count);

    HRESULT(__stdcall *replaceData)
    (
        IXMLDOMText *This,
        long offset,
        long count,
        BSTR data);

    HRESULT(__stdcall *splitText)
    (
        IXMLDOMText *This,
        long offset,
        IXMLDOMText **rightHandTextNode);

} IXMLDOMTextVtbl;

struct IXMLDOMText
{
    struct IXMLDOMTextVtbl *lpVtbl;
};
typedef struct IXMLDOMCommentVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMComment *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMComment *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMComment *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMComment *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMComment *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMComment *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMComment *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMComment *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMComment *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMComment *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMComment *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMComment *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMComment *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMComment *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMComment *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMComment *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMComment *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMComment *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMComment *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMComment *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMComment *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMComment *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMComment *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMComment *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMComment *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMComment *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMComment *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMComment *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMComment *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMComment *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMComment *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMComment *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMComment *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMComment *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMComment *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMComment *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMComment *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMComment *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMComment *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMComment *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMComment *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMComment *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMComment *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_data)
    (
        IXMLDOMComment *This,
        BSTR *data);

    HRESULT(__stdcall *put_data)
    (
        IXMLDOMComment *This,
        BSTR data);

    HRESULT(__stdcall *get_length)
    (
        IXMLDOMComment *This,
        long *dataLength);

    HRESULT(__stdcall *substringData)
    (
        IXMLDOMComment *This,
        long offset,
        long count,
        BSTR *data);

    HRESULT(__stdcall *appendData)
    (
        IXMLDOMComment *This,
        BSTR data);

    HRESULT(__stdcall *insertData)
    (
        IXMLDOMComment *This,
        long offset,
        BSTR data);

    HRESULT(__stdcall *deleteData)
    (
        IXMLDOMComment *This,
        long offset,
        long count);

    HRESULT(__stdcall *replaceData)
    (
        IXMLDOMComment *This,
        long offset,
        long count,
        BSTR data);

} IXMLDOMCommentVtbl;

struct IXMLDOMComment
{
    struct IXMLDOMCommentVtbl *lpVtbl;
};
typedef struct IXMLDOMProcessingInstructionVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMProcessingInstruction *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMProcessingInstruction *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMProcessingInstruction *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMProcessingInstruction *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMProcessingInstruction *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMProcessingInstruction *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMProcessingInstruction *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMProcessingInstruction *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMProcessingInstruction *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMProcessingInstruction *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_target)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *name);

    HRESULT(__stdcall *get_data)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR *value);

    HRESULT(__stdcall *put_data)
    (
        IXMLDOMProcessingInstruction *This,
        BSTR value);

} IXMLDOMProcessingInstructionVtbl;

struct IXMLDOMProcessingInstruction
{
    struct IXMLDOMProcessingInstructionVtbl *lpVtbl;
};
typedef struct IXMLDOMCDATASectionVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMCDATASection *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMCDATASection *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMCDATASection *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMCDATASection *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMCDATASection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMCDATASection *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMCDATASection *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMCDATASection *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMCDATASection *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMCDATASection *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMCDATASection *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMCDATASection *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMCDATASection *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMCDATASection *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMCDATASection *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMCDATASection *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMCDATASection *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMCDATASection *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMCDATASection *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMCDATASection *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMCDATASection *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMCDATASection *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMCDATASection *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMCDATASection *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMCDATASection *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMCDATASection *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMCDATASection *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMCDATASection *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMCDATASection *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_data)
    (
        IXMLDOMCDATASection *This,
        BSTR *data);

    HRESULT(__stdcall *put_data)
    (
        IXMLDOMCDATASection *This,
        BSTR data);

    HRESULT(__stdcall *get_length)
    (
        IXMLDOMCDATASection *This,
        long *dataLength);

    HRESULT(__stdcall *substringData)
    (
        IXMLDOMCDATASection *This,
        long offset,
        long count,
        BSTR *data);

    HRESULT(__stdcall *appendData)
    (
        IXMLDOMCDATASection *This,
        BSTR data);

    HRESULT(__stdcall *insertData)
    (
        IXMLDOMCDATASection *This,
        long offset,
        BSTR data);

    HRESULT(__stdcall *deleteData)
    (
        IXMLDOMCDATASection *This,
        long offset,
        long count);

    HRESULT(__stdcall *replaceData)
    (
        IXMLDOMCDATASection *This,
        long offset,
        long count,
        BSTR data);

    HRESULT(__stdcall *splitText)
    (
        IXMLDOMCDATASection *This,
        long offset,
        IXMLDOMText **rightHandTextNode);

} IXMLDOMCDATASectionVtbl;

struct IXMLDOMCDATASection
{
    struct IXMLDOMCDATASectionVtbl *lpVtbl;
};
typedef struct IXMLDOMDocumentTypeVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMDocumentType *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMDocumentType *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMDocumentType *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMDocumentType *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMDocumentType *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMDocumentType *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMDocumentType *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMDocumentType *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMDocumentType *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMDocumentType *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMDocumentType *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMDocumentType *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMDocumentType *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMDocumentType *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMDocumentType *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMDocumentType *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMDocumentType *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMDocumentType *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMDocumentType *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMDocumentType *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMDocumentType *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMDocumentType *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMDocumentType *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMDocumentType *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMDocumentType *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMDocumentType *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMDocumentType *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMDocumentType *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_name)
    (
        IXMLDOMDocumentType *This,
        BSTR *rootName);

    HRESULT(__stdcall *get_entities)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNamedNodeMap **entityMap);

    HRESULT(__stdcall *get_notations)
    (
        IXMLDOMDocumentType *This,
        IXMLDOMNamedNodeMap **notationMap);

} IXMLDOMDocumentTypeVtbl;

struct IXMLDOMDocumentType
{
    struct IXMLDOMDocumentTypeVtbl *lpVtbl;
};
typedef struct IXMLDOMNotationVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMNotation *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMNotation *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMNotation *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMNotation *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMNotation *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMNotation *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMNotation *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMNotation *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMNotation *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMNotation *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMNotation *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMNotation *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMNotation *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMNotation *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMNotation *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMNotation *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMNotation *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMNotation *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMNotation *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMNotation *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMNotation *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMNotation *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMNotation *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMNotation *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMNotation *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMNotation *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMNotation *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMNotation *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMNotation *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMNotation *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMNotation *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMNotation *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_publicId)
    (
        IXMLDOMNotation *This,
        VARIANT *publicID);

    HRESULT(__stdcall *get_systemId)
    (
        IXMLDOMNotation *This,
        VARIANT *systemID);

} IXMLDOMNotationVtbl;

struct IXMLDOMNotation
{
    struct IXMLDOMNotationVtbl *lpVtbl;
};
typedef struct IXMLDOMEntityVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMEntity *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMEntity *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMEntity *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMEntity *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMEntity *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMEntity *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMEntity *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMEntity *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMEntity *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMEntity *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMEntity *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMEntity *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMEntity *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMEntity *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMEntity *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMEntity *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMEntity *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMEntity *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMEntity *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMEntity *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMEntity *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMEntity *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMEntity *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMEntity *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMEntity *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMEntity *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMEntity *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMEntity *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMEntity *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMEntity *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMEntity *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMEntity *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *get_publicId)
    (
        IXMLDOMEntity *This,
        VARIANT *publicID);

    HRESULT(__stdcall *get_systemId)
    (
        IXMLDOMEntity *This,
        VARIANT *systemID);

    HRESULT(__stdcall *get_notationName)
    (
        IXMLDOMEntity *This,
        BSTR *name);

} IXMLDOMEntityVtbl;

struct IXMLDOMEntity
{
    struct IXMLDOMEntityVtbl *lpVtbl;
};
typedef struct IXMLDOMEntityReferenceVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMEntityReference *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMEntityReference *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMEntityReference *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMEntityReference *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMEntityReference *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMEntityReference *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMEntityReference *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXMLDOMEntityReference *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXMLDOMEntityReference *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXMLDOMEntityReference *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXMLDOMEntityReference *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXMLDOMEntityReference *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXMLDOMEntityReference *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXMLDOMEntityReference *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXMLDOMEntityReference *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXMLDOMEntityReference *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXMLDOMEntityReference *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXMLDOMEntityReference *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXMLDOMEntityReference *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXMLDOMEntityReference *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXMLDOMEntityReference *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXMLDOMEntityReference *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXMLDOMEntityReference *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXMLDOMEntityReference *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXMLDOMEntityReference *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXMLDOMEntityReference *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXMLDOMEntityReference *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXMLDOMEntityReference *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXMLDOMEntityReference *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

} IXMLDOMEntityReferenceVtbl;

struct IXMLDOMEntityReference
{
    struct IXMLDOMEntityReferenceVtbl *lpVtbl;
};
typedef struct IXMLDOMParseErrorVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDOMParseError *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDOMParseError *This);

    ULONG(__stdcall *Release)
    (
        IXMLDOMParseError *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDOMParseError *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDOMParseError *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDOMParseError *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDOMParseError *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_errorCode)
    (
        IXMLDOMParseError *This,
        long *errorCode);

    HRESULT(__stdcall *get_url)
    (
        IXMLDOMParseError *This,
        BSTR *urlString);

    HRESULT(__stdcall *get_reason)
    (
        IXMLDOMParseError *This,
        BSTR *reasonString);

    HRESULT(__stdcall *get_srcText)
    (
        IXMLDOMParseError *This,
        BSTR *sourceString);

    HRESULT(__stdcall *get_line)
    (
        IXMLDOMParseError *This,
        long *lineNumber);

    HRESULT(__stdcall *get_linepos)
    (
        IXMLDOMParseError *This,
        long *linePosition);

    HRESULT(__stdcall *get_filepos)
    (
        IXMLDOMParseError *This,
        long *filePosition);

} IXMLDOMParseErrorVtbl;

struct IXMLDOMParseError
{
    struct IXMLDOMParseErrorVtbl *lpVtbl;
};
typedef struct IXTLRuntimeVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXTLRuntime *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXTLRuntime *This);

    ULONG(__stdcall *Release)
    (
        IXTLRuntime *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXTLRuntime *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXTLRuntime *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXTLRuntime *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXTLRuntime *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_nodeName)
    (
        IXTLRuntime *This,
        BSTR *name);

    HRESULT(__stdcall *get_nodeValue)
    (
        IXTLRuntime *This,
        VARIANT *value);

    HRESULT(__stdcall *put_nodeValue)
    (
        IXTLRuntime *This,
        VARIANT value);

    HRESULT(__stdcall *get_nodeType)
    (
        IXTLRuntime *This,
        DOMNodeType *type);

    HRESULT(__stdcall *get_parentNode)
    (
        IXTLRuntime *This,
        IXMLDOMNode **parent);

    HRESULT(__stdcall *get_childNodes)
    (
        IXTLRuntime *This,
        IXMLDOMNodeList **childList);

    HRESULT(__stdcall *get_firstChild)
    (
        IXTLRuntime *This,
        IXMLDOMNode **firstChild);

    HRESULT(__stdcall *get_lastChild)
    (
        IXTLRuntime *This,
        IXMLDOMNode **lastChild);

    HRESULT(__stdcall *get_previousSibling)
    (
        IXTLRuntime *This,
        IXMLDOMNode **previousSibling);

    HRESULT(__stdcall *get_nextSibling)
    (
        IXTLRuntime *This,
        IXMLDOMNode **nextSibling);

    HRESULT(__stdcall *get_attributes)
    (
        IXTLRuntime *This,
        IXMLDOMNamedNodeMap **attributeMap);

    HRESULT(__stdcall *insertBefore)
    (
        IXTLRuntime *This,
        IXMLDOMNode *newChild,
        VARIANT refChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *replaceChild)
    (
        IXTLRuntime *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode *oldChild,
        IXMLDOMNode **outOldChild);

    HRESULT(__stdcall *removeChild)
    (
        IXTLRuntime *This,
        IXMLDOMNode *childNode,
        IXMLDOMNode **oldChild);

    HRESULT(__stdcall *appendChild)
    (
        IXTLRuntime *This,
        IXMLDOMNode *newChild,
        IXMLDOMNode **outNewChild);

    HRESULT(__stdcall *hasChildNodes)
    (
        IXTLRuntime *This,
        VARIANT_BOOL *hasChild);

    HRESULT(__stdcall *get_ownerDocument)
    (
        IXTLRuntime *This,
        IXMLDOMDocument **XMLDOMDocument);

    HRESULT(__stdcall *cloneNode)
    (
        IXTLRuntime *This,
        VARIANT_BOOL deep,
        IXMLDOMNode **cloneRoot);

    HRESULT(__stdcall *get_nodeTypeString)
    (
        IXTLRuntime *This,
        BSTR *nodeType);

    HRESULT(__stdcall *get_text)
    (
        IXTLRuntime *This,
        BSTR *text);

    HRESULT(__stdcall *put_text)
    (
        IXTLRuntime *This,
        BSTR text);

    HRESULT(__stdcall *get_specified)
    (
        IXTLRuntime *This,
        VARIANT_BOOL *isSpecified);

    HRESULT(__stdcall *get_definition)
    (
        IXTLRuntime *This,
        IXMLDOMNode **definitionNode);

    HRESULT(__stdcall *get_nodeTypedValue)
    (
        IXTLRuntime *This,
        VARIANT *typedValue);

    HRESULT(__stdcall *put_nodeTypedValue)
    (
        IXTLRuntime *This,
        VARIANT typedValue);

    HRESULT(__stdcall *get_dataType)
    (
        IXTLRuntime *This,
        VARIANT *dataTypeName);

    HRESULT(__stdcall *put_dataType)
    (
        IXTLRuntime *This,
        BSTR dataTypeName);

    HRESULT(__stdcall *get_xml)
    (
        IXTLRuntime *This,
        BSTR *xmlString);

    HRESULT(__stdcall *transformNode)
    (
        IXTLRuntime *This,
        IXMLDOMNode *stylesheet,
        BSTR *xmlString);

    HRESULT(__stdcall *selectNodes)
    (
        IXTLRuntime *This,
        BSTR queryString,
        IXMLDOMNodeList **resultList);

    HRESULT(__stdcall *selectSingleNode)
    (
        IXTLRuntime *This,
        BSTR queryString,
        IXMLDOMNode **resultNode);

    HRESULT(__stdcall *get_parsed)
    (
        IXTLRuntime *This,
        VARIANT_BOOL *isParsed);

    HRESULT(__stdcall *get_namespaceURI)
    (
        IXTLRuntime *This,
        BSTR *namespaceURI);

    HRESULT(__stdcall *get_prefix)
    (
        IXTLRuntime *This,
        BSTR *prefixString);

    HRESULT(__stdcall *get_baseName)
    (
        IXTLRuntime *This,
        BSTR *nameString);

    HRESULT(__stdcall *transformNodeToObject)
    (
        IXTLRuntime *This,
        IXMLDOMNode *stylesheet,
        VARIANT outputObject);

    HRESULT(__stdcall *uniqueID)
    (
        IXTLRuntime *This,
        IXMLDOMNode *pNode,
        long *pID);

    HRESULT(__stdcall *depth)
    (
        IXTLRuntime *This,
        IXMLDOMNode *pNode,
        long *pDepth);

    HRESULT(__stdcall *childNumber)
    (
        IXTLRuntime *This,
        IXMLDOMNode *pNode,
        long *pNumber);

    HRESULT(__stdcall *ancestorChildNumber)
    (
        IXTLRuntime *This,
        BSTR bstrNodeName,
        IXMLDOMNode *pNode,
        long *pNumber);

    HRESULT(__stdcall *absoluteChildNumber)
    (
        IXTLRuntime *This,
        IXMLDOMNode *pNode,
        long *pNumber);

    HRESULT(__stdcall *formatIndex)
    (
        IXTLRuntime *This,
        long lIndex,
        BSTR bstrFormat,
        BSTR *pbstrFormattedString);

    HRESULT(__stdcall *formatNumber)
    (
        IXTLRuntime *This,
        double dblNumber,
        BSTR bstrFormat,
        BSTR *pbstrFormattedString);

    HRESULT(__stdcall *formatDate)
    (
        IXTLRuntime *This,
        VARIANT varDate,
        BSTR bstrFormat,
        VARIANT varDestLocale,
        BSTR *pbstrFormattedString);

    HRESULT(__stdcall *formatTime)
    (
        IXTLRuntime *This,
        VARIANT varTime,
        BSTR bstrFormat,
        VARIANT varDestLocale,
        BSTR *pbstrFormattedString);

} IXTLRuntimeVtbl;

struct IXTLRuntime
{
    struct IXTLRuntimeVtbl *lpVtbl;
};

typedef struct XMLDOMDocumentEventsVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        XMLDOMDocumentEvents *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        XMLDOMDocumentEvents *This);

    ULONG(__stdcall *Release)
    (
        XMLDOMDocumentEvents *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        XMLDOMDocumentEvents *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        XMLDOMDocumentEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        XMLDOMDocumentEvents *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        XMLDOMDocumentEvents *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

} XMLDOMDocumentEventsVtbl;

struct XMLDOMDocumentEvents
{
    struct XMLDOMDocumentEventsVtbl *lpVtbl;
};

typedef struct IXMLHttpRequestVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLHttpRequest *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLHttpRequest *This);

    ULONG(__stdcall *Release)
    (
        IXMLHttpRequest *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLHttpRequest *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLHttpRequest *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLHttpRequest *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLHttpRequest *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *open)
    (
        IXMLHttpRequest *This,
        BSTR bstrMethod,
        BSTR bstrUrl,
        VARIANT varAsync,
        VARIANT bstrUser,
        VARIANT bstrPassword);

    HRESULT(__stdcall *setRequestHeader)
    (
        IXMLHttpRequest *This,
        BSTR bstrHeader,
        BSTR bstrValue);

    HRESULT(__stdcall *getResponseHeader)
    (
        IXMLHttpRequest *This,
        BSTR bstrHeader,
        BSTR *pbstrValue);

    HRESULT(__stdcall *getAllResponseHeaders)
    (
        IXMLHttpRequest *This,
        BSTR *pbstrHeaders);

    HRESULT(__stdcall *send)
    (
        IXMLHttpRequest *This,
        VARIANT varBody);

    HRESULT(__stdcall *abort)
    (
        IXMLHttpRequest *This);

    HRESULT(__stdcall *get_status)
    (
        IXMLHttpRequest *This,
        long *plStatus);

    HRESULT(__stdcall *get_statusText)
    (
        IXMLHttpRequest *This,
        BSTR *pbstrStatus);

    HRESULT(__stdcall *get_responseXML)
    (
        IXMLHttpRequest *This,
        IDispatch **ppBody);

    HRESULT(__stdcall *get_responseText)
    (
        IXMLHttpRequest *This,
        BSTR *pbstrBody);

    HRESULT(__stdcall *get_responseBody)
    (
        IXMLHttpRequest *This,
        VARIANT *pvarBody);

    HRESULT(__stdcall *get_responseStream)
    (
        IXMLHttpRequest *This,
        VARIANT *pvarBody);

    HRESULT(__stdcall *get_readyState)
    (
        IXMLHttpRequest *This,
        long *plState);

    HRESULT(__stdcall *put_onreadystatechange)
    (
        IXMLHttpRequest *This,
        IDispatch *pReadyStateSink);

} IXMLHttpRequestVtbl;

struct IXMLHttpRequest
{
    struct IXMLHttpRequestVtbl *lpVtbl;
};
typedef struct IXMLDSOControlVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDSOControl *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDSOControl *This);

    ULONG(__stdcall *Release)
    (
        IXMLDSOControl *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDSOControl *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDSOControl *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDSOControl *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDSOControl *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_XMLDocument)
    (
        IXMLDSOControl *This,
        IXMLDOMDocument **ppDoc);

    HRESULT(__stdcall *put_XMLDocument)
    (
        IXMLDSOControl *This,
        IXMLDOMDocument *ppDoc);

    HRESULT(__stdcall *get_JavaDSOCompatible)
    (
        IXMLDSOControl *This,
        BOOL *fJavaDSOCompatible);

    HRESULT(__stdcall *put_JavaDSOCompatible)
    (
        IXMLDSOControl *This,
        BOOL fJavaDSOCompatible);

    HRESULT(__stdcall *get_readyState)
    (
        IXMLDSOControl *This,
        long *state);

} IXMLDSOControlVtbl;

struct IXMLDSOControl
{
    struct IXMLDSOControlVtbl *lpVtbl;
};

typedef struct IXMLElementCollectionVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLElementCollection *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLElementCollection *This);

    ULONG(__stdcall *Release)
    (
        IXMLElementCollection *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLElementCollection *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLElementCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLElementCollection *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLElementCollection *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *put_length)
    (
        IXMLElementCollection *This,
        long v);

    HRESULT(__stdcall *get_length)
    (
        IXMLElementCollection *This,
        long *p);

    HRESULT(__stdcall *get__newEnum)
    (
        IXMLElementCollection *This,
        IUnknown **ppUnk);

    HRESULT(__stdcall *item)
    (
        IXMLElementCollection *This,
        VARIANT var1,
        VARIANT var2,
        IDispatch **ppDisp);

} IXMLElementCollectionVtbl;

struct IXMLElementCollection
{
    struct IXMLElementCollectionVtbl *lpVtbl;
};

typedef struct IXMLDocumentVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDocument *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDocument *This);

    ULONG(__stdcall *Release)
    (
        IXMLDocument *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDocument *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDocument *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDocument *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDocument *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_root)
    (
        IXMLDocument *This,
        IXMLElement **p);

    HRESULT(__stdcall *get_fileSize)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *get_fileModifiedDate)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *get_fileUpdatedDate)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *get_URL)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *put_URL)
    (
        IXMLDocument *This,
        BSTR p);

    HRESULT(__stdcall *get_mimeType)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *get_readyState)
    (
        IXMLDocument *This,
        long *pl);

    HRESULT(__stdcall *get_charset)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *put_charset)
    (
        IXMLDocument *This,
        BSTR p);

    HRESULT(__stdcall *get_version)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *get_doctype)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *get_dtdURL)
    (
        IXMLDocument *This,
        BSTR *p);

    HRESULT(__stdcall *createElement)
    (
        IXMLDocument *This,
        VARIANT vType,
        VARIANT var1,
        IXMLElement **ppElem);

} IXMLDocumentVtbl;

struct IXMLDocument
{
    struct IXMLDocumentVtbl *lpVtbl;
};

typedef struct IXMLDocument2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLDocument2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLDocument2 *This);

    ULONG(__stdcall *Release)
    (
        IXMLDocument2 *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLDocument2 *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLDocument2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLDocument2 *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLDocument2 *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_root)
    (
        IXMLDocument2 *This,
        IXMLElement2 **p);

    HRESULT(__stdcall *get_fileSize)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *get_fileModifiedDate)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *get_fileUpdatedDate)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *get_URL)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *put_URL)
    (
        IXMLDocument2 *This,
        BSTR p);

    HRESULT(__stdcall *get_mimeType)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *get_readyState)
    (
        IXMLDocument2 *This,
        long *pl);

    HRESULT(__stdcall *get_charset)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *put_charset)
    (
        IXMLDocument2 *This,
        BSTR p);

    HRESULT(__stdcall *get_version)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *get_doctype)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *get_dtdURL)
    (
        IXMLDocument2 *This,
        BSTR *p);

    HRESULT(__stdcall *createElement)
    (
        IXMLDocument2 *This,
        VARIANT vType,
        VARIANT var1,
        IXMLElement2 **ppElem);

    HRESULT(__stdcall *get_async)
    (
        IXMLDocument2 *This,
        VARIANT_BOOL *pf);

    HRESULT(__stdcall *put_async)
    (
        IXMLDocument2 *This,
        VARIANT_BOOL f);

} IXMLDocument2Vtbl;

struct IXMLDocument2
{
    struct IXMLDocument2Vtbl *lpVtbl;
};

typedef struct IXMLElementVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLElement *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLElement *This);

    ULONG(__stdcall *Release)
    (
        IXMLElement *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLElement *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLElement *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLElement *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLElement *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_tagName)
    (
        IXMLElement *This,
        BSTR *p);

    HRESULT(__stdcall *put_tagName)
    (
        IXMLElement *This,
        BSTR p);

    HRESULT(__stdcall *get_parent)
    (
        IXMLElement *This,
        IXMLElement **ppParent);

    HRESULT(__stdcall *setAttribute)
    (
        IXMLElement *This,
        BSTR strPropertyName,
        VARIANT PropertyValue);

    HRESULT(__stdcall *getAttribute)
    (
        IXMLElement *This,
        BSTR strPropertyName,
        VARIANT *PropertyValue);

    HRESULT(__stdcall *removeAttribute)
    (
        IXMLElement *This,
        BSTR strPropertyName);

    HRESULT(__stdcall *get_children)
    (
        IXMLElement *This,
        IXMLElementCollection **pp);

    HRESULT(__stdcall *get_type)
    (
        IXMLElement *This,
        long *plType);

    HRESULT(__stdcall *get_text)
    (
        IXMLElement *This,
        BSTR *p);

    HRESULT(__stdcall *put_text)
    (
        IXMLElement *This,
        BSTR p);

    HRESULT(__stdcall *addChild)
    (
        IXMLElement *This,
        IXMLElement *pChildElem,
        long lIndex,
        long lReserved);

    HRESULT(__stdcall *removeChild)
    (
        IXMLElement *This,
        IXMLElement *pChildElem);

} IXMLElementVtbl;

struct IXMLElement
{
    struct IXMLElementVtbl *lpVtbl;
};

typedef struct IXMLElement2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLElement2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLElement2 *This);

    ULONG(__stdcall *Release)
    (
        IXMLElement2 *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLElement2 *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLElement2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLElement2 *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLElement2 *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_tagName)
    (
        IXMLElement2 *This,
        BSTR *p);

    HRESULT(__stdcall *put_tagName)
    (
        IXMLElement2 *This,
        BSTR p);

    HRESULT(__stdcall *get_parent)
    (
        IXMLElement2 *This,
        IXMLElement2 **ppParent);

    HRESULT(__stdcall *setAttribute)
    (
        IXMLElement2 *This,
        BSTR strPropertyName,
        VARIANT PropertyValue);

    HRESULT(__stdcall *getAttribute)
    (
        IXMLElement2 *This,
        BSTR strPropertyName,
        VARIANT *PropertyValue);

    HRESULT(__stdcall *removeAttribute)
    (
        IXMLElement2 *This,
        BSTR strPropertyName);

    HRESULT(__stdcall *get_children)
    (
        IXMLElement2 *This,
        IXMLElementCollection **pp);

    HRESULT(__stdcall *get_type)
    (
        IXMLElement2 *This,
        long *plType);

    HRESULT(__stdcall *get_text)
    (
        IXMLElement2 *This,
        BSTR *p);

    HRESULT(__stdcall *put_text)
    (
        IXMLElement2 *This,
        BSTR p);

    HRESULT(__stdcall *addChild)
    (
        IXMLElement2 *This,
        IXMLElement2 *pChildElem,
        long lIndex,
        long lReserved);

    HRESULT(__stdcall *removeChild)
    (
        IXMLElement2 *This,
        IXMLElement2 *pChildElem);

    HRESULT(__stdcall *get_attributes)
    (
        IXMLElement2 *This,
        IXMLElementCollection **pp);

} IXMLElement2Vtbl;

struct IXMLElement2
{
    struct IXMLElement2Vtbl *lpVtbl;
};

typedef struct IXMLAttributeVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLAttribute *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLAttribute *This);

    ULONG(__stdcall *Release)
    (
        IXMLAttribute *This);

    HRESULT(__stdcall *GetTypeInfoCount)
    (
        IXMLAttribute *This,
        UINT *pctinfo);

    HRESULT(__stdcall *GetTypeInfo)
    (
        IXMLAttribute *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT(__stdcall *GetIDsOfNames)
    (
        IXMLAttribute *This,
        const IID *const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT(__stdcall *Invoke)
    (
        IXMLAttribute *This,

        DISPID dispIdMember,

        const IID *const riid,

        LCID lcid,

        WORD wFlags,

        DISPPARAMS *pDispParams,

        VARIANT *pVarResult,

        EXCEPINFO *pExcepInfo,

        UINT *puArgErr);

    HRESULT(__stdcall *get_name)
    (
        IXMLAttribute *This,
        BSTR *n);

    HRESULT(__stdcall *get_value)
    (
        IXMLAttribute *This,
        BSTR *v);

} IXMLAttributeVtbl;

struct IXMLAttribute
{
    struct IXMLAttributeVtbl *lpVtbl;
};

typedef struct IXMLErrorVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IXMLError *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IXMLError *This);

    ULONG(__stdcall *Release)
    (
        IXMLError *This);

    HRESULT(__stdcall *GetErrorInfo)
    (
        IXMLError *This,
        XML_ERROR *pErrorReturn);

} IXMLErrorVtbl;

struct IXMLError
{
    struct IXMLErrorVtbl *lpVtbl;
};

typedef IPersistMoniker *LPPERSISTMONIKER;

typedef struct IPersistMonikerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IPersistMoniker *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IPersistMoniker *This);

    ULONG(__stdcall *Release)
    (
        IPersistMoniker *This);

    HRESULT(__stdcall *GetClassID)
    (
        IPersistMoniker *This,
        CLSID *pClassID);

    HRESULT(__stdcall *IsDirty)
    (
        IPersistMoniker *This);

    HRESULT(__stdcall *Load)
    (
        IPersistMoniker *This,
        BOOL fFullyAvailable,
        IMoniker *pimkName,
        LPBC pibc,
        DWORD grfMode);

    HRESULT(__stdcall *Save)
    (
        IPersistMoniker *This,
        IMoniker *pimkName,
        LPBC pbc,
        BOOL fRemember);

    HRESULT(__stdcall *SaveCompleted)
    (
        IPersistMoniker *This,
        IMoniker *pimkName,
        LPBC pibc);

    HRESULT(__stdcall *GetCurMoniker)
    (
        IPersistMoniker *This,
        IMoniker **ppimkName);

} IPersistMonikerVtbl;

struct IPersistMoniker
{
    struct IPersistMonikerVtbl *lpVtbl;
};

typedef IMonikerProp *LPMONIKERPROP;

typedef enum __MIDL_IMonikerProp_0001
{
    MIMETYPEPROP = 0,
    USE_SRC_URL = 0x1,
    CLASSIDPROP = 0x2,
    TRUSTEDDOWNLOADPROP = 0x3,
    POPUPLEVELPROP = 0x4
} MONIKERPROPERTY;

typedef struct IMonikerPropVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IMonikerProp *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IMonikerProp *This);

    ULONG(__stdcall *Release)
    (
        IMonikerProp *This);

    HRESULT(__stdcall *PutProperty)
    (
        IMonikerProp *This,
        MONIKERPROPERTY mkp,
        LPCWSTR val);

} IMonikerPropVtbl;

struct IMonikerProp
{
    struct IMonikerPropVtbl *lpVtbl;
};

typedef IBindProtocol *LPBINDPROTOCOL;
typedef struct IBindProtocolVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBindProtocol *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBindProtocol *This);

    ULONG(__stdcall *Release)
    (
        IBindProtocol *This);

    HRESULT(__stdcall *CreateBinding)
    (
        IBindProtocol *This,
        LPCWSTR szUrl,
        IBindCtx *pbc,
        IBinding **ppb);

} IBindProtocolVtbl;

struct IBindProtocol
{
    struct IBindProtocolVtbl *lpVtbl;
};

typedef IBinding *LPBINDING;
typedef struct IBindingVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBinding *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBinding *This);

    ULONG(__stdcall *Release)
    (
        IBinding *This);

    HRESULT(__stdcall *Abort)
    (
        IBinding *This);

    HRESULT(__stdcall *Suspend)
    (
        IBinding *This);

    HRESULT(__stdcall *Resume)
    (
        IBinding *This);

    HRESULT(__stdcall *SetPriority)
    (
        IBinding *This,
        LONG nPriority);

    HRESULT(__stdcall *GetPriority)
    (
        IBinding *This,
        LONG *pnPriority);

    HRESULT(__stdcall *GetBindResult)
    (
        IBinding *This,
        CLSID *pclsidProtocol,
        DWORD *pdwResult,

        LPOLESTR *pszResult,
        DWORD *pdwReserved);

} IBindingVtbl;

struct IBinding
{
    struct IBindingVtbl *lpVtbl;
};

typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef enum __MIDL_IBindStatusCallback_0001
{
    BINDVERB_GET = 0,
    BINDVERB_POST = 0x1,
    BINDVERB_PUT = 0x2,
    BINDVERB_CUSTOM = 0x3,
    BINDVERB_RESERVED1 = 0x4
} BINDVERB;

typedef enum __MIDL_IBindStatusCallback_0002
{
    BINDINFOF_URLENCODESTGMEDDATA = 0x1,
    BINDINFOF_URLENCODEDEXTRAINFO = 0x2
} BINDINFOF;

typedef enum __MIDL_IBindStatusCallback_0003
{
    BINDF_ASYNCHRONOUS = 0x1,
    BINDF_ASYNCSTORAGE = 0x2,
    BINDF_NOPROGRESSIVERENDERING = 0x4,
    BINDF_OFFLINEOPERATION = 0x8,
    BINDF_GETNEWESTVERSION = 0x10,
    BINDF_NOWRITECACHE = 0x20,
    BINDF_NEEDFILE = 0x40,
    BINDF_PULLDATA = 0x80,
    BINDF_IGNORESECURITYPROBLEM = 0x100,
    BINDF_RESYNCHRONIZE = 0x200,
    BINDF_HYPERLINK = 0x400,
    BINDF_NO_UI = 0x800,
    BINDF_SILENTOPERATION = 0x1000,
    BINDF_PRAGMA_NO_CACHE = 0x2000,
    BINDF_GETCLASSOBJECT = 0x4000,
    BINDF_RESERVED_1 = 0x8000,
    BINDF_FREE_THREADED = 0x10000,
    BINDF_DIRECT_READ = 0x20000,
    BINDF_FORMS_SUBMIT = 0x40000,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
    BINDF_FROMURLMON = 0x100000,
    BINDF_FWD_BACK = 0x200000,
    BINDF_PREFERDEFAULTHANDLER = 0x400000,
    BINDF_ENFORCERESTRICTED = 0x800000,
    BINDF_RESERVED_2 = 0x80000000,
    BINDF_RESERVED_3 = 0x1000000,
    BINDF_RESERVED_4 = 0x2000000,
    BINDF_RESERVED_5 = 0x4000000,
    BINDF_RESERVED_6 = 0x8000000,
    BINDF_RESERVED_7 = 0x40000000,
    BINDF_RESERVED_8 = 0x20000000
} BINDF;

typedef enum __MIDL_IBindStatusCallback_0004
{
    URL_ENCODING_NONE = 0,
    URL_ENCODING_ENABLE_UTF8 = 0x10000000,
    URL_ENCODING_DISABLE_UTF8 = 0x20000000
} URL_ENCODING;

typedef struct _tagBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
{
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
} REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} RemBINDINFO;

typedef struct tagRemFORMATETC
{
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef enum __MIDL_IBindStatusCallback_0005
{
    BINDINFO_OPTIONS_WININETFLAG = 0x10000,
    BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
    BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
    BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
    BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
    BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
    BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
    BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
    BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
    BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
    BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = (int)0x80000000
} BINDINFO_OPTIONS;

typedef enum __MIDL_IBindStatusCallback_0006
{
    BSCF_FIRSTDATANOTIFICATION = 0x1,
    BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
    BSCF_LASTDATANOTIFICATION = 0x4,
    BSCF_DATAFULLYAVAILABLE = 0x8,
    BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
    BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
    BSCF_64BITLENGTHDOWNLOAD = 0x40
} BSCF;

typedef enum tagBINDSTATUS
{
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING = (BINDSTATUS_FINDINGRESOURCE + 1),
    BINDSTATUS_REDIRECTING = (BINDSTATUS_CONNECTING + 1),
    BINDSTATUS_BEGINDOWNLOADDATA = (BINDSTATUS_REDIRECTING + 1),
    BINDSTATUS_DOWNLOADINGDATA = (BINDSTATUS_BEGINDOWNLOADDATA + 1),
    BINDSTATUS_ENDDOWNLOADDATA = (BINDSTATUS_DOWNLOADINGDATA + 1),
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS = (BINDSTATUS_ENDDOWNLOADDATA + 1),
    BINDSTATUS_INSTALLINGCOMPONENTS = (BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1),
    BINDSTATUS_ENDDOWNLOADCOMPONENTS = (BINDSTATUS_INSTALLINGCOMPONENTS + 1),
    BINDSTATUS_USINGCACHEDCOPY = (BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1),
    BINDSTATUS_SENDINGREQUEST = (BINDSTATUS_USINGCACHEDCOPY + 1),
    BINDSTATUS_CLASSIDAVAILABLE = (BINDSTATUS_SENDINGREQUEST + 1),
    BINDSTATUS_MIMETYPEAVAILABLE = (BINDSTATUS_CLASSIDAVAILABLE + 1),
    BINDSTATUS_CACHEFILENAMEAVAILABLE = (BINDSTATUS_MIMETYPEAVAILABLE + 1),
    BINDSTATUS_BEGINSYNCOPERATION = (BINDSTATUS_CACHEFILENAMEAVAILABLE + 1),
    BINDSTATUS_ENDSYNCOPERATION = (BINDSTATUS_BEGINSYNCOPERATION + 1),
    BINDSTATUS_BEGINUPLOADDATA = (BINDSTATUS_ENDSYNCOPERATION + 1),
    BINDSTATUS_UPLOADINGDATA = (BINDSTATUS_BEGINUPLOADDATA + 1),
    BINDSTATUS_ENDUPLOADDATA = (BINDSTATUS_UPLOADINGDATA + 1),
    BINDSTATUS_PROTOCOLCLASSID = (BINDSTATUS_ENDUPLOADDATA + 1),
    BINDSTATUS_ENCODING = (BINDSTATUS_PROTOCOLCLASSID + 1),
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = (BINDSTATUS_ENCODING + 1),
    BINDSTATUS_CLASSINSTALLLOCATION = (BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1),
    BINDSTATUS_DECODING = (BINDSTATUS_CLASSINSTALLLOCATION + 1),
    BINDSTATUS_LOADINGMIMEHANDLER = (BINDSTATUS_DECODING + 1),
    BINDSTATUS_CONTENTDISPOSITIONATTACH = (BINDSTATUS_LOADINGMIMEHANDLER + 1),
    BINDSTATUS_FILTERREPORTMIMETYPE = (BINDSTATUS_CONTENTDISPOSITIONATTACH + 1),
    BINDSTATUS_CLSIDCANINSTANTIATE = (BINDSTATUS_FILTERREPORTMIMETYPE + 1),
    BINDSTATUS_IUNKNOWNAVAILABLE = (BINDSTATUS_CLSIDCANINSTANTIATE + 1),
    BINDSTATUS_DIRECTBIND = (BINDSTATUS_IUNKNOWNAVAILABLE + 1),
    BINDSTATUS_RAWMIMETYPE = (BINDSTATUS_DIRECTBIND + 1),
    BINDSTATUS_PROXYDETECTING = (BINDSTATUS_RAWMIMETYPE + 1),
    BINDSTATUS_ACCEPTRANGES = (BINDSTATUS_PROXYDETECTING + 1),
    BINDSTATUS_COOKIE_SENT = (BINDSTATUS_ACCEPTRANGES + 1),
    BINDSTATUS_COMPACT_POLICY_RECEIVED = (BINDSTATUS_COOKIE_SENT + 1),
    BINDSTATUS_COOKIE_SUPPRESSED = (BINDSTATUS_COMPACT_POLICY_RECEIVED + 1),
    BINDSTATUS_COOKIE_STATE_UNKNOWN = (BINDSTATUS_COOKIE_SUPPRESSED + 1),
    BINDSTATUS_COOKIE_STATE_ACCEPT = (BINDSTATUS_COOKIE_STATE_UNKNOWN + 1),
    BINDSTATUS_COOKIE_STATE_REJECT = (BINDSTATUS_COOKIE_STATE_ACCEPT + 1),
    BINDSTATUS_COOKIE_STATE_PROMPT = (BINDSTATUS_COOKIE_STATE_REJECT + 1),
    BINDSTATUS_COOKIE_STATE_LEASH = (BINDSTATUS_COOKIE_STATE_PROMPT + 1),
    BINDSTATUS_COOKIE_STATE_DOWNGRADE = (BINDSTATUS_COOKIE_STATE_LEASH + 1),
    BINDSTATUS_POLICY_HREF = (BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1),
    BINDSTATUS_P3P_HEADER = (BINDSTATUS_POLICY_HREF + 1),
    BINDSTATUS_SESSION_COOKIE_RECEIVED = (BINDSTATUS_P3P_HEADER + 1),
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = (BINDSTATUS_SESSION_COOKIE_RECEIVED + 1),
    BINDSTATUS_SESSION_COOKIES_ALLOWED = (BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1),
    BINDSTATUS_CACHECONTROL = (BINDSTATUS_SESSION_COOKIES_ALLOWED + 1),
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = (BINDSTATUS_CACHECONTROL + 1),
    BINDSTATUS_MIMETEXTPLAINMISMATCH = (BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1),
    BINDSTATUS_PUBLISHERAVAILABLE = (BINDSTATUS_MIMETEXTPLAINMISMATCH + 1),
    BINDSTATUS_DISPLAYNAMEAVAILABLE = (BINDSTATUS_PUBLISHERAVAILABLE + 1),
    BINDSTATUS_SSLUX_NAVBLOCKED = (BINDSTATUS_DISPLAYNAMEAVAILABLE + 1),
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE = (BINDSTATUS_SSLUX_NAVBLOCKED + 1),
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = (BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1),
    BINDSTATUS_64BIT_PROGRESS = (BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1),
    BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS,
    BINDSTATUS_RESERVED_0 = (BINDSTATUS_LAST + 1),
    BINDSTATUS_RESERVED_1 = (BINDSTATUS_RESERVED_0 + 1),
    BINDSTATUS_RESERVED_2 = (BINDSTATUS_RESERVED_1 + 1),
    BINDSTATUS_RESERVED_3 = (BINDSTATUS_RESERVED_2 + 1),
    BINDSTATUS_RESERVED_4 = (BINDSTATUS_RESERVED_3 + 1),
    BINDSTATUS_RESERVED_5 = (BINDSTATUS_RESERVED_4 + 1),
    BINDSTATUS_RESERVED_6 = (BINDSTATUS_RESERVED_5 + 1),
    BINDSTATUS_RESERVED_7 = (BINDSTATUS_RESERVED_6 + 1),
    BINDSTATUS_RESERVED_8 = (BINDSTATUS_RESERVED_7 + 1),
    BINDSTATUS_RESERVED_9 = (BINDSTATUS_RESERVED_8 + 1),
    BINDSTATUS_RESERVED_A = (BINDSTATUS_RESERVED_9 + 1),
    BINDSTATUS_RESERVED_B = (BINDSTATUS_RESERVED_A + 1),
    BINDSTATUS_RESERVED_C = (BINDSTATUS_RESERVED_B + 1),
    BINDSTATUS_RESERVED_D = (BINDSTATUS_RESERVED_C + 1),
    BINDSTATUS_RESERVED_E = (BINDSTATUS_RESERVED_D + 1),
    BINDSTATUS_RESERVED_F = (BINDSTATUS_RESERVED_E + 1),
    BINDSTATUS_RESERVED_10 = (BINDSTATUS_RESERVED_F + 1),
    BINDSTATUS_RESERVED_11 = (BINDSTATUS_RESERVED_10 + 1),
    BINDSTATUS_RESERVED_12 = (BINDSTATUS_RESERVED_11 + 1),
    BINDSTATUS_RESERVED_13 = (BINDSTATUS_RESERVED_12 + 1),
    BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_13
} BINDSTATUS;

typedef struct IBindStatusCallbackVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBindStatusCallback *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBindStatusCallback *This);

    ULONG(__stdcall *Release)
    (
        IBindStatusCallback *This);

    HRESULT(__stdcall *OnStartBinding)
    (
        IBindStatusCallback *This,
        DWORD dwReserved,
        IBinding *pib);

    HRESULT(__stdcall *GetPriority)
    (
        IBindStatusCallback *This,
        LONG *pnPriority);

    HRESULT(__stdcall *OnLowResource)
    (
        IBindStatusCallback *This,
        DWORD reserved);

    HRESULT(__stdcall *OnProgress)
    (
        IBindStatusCallback *This,
        ULONG ulProgress,
        ULONG ulProgressMax,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);

    HRESULT(__stdcall *OnStopBinding)
    (
        IBindStatusCallback *This,
        HRESULT hresult,
        LPCWSTR szError);

    HRESULT(__stdcall *GetBindInfo)
    (
        IBindStatusCallback *This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT(__stdcall *OnDataAvailable)
    (
        IBindStatusCallback *This,
        DWORD grfBSCF,
        DWORD dwSize,
        FORMATETC *pformatetc,
        STGMEDIUM *pstgmed);

    HRESULT(__stdcall *OnObjectAvailable)
    (
        IBindStatusCallback *This,
        const IID *const riid,
        IUnknown *punk);

} IBindStatusCallbackVtbl;

struct IBindStatusCallback
{
    struct IBindStatusCallbackVtbl *lpVtbl;
};
typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef enum __MIDL_IBindStatusCallbackEx_0001
{
    BINDF2_DISABLEBASICOVERHTTP = 0x1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
    BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
    BINDF2_SETDOWNLOADMODE = 0x20,
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
    BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
    BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
    BINDF2_RESERVED_17 = 0x200,
    BINDF2_RESERVED_16 = 0x400,
    BINDF2_RESERVED_15 = 0x800,
    BINDF2_RESERVED_14 = 0x1000,
    BINDF2_RESERVED_13 = 0x2000,
    BINDF2_RESERVED_12 = 0x4000,
    BINDF2_RESERVED_11 = 0x8000,
    BINDF2_RESERVED_10 = 0x10000,
    BINDF2_RESERVED_F = 0x20000,
    BINDF2_RESERVED_E = 0x40000,
    BINDF2_RESERVED_D = 0x80000,
    BINDF2_RESERVED_C = 0x100000,
    BINDF2_RESERVED_B = 0x200000,
    BINDF2_RESERVED_A = 0x400000,
    BINDF2_RESERVED_9 = 0x800000,
    BINDF2_RESERVED_8 = 0x1000000,
    BINDF2_RESERVED_7 = 0x2000000,
    BINDF2_RESERVED_6 = 0x4000000,
    BINDF2_RESERVED_5 = 0x8000000,
    BINDF2_RESERVED_4 = 0x10000000,
    BINDF2_RESERVED_3 = 0x20000000,
    BINDF2_RESERVED_2 = 0x40000000,
    BINDF2_RESERVED_1 = 0x80000000
} BINDF2;
typedef struct IBindStatusCallbackExVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBindStatusCallbackEx *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBindStatusCallbackEx *This);

    ULONG(__stdcall *Release)
    (
        IBindStatusCallbackEx *This);

    HRESULT(__stdcall *OnStartBinding)
    (
        IBindStatusCallbackEx *This,
        DWORD dwReserved,
        IBinding *pib);

    HRESULT(__stdcall *GetPriority)
    (
        IBindStatusCallbackEx *This,
        LONG *pnPriority);

    HRESULT(__stdcall *OnLowResource)
    (
        IBindStatusCallbackEx *This,
        DWORD reserved);

    HRESULT(__stdcall *OnProgress)
    (
        IBindStatusCallbackEx *This,
        ULONG ulProgress,
        ULONG ulProgressMax,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);

    HRESULT(__stdcall *OnStopBinding)
    (
        IBindStatusCallbackEx *This,
        HRESULT hresult,
        LPCWSTR szError);

    HRESULT(__stdcall *GetBindInfo)
    (
        IBindStatusCallbackEx *This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT(__stdcall *OnDataAvailable)
    (
        IBindStatusCallbackEx *This,
        DWORD grfBSCF,
        DWORD dwSize,
        FORMATETC *pformatetc,
        STGMEDIUM *pstgmed);

    HRESULT(__stdcall *OnObjectAvailable)
    (
        IBindStatusCallbackEx *This,
        const IID *const riid,
        IUnknown *punk);

    HRESULT(__stdcall *GetBindInfoEx)
    (
        IBindStatusCallbackEx *This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo,
        DWORD *grfBINDF2,
        DWORD *pdwReserved);

} IBindStatusCallbackExVtbl;

struct IBindStatusCallbackEx
{
    struct IBindStatusCallbackExVtbl *lpVtbl;
};

typedef IAuthenticate *LPAUTHENTICATION;

typedef struct IAuthenticateVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAuthenticate *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAuthenticate *This);

    ULONG(__stdcall *Release)
    (
        IAuthenticate *This);

    HRESULT(__stdcall *Authenticate)
    (
        IAuthenticate *This,
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword);

} IAuthenticateVtbl;

struct IAuthenticate
{
    struct IAuthenticateVtbl *lpVtbl;
};

typedef IAuthenticateEx *LPAUTHENTICATIONEX;

typedef enum __MIDL_IAuthenticateEx_0001
{
    AUTHENTICATEF_PROXY = 0x1,
    AUTHENTICATEF_BASIC = 0x2,
    AUTHENTICATEF_HTTP = 0x4
} AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO
{
    DWORD dwFlags;
    DWORD dwReserved;
} AUTHENTICATEINFO;

typedef struct IAuthenticateExVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IAuthenticateEx *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IAuthenticateEx *This);

    ULONG(__stdcall *Release)
    (
        IAuthenticateEx *This);

    HRESULT(__stdcall *Authenticate)
    (
        IAuthenticateEx *This,
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword);

    HRESULT(__stdcall *AuthenticateEx)
    (
        IAuthenticateEx *This,
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword,
        AUTHENTICATEINFO *pauthinfo);

} IAuthenticateExVtbl;

struct IAuthenticateEx
{
    struct IAuthenticateExVtbl *lpVtbl;
};

typedef IHttpNegotiate *LPHTTPNEGOTIATE;
typedef struct IHttpNegotiateVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IHttpNegotiate *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IHttpNegotiate *This);

    ULONG(__stdcall *Release)
    (
        IHttpNegotiate *This);

    HRESULT(__stdcall *BeginningTransaction)
    (
        IHttpNegotiate *This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);

    HRESULT(__stdcall *OnResponse)
    (
        IHttpNegotiate *This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);

} IHttpNegotiateVtbl;

struct IHttpNegotiate
{
    struct IHttpNegotiateVtbl *lpVtbl;
};
typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;
typedef struct IHttpNegotiate2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IHttpNegotiate2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IHttpNegotiate2 *This);

    ULONG(__stdcall *Release)
    (
        IHttpNegotiate2 *This);

    HRESULT(__stdcall *BeginningTransaction)
    (
        IHttpNegotiate2 *This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);

    HRESULT(__stdcall *OnResponse)
    (
        IHttpNegotiate2 *This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);

    HRESULT(__stdcall *GetRootSecurityId)
    (
        IHttpNegotiate2 *This,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);

} IHttpNegotiate2Vtbl;

struct IHttpNegotiate2
{
    struct IHttpNegotiate2Vtbl *lpVtbl;
};

typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;
typedef struct IHttpNegotiate3Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IHttpNegotiate3 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IHttpNegotiate3 *This);

    ULONG(__stdcall *Release)
    (
        IHttpNegotiate3 *This);

    HRESULT(__stdcall *BeginningTransaction)
    (
        IHttpNegotiate3 *This,
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders);

    HRESULT(__stdcall *OnResponse)
    (
        IHttpNegotiate3 *This,
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders);

    HRESULT(__stdcall *GetRootSecurityId)
    (
        IHttpNegotiate3 *This,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);

    HRESULT(__stdcall *GetSerializedClientCertContext)
    (
        IHttpNegotiate3 *This,
        BYTE **ppbCert,
        DWORD *pcbCert);

} IHttpNegotiate3Vtbl;

struct IHttpNegotiate3
{
    struct IHttpNegotiate3Vtbl *lpVtbl;
};

typedef IWinInetFileStream *LPWININETFILESTREAM;

typedef struct IWinInetFileStreamVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWinInetFileStream *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWinInetFileStream *This);

    ULONG(__stdcall *Release)
    (
        IWinInetFileStream *This);

    HRESULT(__stdcall *SetHandleForUnlock)
    (
        IWinInetFileStream *This,
        DWORD_PTR hWinInetLockHandle,
        DWORD_PTR dwReserved);

    HRESULT(__stdcall *SetDeleteFile)
    (
        IWinInetFileStream *This,
        DWORD_PTR dwReserved);

} IWinInetFileStreamVtbl;

struct IWinInetFileStream
{
    struct IWinInetFileStreamVtbl *lpVtbl;
};

typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;

typedef struct IWindowForBindingUIVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWindowForBindingUI *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWindowForBindingUI *This);

    ULONG(__stdcall *Release)
    (
        IWindowForBindingUI *This);

    HRESULT(__stdcall *GetWindow)
    (
        IWindowForBindingUI *This,
        const GUID *const rguidReason,
        HWND *phwnd);

} IWindowForBindingUIVtbl;

struct IWindowForBindingUI
{
    struct IWindowForBindingUIVtbl *lpVtbl;
};

typedef ICodeInstall *LPCODEINSTALL;

typedef enum __MIDL_ICodeInstall_0001
{
    CIP_DISK_FULL = 0,
    CIP_ACCESS_DENIED = (CIP_DISK_FULL + 1),
    CIP_NEWER_VERSION_EXISTS = (CIP_ACCESS_DENIED + 1),
    CIP_OLDER_VERSION_EXISTS = (CIP_NEWER_VERSION_EXISTS + 1),
    CIP_NAME_CONFLICT = (CIP_OLDER_VERSION_EXISTS + 1),
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = (CIP_NAME_CONFLICT + 1),
    CIP_EXE_SELF_REGISTERATION_TIMEOUT = (CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1),
    CIP_UNSAFE_TO_ABORT = (CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1),
    CIP_NEED_REBOOT = (CIP_UNSAFE_TO_ABORT + 1),
    CIP_NEED_REBOOT_UI_PERMISSION = (CIP_NEED_REBOOT + 1)
} CIP_STATUS;

typedef struct ICodeInstallVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICodeInstall *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICodeInstall *This);

    ULONG(__stdcall *Release)
    (
        ICodeInstall *This);

    HRESULT(__stdcall *GetWindow)
    (
        ICodeInstall *This,
        const GUID *const rguidReason,
        HWND *phwnd);

    HRESULT(__stdcall *OnCodeInstallProblem)
    (
        ICodeInstall *This,
        ULONG ulStatusCode,
        LPCWSTR szDestination,
        LPCWSTR szSource,
        DWORD dwReserved);

} ICodeInstallVtbl;

struct ICodeInstall
{
    struct ICodeInstallVtbl *lpVtbl;
};

typedef enum __MIDL_IUri_0001
{
    Uri_PROPERTY_ABSOLUTE_URI = 0,
    Uri_PROPERTY_STRING_START = Uri_PROPERTY_ABSOLUTE_URI,
    Uri_PROPERTY_AUTHORITY = 1,
    Uri_PROPERTY_DISPLAY_URI = 2,
    Uri_PROPERTY_DOMAIN = 3,
    Uri_PROPERTY_EXTENSION = 4,
    Uri_PROPERTY_FRAGMENT = 5,
    Uri_PROPERTY_HOST = 6,
    Uri_PROPERTY_PASSWORD = 7,
    Uri_PROPERTY_PATH = 8,
    Uri_PROPERTY_PATH_AND_QUERY = 9,
    Uri_PROPERTY_QUERY = 10,
    Uri_PROPERTY_RAW_URI = 11,
    Uri_PROPERTY_SCHEME_NAME = 12,
    Uri_PROPERTY_USER_INFO = 13,
    Uri_PROPERTY_USER_NAME = 14,
    Uri_PROPERTY_STRING_LAST = Uri_PROPERTY_USER_NAME,
    Uri_PROPERTY_HOST_TYPE = 15,
    Uri_PROPERTY_DWORD_START = Uri_PROPERTY_HOST_TYPE,
    Uri_PROPERTY_PORT = 16,
    Uri_PROPERTY_SCHEME = 17,
    Uri_PROPERTY_ZONE = 18,
    Uri_PROPERTY_DWORD_LAST = Uri_PROPERTY_ZONE
} Uri_PROPERTY;

typedef enum __MIDL_IUri_0002
{
    Uri_HOST_UNKNOWN = 0,
    Uri_HOST_DNS = (Uri_HOST_UNKNOWN + 1),
    Uri_HOST_IPV4 = (Uri_HOST_DNS + 1),
    Uri_HOST_IPV6 = (Uri_HOST_IPV4 + 1),
    Uri_HOST_IDN = (Uri_HOST_IPV6 + 1)
} Uri_HOST_TYPE;

typedef struct IUriVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IUri *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IUri *This);

    ULONG(__stdcall *Release)
    (
        IUri *This);

    HRESULT(__stdcall *GetPropertyBSTR)
    (
        IUri *This,
        Uri_PROPERTY uriProp,
        BSTR *pbstrProperty,
        DWORD dwFlags);

    HRESULT(__stdcall *GetPropertyLength)
    (
        IUri *This,
        Uri_PROPERTY uriProp,
        DWORD *pcchProperty,
        DWORD dwFlags);

    HRESULT(__stdcall *GetPropertyDWORD)
    (
        IUri *This,
        Uri_PROPERTY uriProp,
        DWORD *pdwProperty,
        DWORD dwFlags);

    HRESULT(__stdcall *HasProperty)
    (
        IUri *This,
        Uri_PROPERTY uriProp,
        BOOL *pfHasProperty);

    HRESULT(__stdcall *GetAbsoluteUri)
    (
        IUri *This,
        BSTR *pbstrAbsoluteUri);

    HRESULT(__stdcall *GetAuthority)
    (
        IUri *This,
        BSTR *pbstrAuthority);

    HRESULT(__stdcall *GetDisplayUri)
    (
        IUri *This,
        BSTR *pbstrDisplayString);

    HRESULT(__stdcall *GetDomain)
    (
        IUri *This,
        BSTR *pbstrDomain);

    HRESULT(__stdcall *GetExtension)
    (
        IUri *This,
        BSTR *pbstrExtension);

    HRESULT(__stdcall *GetFragment)
    (
        IUri *This,
        BSTR *pbstrFragment);

    HRESULT(__stdcall *GetHost)
    (
        IUri *This,
        BSTR *pbstrHost);

    HRESULT(__stdcall *GetPassword)
    (
        IUri *This,
        BSTR *pbstrPassword);

    HRESULT(__stdcall *GetPath)
    (
        IUri *This,
        BSTR *pbstrPath);

    HRESULT(__stdcall *GetPathAndQuery)
    (
        IUri *This,
        BSTR *pbstrPathAndQuery);

    HRESULT(__stdcall *GetQuery)
    (
        IUri *This,
        BSTR *pbstrQuery);

    HRESULT(__stdcall *GetRawUri)
    (
        IUri *This,
        BSTR *pbstrRawUri);

    HRESULT(__stdcall *GetSchemeName)
    (
        IUri *This,
        BSTR *pbstrSchemeName);

    HRESULT(__stdcall *GetUserInfo)
    (
        IUri *This,
        BSTR *pbstrUserInfo);

    HRESULT(__stdcall *GetUserNameA)
    (
        IUri *This,
        BSTR *pbstrUserName);

    HRESULT(__stdcall *GetHostType)
    (
        IUri *This,
        DWORD *pdwHostType);

    HRESULT(__stdcall *GetPort)
    (
        IUri *This,
        DWORD *pdwPort);

    HRESULT(__stdcall *GetScheme)
    (
        IUri *This,
        DWORD *pdwScheme);

    HRESULT(__stdcall *GetZone)
    (
        IUri *This,
        DWORD *pdwZone);

    HRESULT(__stdcall *GetProperties)
    (
        IUri *This,
        LPDWORD pdwFlags);

    HRESULT(__stdcall *IsEqual)
    (
        IUri *This,
        IUri *pUri,
        BOOL *pfEqual);

} IUriVtbl;

struct IUri
{
    struct IUriVtbl *lpVtbl;
};
typedef struct IUriContainerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IUriContainer *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IUriContainer *This);

    ULONG(__stdcall *Release)
    (
        IUriContainer *This);

    HRESULT(__stdcall *GetIUri)
    (
        IUriContainer *This,
        IUri **ppIUri);

} IUriContainerVtbl;

struct IUriContainer
{
    struct IUriContainerVtbl *lpVtbl;
};
typedef struct IUriBuilderVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IUriBuilder *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IUriBuilder *This);

    ULONG(__stdcall *Release)
    (
        IUriBuilder *This);

    HRESULT(__stdcall *CreateUriSimple)
    (
        IUriBuilder *This,
        DWORD dwAllowEncodingPropertyMask,
        DWORD_PTR dwReserved,

        IUri **ppIUri);

    HRESULT(__stdcall *CreateUri)
    (
        IUriBuilder *This,
        DWORD dwCreateFlags,
        DWORD dwAllowEncodingPropertyMask,
        DWORD_PTR dwReserved,

        IUri **ppIUri);

    HRESULT(__stdcall *CreateUriWithFlags)
    (
        IUriBuilder *This,
        DWORD dwCreateFlags,
        DWORD dwUriBuilderFlags,
        DWORD dwAllowEncodingPropertyMask,
        DWORD_PTR dwReserved,

        IUri **ppIUri);

    HRESULT(__stdcall *GetIUri)
    (
        IUriBuilder *This,

        IUri **ppIUri);

    HRESULT(__stdcall *SetIUri)
    (
        IUriBuilder *This,

        IUri *pIUri);

    HRESULT(__stdcall *GetFragment)
    (
        IUriBuilder *This,

        DWORD *pcchFragment,

        LPCWSTR *ppwzFragment);

    HRESULT(__stdcall *GetHost)
    (
        IUriBuilder *This,

        DWORD *pcchHost,

        LPCWSTR *ppwzHost);

    HRESULT(__stdcall *GetPassword)
    (
        IUriBuilder *This,

        DWORD *pcchPassword,

        LPCWSTR *ppwzPassword);

    HRESULT(__stdcall *GetPath)
    (
        IUriBuilder *This,

        DWORD *pcchPath,

        LPCWSTR *ppwzPath);

    HRESULT(__stdcall *GetPort)
    (
        IUriBuilder *This,

        BOOL *pfHasPort,

        DWORD *pdwPort);

    HRESULT(__stdcall *GetQuery)
    (
        IUriBuilder *This,

        DWORD *pcchQuery,

        LPCWSTR *ppwzQuery);

    HRESULT(__stdcall *GetSchemeName)
    (
        IUriBuilder *This,

        DWORD *pcchSchemeName,

        LPCWSTR *ppwzSchemeName);

    HRESULT(__stdcall *GetUserNameA)
    (
        IUriBuilder *This,

        DWORD *pcchUserName,

        LPCWSTR *ppwzUserName);

    HRESULT(__stdcall *SetFragment)
    (
        IUriBuilder *This,

        LPCWSTR pwzNewValue);

    HRESULT(__stdcall *SetHost)
    (
        IUriBuilder *This,

        LPCWSTR pwzNewValue);

    HRESULT(__stdcall *SetPassword)
    (
        IUriBuilder *This,

        LPCWSTR pwzNewValue);

    HRESULT(__stdcall *SetPath)
    (
        IUriBuilder *This,

        LPCWSTR pwzNewValue);

    HRESULT(__stdcall *SetPortA)
    (
        IUriBuilder *This,
        BOOL fHasPort,
        DWORD dwNewValue);

    HRESULT(__stdcall *SetQuery)
    (
        IUriBuilder *This,

        LPCWSTR pwzNewValue);

    HRESULT(__stdcall *SetSchemeName)
    (
        IUriBuilder *This,

        LPCWSTR pwzNewValue);

    HRESULT(__stdcall *SetUserName)
    (
        IUriBuilder *This,

        LPCWSTR pwzNewValue);

    HRESULT(__stdcall *RemoveProperties)
    (
        IUriBuilder *This,
        DWORD dwPropertyMask);

    HRESULT(__stdcall *HasBeenModified)
    (
        IUriBuilder *This,

        BOOL *pfModified);

} IUriBuilderVtbl;

struct IUriBuilder
{
    struct IUriBuilderVtbl *lpVtbl;
};
typedef struct IUriBuilderFactoryVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IUriBuilderFactory *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IUriBuilderFactory *This);

    ULONG(__stdcall *Release)
    (
        IUriBuilderFactory *This);

    HRESULT(__stdcall *CreateIUriBuilder)
    (
        IUriBuilderFactory *This,

        DWORD dwFlags,

        DWORD_PTR dwReserved,

        IUriBuilder **ppIUriBuilder);

    HRESULT(__stdcall *CreateInitializedIUriBuilder)
    (
        IUriBuilderFactory *This,

        DWORD dwFlags,

        DWORD_PTR dwReserved,

        IUriBuilder **ppIUriBuilder);

} IUriBuilderFactoryVtbl;

struct IUriBuilderFactory
{
    struct IUriBuilderFactoryVtbl *lpVtbl;
};

typedef IWinInetInfo *LPWININETINFO;
typedef struct IWinInetInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWinInetInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWinInetInfo *This);

    ULONG(__stdcall *Release)
    (
        IWinInetInfo *This);

    HRESULT(__stdcall *QueryOption)
    (
        IWinInetInfo *This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf);

} IWinInetInfoVtbl;

struct IWinInetInfo
{
    struct IWinInetInfoVtbl *lpVtbl;
};

typedef IHttpSecurity *LPHTTPSECURITY;

typedef struct IHttpSecurityVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IHttpSecurity *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IHttpSecurity *This);

    ULONG(__stdcall *Release)
    (
        IHttpSecurity *This);

    HRESULT(__stdcall *GetWindow)
    (
        IHttpSecurity *This,
        const GUID *const rguidReason,
        HWND *phwnd);

    HRESULT(__stdcall *OnSecurityProblem)
    (
        IHttpSecurity *This,
        DWORD dwProblem);

} IHttpSecurityVtbl;

struct IHttpSecurity
{
    struct IHttpSecurityVtbl *lpVtbl;
};
typedef IWinInetHttpInfo *LPWININETHTTPINFO;
typedef struct IWinInetHttpInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWinInetHttpInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWinInetHttpInfo *This);

    ULONG(__stdcall *Release)
    (
        IWinInetHttpInfo *This);

    HRESULT(__stdcall *QueryOption)
    (
        IWinInetHttpInfo *This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf);

    HRESULT(__stdcall *QueryInfo)
    (
        IWinInetHttpInfo *This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf,
        DWORD *pdwFlags,
        DWORD *pdwReserved);

} IWinInetHttpInfoVtbl;

struct IWinInetHttpInfo
{
    struct IWinInetHttpInfoVtbl *lpVtbl;
};

typedef struct IWinInetHttpTimeoutsVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWinInetHttpTimeouts *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWinInetHttpTimeouts *This);

    ULONG(__stdcall *Release)
    (
        IWinInetHttpTimeouts *This);

    HRESULT(__stdcall *GetRequestTimeouts)
    (
        IWinInetHttpTimeouts *This,

        DWORD *pdwConnectTimeout,

        DWORD *pdwSendTimeout,

        DWORD *pdwReceiveTimeout);

} IWinInetHttpTimeoutsVtbl;

struct IWinInetHttpTimeouts
{
    struct IWinInetHttpTimeoutsVtbl *lpVtbl;
};

typedef IWinInetCacheHints *LPWININETCACHEHINTS;

typedef struct IWinInetCacheHintsVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWinInetCacheHints *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWinInetCacheHints *This);

    ULONG(__stdcall *Release)
    (
        IWinInetCacheHints *This);

    HRESULT(__stdcall *SetCacheExtension)
    (
        IWinInetCacheHints *This,
        LPCWSTR pwzExt,
        LPVOID pszCacheFile,
        DWORD *pcbCacheFile,
        DWORD *pdwWinInetError,
        DWORD *pdwReserved);

} IWinInetCacheHintsVtbl;

struct IWinInetCacheHints
{
    struct IWinInetCacheHintsVtbl *lpVtbl;
};
typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2;

typedef struct IWinInetCacheHints2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWinInetCacheHints2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWinInetCacheHints2 *This);

    ULONG(__stdcall *Release)
    (
        IWinInetCacheHints2 *This);

    HRESULT(__stdcall *SetCacheExtension)
    (
        IWinInetCacheHints2 *This,
        LPCWSTR pwzExt,
        LPVOID pszCacheFile,
        DWORD *pcbCacheFile,
        DWORD *pdwWinInetError,
        DWORD *pdwReserved);

    HRESULT(__stdcall *SetCacheExtension2)
    (
        IWinInetCacheHints2 *This,
        LPCWSTR pwzExt,

        WCHAR *pwzCacheFile,
        DWORD *pcchCacheFile,
        DWORD *pdwWinInetError,
        DWORD *pdwReserved);

} IWinInetCacheHints2Vtbl;

struct IWinInetCacheHints2
{
    struct IWinInetCacheHints2Vtbl *lpVtbl;
};

typedef IBindHost *LPBINDHOST;

typedef struct IBindHostVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBindHost *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBindHost *This);

    ULONG(__stdcall *Release)
    (
        IBindHost *This);

    HRESULT(__stdcall *CreateMoniker)
    (
        IBindHost *This,
        LPOLESTR szName,
        IBindCtx *pBC,
        IMoniker **ppmk,
        DWORD dwReserved);

    HRESULT(__stdcall *MonikerBindToStorage)
    (
        IBindHost *This,
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID *const riid,
        void **ppvObj);

    HRESULT(__stdcall *MonikerBindToObject)
    (
        IBindHost *This,
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID *const riid,
        void **ppvObj);

} IBindHostVtbl;

struct IBindHost
{
    struct IBindHostVtbl *lpVtbl;
};
struct IBindStatusCallback;

typedef IInternet *LPIINTERNET;
typedef struct IInternetVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternet *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternet *This);

    ULONG(__stdcall *Release)
    (
        IInternet *This);

} IInternetVtbl;

struct IInternet
{
    struct IInternetVtbl *lpVtbl;
};
typedef IInternetBindInfo *LPIINTERNETBINDINFO;

typedef enum tagBINDSTRING
{
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES = (BINDSTRING_HEADERS + 1),
    BINDSTRING_EXTRA_URL = (BINDSTRING_ACCEPT_MIMES + 1),
    BINDSTRING_LANGUAGE = (BINDSTRING_EXTRA_URL + 1),
    BINDSTRING_USERNAME = (BINDSTRING_LANGUAGE + 1),
    BINDSTRING_PASSWORD = (BINDSTRING_USERNAME + 1),
    BINDSTRING_UA_PIXELS = (BINDSTRING_PASSWORD + 1),
    BINDSTRING_UA_COLOR = (BINDSTRING_UA_PIXELS + 1),
    BINDSTRING_OS = (BINDSTRING_UA_COLOR + 1),
    BINDSTRING_USER_AGENT = (BINDSTRING_OS + 1),
    BINDSTRING_ACCEPT_ENCODINGS = (BINDSTRING_USER_AGENT + 1),
    BINDSTRING_POST_COOKIE = (BINDSTRING_ACCEPT_ENCODINGS + 1),
    BINDSTRING_POST_DATA_MIME = (BINDSTRING_POST_COOKIE + 1),
    BINDSTRING_URL = (BINDSTRING_POST_DATA_MIME + 1),
    BINDSTRING_IID = (BINDSTRING_URL + 1),
    BINDSTRING_FLAG_BIND_TO_OBJECT = (BINDSTRING_IID + 1),
    BINDSTRING_PTR_BIND_CONTEXT = (BINDSTRING_FLAG_BIND_TO_OBJECT + 1),
    BINDSTRING_XDR_ORIGIN = (BINDSTRING_PTR_BIND_CONTEXT + 1),
    BINDSTRING_DOWNLOADPATH = (BINDSTRING_XDR_ORIGIN + 1),
    BINDSTRING_ROOTDOC_URL = (BINDSTRING_DOWNLOADPATH + 1),
    BINDSTRING_INITIAL_FILENAME = (BINDSTRING_ROOTDOC_URL + 1),
    BINDSTRING_PROXY_USERNAME = (BINDSTRING_INITIAL_FILENAME + 1),
    BINDSTRING_PROXY_PASSWORD = (BINDSTRING_PROXY_USERNAME + 1),
    BINDSTRING_ENTERPRISE_ID = (BINDSTRING_PROXY_PASSWORD + 1),
    BINDSTRING_DOC_URL = (BINDSTRING_ENTERPRISE_ID + 1),
    BINDSTRING_SAMESITE_COOKIE_LEVEL = (BINDSTRING_DOC_URL + 1)
} BINDSTRING;

typedef struct IInternetBindInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetBindInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetBindInfo *This);

    ULONG(__stdcall *Release)
    (
        IInternetBindInfo *This);

    HRESULT(__stdcall *GetBindInfo)
    (
        IInternetBindInfo *This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT(__stdcall *GetBindString)
    (
        IInternetBindInfo *This,
        ULONG ulStringType,

        LPOLESTR *ppwzStr,
        ULONG cEl,
        ULONG *pcElFetched);

} IInternetBindInfoVtbl;

struct IInternetBindInfo
{
    struct IInternetBindInfoVtbl *lpVtbl;
};

typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;
typedef struct IInternetBindInfoExVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetBindInfoEx *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetBindInfoEx *This);

    ULONG(__stdcall *Release)
    (
        IInternetBindInfoEx *This);

    HRESULT(__stdcall *GetBindInfo)
    (
        IInternetBindInfoEx *This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo);

    HRESULT(__stdcall *GetBindString)
    (
        IInternetBindInfoEx *This,
        ULONG ulStringType,

        LPOLESTR *ppwzStr,
        ULONG cEl,
        ULONG *pcElFetched);

    HRESULT(__stdcall *GetBindInfoEx)
    (
        IInternetBindInfoEx *This,
        DWORD *grfBINDF,
        BINDINFO *pbindinfo,
        DWORD *grfBINDF2,
        DWORD *pdwReserved);

} IInternetBindInfoExVtbl;

struct IInternetBindInfoEx
{
    struct IInternetBindInfoExVtbl *lpVtbl;
};

typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef enum _tagPI_FLAGS
{
    PI_PARSE_URL = 0x1,
    PI_FILTER_MODE = 0x2,
    PI_FORCE_ASYNC = 0x4,
    PI_USE_WORKERTHREAD = 0x8,
    PI_MIMEVERIFICATION = 0x10,
    PI_CLSIDLOOKUP = 0x20,
    PI_DATAPROGRESS = 0x40,
    PI_SYNCHRONOUS = 0x80,
    PI_APARTMENTTHREADED = 0x100,
    PI_CLASSINSTALL = 0x200,
    PI_PASSONBINDCTX = 0x2000,
    PI_NOMIMEHANDLER = 0x8000,
    PI_LOADAPPDIRECT = 0x4000,
    PD_FORCE_SWITCH = 0x10000,
    PI_PREFERDEFAULTHANDLER = 0x20000
} PI_FLAGS;

typedef struct _tagPROTOCOLDATA
{
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
} PROTOCOLDATA;

typedef struct _tagStartParam
{
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
} StartParam;

typedef struct IInternetProtocolRootVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetProtocolRoot *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetProtocolRoot *This);

    ULONG(__stdcall *Release)
    (
        IInternetProtocolRoot *This);

    HRESULT(__stdcall *Start)
    (
        IInternetProtocolRoot *This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);

    HRESULT(__stdcall *Continue)
    (
        IInternetProtocolRoot *This,
        PROTOCOLDATA *pProtocolData);

    HRESULT(__stdcall *Abort)
    (
        IInternetProtocolRoot *This,
        HRESULT hrReason,
        DWORD dwOptions);

    HRESULT(__stdcall *Terminate)
    (
        IInternetProtocolRoot *This,
        DWORD dwOptions);

    HRESULT(__stdcall *Suspend)
    (
        IInternetProtocolRoot *This);

    HRESULT(__stdcall *Resume)
    (
        IInternetProtocolRoot *This);

} IInternetProtocolRootVtbl;

struct IInternetProtocolRoot
{
    struct IInternetProtocolRootVtbl *lpVtbl;
};

typedef IInternetProtocol *LPIINTERNETPROTOCOL;

typedef struct IInternetProtocolVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetProtocol *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetProtocol *This);

    ULONG(__stdcall *Release)
    (
        IInternetProtocol *This);

    HRESULT(__stdcall *Start)
    (
        IInternetProtocol *This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);

    HRESULT(__stdcall *Continue)
    (
        IInternetProtocol *This,
        PROTOCOLDATA *pProtocolData);

    HRESULT(__stdcall *Abort)
    (
        IInternetProtocol *This,
        HRESULT hrReason,
        DWORD dwOptions);

    HRESULT(__stdcall *Terminate)
    (
        IInternetProtocol *This,
        DWORD dwOptions);

    HRESULT(__stdcall *Suspend)
    (
        IInternetProtocol *This);

    HRESULT(__stdcall *Resume)
    (
        IInternetProtocol *This);

    HRESULT(__stdcall *Read)
    (
        IInternetProtocol *This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT(__stdcall *Seek)
    (
        IInternetProtocol *This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);

    HRESULT(__stdcall *LockRequest)
    (
        IInternetProtocol *This,
        DWORD dwOptions);

    HRESULT(__stdcall *UnlockRequest)
    (
        IInternetProtocol *This);

} IInternetProtocolVtbl;

struct IInternetProtocol
{
    struct IInternetProtocolVtbl *lpVtbl;
};

typedef struct IInternetProtocolExVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetProtocolEx *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetProtocolEx *This);

    ULONG(__stdcall *Release)
    (
        IInternetProtocolEx *This);

    HRESULT(__stdcall *Start)
    (
        IInternetProtocolEx *This,
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);

    HRESULT(__stdcall *Continue)
    (
        IInternetProtocolEx *This,
        PROTOCOLDATA *pProtocolData);

    HRESULT(__stdcall *Abort)
    (
        IInternetProtocolEx *This,
        HRESULT hrReason,
        DWORD dwOptions);

    HRESULT(__stdcall *Terminate)
    (
        IInternetProtocolEx *This,
        DWORD dwOptions);

    HRESULT(__stdcall *Suspend)
    (
        IInternetProtocolEx *This);

    HRESULT(__stdcall *Resume)
    (
        IInternetProtocolEx *This);

    HRESULT(__stdcall *Read)
    (
        IInternetProtocolEx *This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT(__stdcall *Seek)
    (
        IInternetProtocolEx *This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);

    HRESULT(__stdcall *LockRequest)
    (
        IInternetProtocolEx *This,
        DWORD dwOptions);

    HRESULT(__stdcall *UnlockRequest)
    (
        IInternetProtocolEx *This);

    HRESULT(__stdcall *StartEx)
    (
        IInternetProtocolEx *This,
        IUri *pUri,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved);

} IInternetProtocolExVtbl;

struct IInternetProtocolEx
{
    struct IInternetProtocolExVtbl *lpVtbl;
};

typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
typedef struct IInternetProtocolSinkVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetProtocolSink *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetProtocolSink *This);

    ULONG(__stdcall *Release)
    (
        IInternetProtocolSink *This);

    HRESULT(__stdcall *Switch)
    (
        IInternetProtocolSink *This,
        PROTOCOLDATA *pProtocolData);

    HRESULT(__stdcall *ReportProgress)
    (
        IInternetProtocolSink *This,
        ULONG ulStatusCode,
        LPCWSTR szStatusText);

    HRESULT(__stdcall *ReportData)
    (
        IInternetProtocolSink *This,
        DWORD grfBSCF,
        ULONG ulProgress,
        ULONG ulProgressMax);

    HRESULT(__stdcall *ReportResult)
    (
        IInternetProtocolSink *This,
        HRESULT hrResult,
        DWORD dwError,
        LPCWSTR szResult);

} IInternetProtocolSinkVtbl;

struct IInternetProtocolSink
{
    struct IInternetProtocolSinkVtbl *lpVtbl;
};
typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;
typedef struct IInternetProtocolSinkStackableVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetProtocolSinkStackable *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetProtocolSinkStackable *This);

    ULONG(__stdcall *Release)
    (
        IInternetProtocolSinkStackable *This);

    HRESULT(__stdcall *SwitchSink)
    (
        IInternetProtocolSinkStackable *This,
        IInternetProtocolSink *pOIProtSink);

    HRESULT(__stdcall *CommitSwitch)
    (
        IInternetProtocolSinkStackable *This);

    HRESULT(__stdcall *RollbackSwitch)
    (
        IInternetProtocolSinkStackable *This);

} IInternetProtocolSinkStackableVtbl;

struct IInternetProtocolSinkStackable
{
    struct IInternetProtocolSinkStackableVtbl *lpVtbl;
};

typedef IInternetSession *LPIINTERNETSESSION;

typedef enum _tagOIBDG_FLAGS
{
    OIBDG_APARTMENTTHREADED = 0x100,
    OIBDG_DATAONLY = 0x1000
} OIBDG_FLAGS;

typedef struct IInternetSessionVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetSession *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetSession *This);

    ULONG(__stdcall *Release)
    (
        IInternetSession *This);

    HRESULT(__stdcall *RegisterNameSpace)
    (
        IInternetSession *This,
        IClassFactory *pCF,
        const IID *const rclsid,
        LPCWSTR pwzProtocol,
        ULONG cPatterns,
        const LPCWSTR *ppwzPatterns,
        DWORD dwReserved);

    HRESULT(__stdcall *UnregisterNameSpace)
    (
        IInternetSession *This,
        IClassFactory *pCF,
        LPCWSTR pszProtocol);

    HRESULT(__stdcall *RegisterMimeFilter)
    (
        IInternetSession *This,
        IClassFactory *pCF,
        const IID *const rclsid,
        LPCWSTR pwzType);

    HRESULT(__stdcall *UnregisterMimeFilter)
    (
        IInternetSession *This,
        IClassFactory *pCF,
        LPCWSTR pwzType);

    HRESULT(__stdcall *CreateBinding)
    (
        IInternetSession *This,
        LPBC pBC,
        LPCWSTR szUrl,
        IUnknown *pUnkOuter,
        IUnknown **ppUnk,
        IInternetProtocol **ppOInetProt,
        DWORD dwOption);

    HRESULT(__stdcall *SetSessionOption)
    (
        IInternetSession *This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD dwBufferLength,
        DWORD dwReserved);

    HRESULT(__stdcall *GetSessionOption)
    (
        IInternetSession *This,
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pdwBufferLength,
        DWORD dwReserved);

} IInternetSessionVtbl;

struct IInternetSession
{
    struct IInternetSessionVtbl *lpVtbl;
};

typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;

typedef struct IInternetThreadSwitchVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetThreadSwitch *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetThreadSwitch *This);

    ULONG(__stdcall *Release)
    (
        IInternetThreadSwitch *This);

    HRESULT(__stdcall *Prepare)
    (
        IInternetThreadSwitch *This);

    HRESULT(__stdcall *Continue)
    (
        IInternetThreadSwitch *This);

} IInternetThreadSwitchVtbl;

struct IInternetThreadSwitch
{
    struct IInternetThreadSwitchVtbl *lpVtbl;
};

typedef IInternetPriority *LPIINTERNETPRIORITY;

typedef struct IInternetPriorityVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetPriority *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetPriority *This);

    ULONG(__stdcall *Release)
    (
        IInternetPriority *This);

    HRESULT(__stdcall *SetPriority)
    (
        IInternetPriority *This,
        LONG nPriority);

    HRESULT(__stdcall *GetPriority)
    (
        IInternetPriority *This,
        LONG *pnPriority);

} IInternetPriorityVtbl;

struct IInternetPriority
{
    struct IInternetPriorityVtbl *lpVtbl;
};

typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef enum _tagPARSEACTION
{
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY = (PARSE_CANONICALIZE + 1),
    PARSE_SECURITY_URL = (PARSE_FRIENDLY + 1),
    PARSE_ROOTDOCUMENT = (PARSE_SECURITY_URL + 1),
    PARSE_DOCUMENT = (PARSE_ROOTDOCUMENT + 1),
    PARSE_ANCHOR = (PARSE_DOCUMENT + 1),
    PARSE_ENCODE_IS_UNESCAPE = (PARSE_ANCHOR + 1),
    PARSE_DECODE_IS_ESCAPE = (PARSE_ENCODE_IS_UNESCAPE + 1),
    PARSE_PATH_FROM_URL = (PARSE_DECODE_IS_ESCAPE + 1),
    PARSE_URL_FROM_PATH = (PARSE_PATH_FROM_URL + 1),
    PARSE_MIME = (PARSE_URL_FROM_PATH + 1),
    PARSE_SERVER = (PARSE_MIME + 1),
    PARSE_SCHEMA = (PARSE_SERVER + 1),
    PARSE_SITE = (PARSE_SCHEMA + 1),
    PARSE_DOMAIN = (PARSE_SITE + 1),
    PARSE_LOCATION = (PARSE_DOMAIN + 1),
    PARSE_SECURITY_DOMAIN = (PARSE_LOCATION + 1),
    PARSE_ESCAPE = (PARSE_SECURITY_DOMAIN + 1),
    PARSE_UNESCAPE = (PARSE_ESCAPE + 1)
} PARSEACTION;

typedef enum _tagPSUACTION
{
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY = (PSU_DEFAULT + 1)
} PSUACTION;

typedef enum _tagQUERYOPTION
{
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE = (QUERY_EXPIRATION_DATE + 1),
    QUERY_CONTENT_ENCODING = (QUERY_TIME_OF_LAST_CHANGE + 1),
    QUERY_CONTENT_TYPE = (QUERY_CONTENT_ENCODING + 1),
    QUERY_REFRESH = (QUERY_CONTENT_TYPE + 1),
    QUERY_RECOMBINE = (QUERY_REFRESH + 1),
    QUERY_CAN_NAVIGATE = (QUERY_RECOMBINE + 1),
    QUERY_USES_NETWORK = (QUERY_CAN_NAVIGATE + 1),
    QUERY_IS_CACHED = (QUERY_USES_NETWORK + 1),
    QUERY_IS_INSTALLEDENTRY = (QUERY_IS_CACHED + 1),
    QUERY_IS_CACHED_OR_MAPPED = (QUERY_IS_INSTALLEDENTRY + 1),
    QUERY_USES_CACHE = (QUERY_IS_CACHED_OR_MAPPED + 1),
    QUERY_IS_SECURE = (QUERY_USES_CACHE + 1),
    QUERY_IS_SAFE = (QUERY_IS_SECURE + 1),
    QUERY_USES_HISTORYFOLDER = (QUERY_IS_SAFE + 1),
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = (QUERY_USES_HISTORYFOLDER + 1)
} QUERYOPTION;

typedef struct IInternetProtocolInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetProtocolInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetProtocolInfo *This);

    ULONG(__stdcall *Release)
    (
        IInternetProtocolInfo *This);

    HRESULT(__stdcall *ParseUrl)
    (
        IInternetProtocolInfo *This,
        LPCWSTR pwzUrl,
        PARSEACTION ParseAction,
        DWORD dwParseFlags,

        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved);

    HRESULT(__stdcall *CombineUrl)
    (
        IInternetProtocolInfo *This,
        LPCWSTR pwzBaseUrl,
        LPCWSTR pwzRelativeUrl,
        DWORD dwCombineFlags,

        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved);

    HRESULT(__stdcall *CompareUrl)
    (
        IInternetProtocolInfo *This,
        LPCWSTR pwzUrl1,
        LPCWSTR pwzUrl2,
        DWORD dwCompareFlags);

    HRESULT(__stdcall *QueryInfo)
    (
        IInternetProtocolInfo *This,
        LPCWSTR pwzUrl,
        QUERYOPTION OueryOption,
        DWORD dwQueryFlags,
        LPVOID pBuffer,
        DWORD cbBuffer,
        DWORD *pcbBuf,
        DWORD dwReserved);

} IInternetProtocolInfoVtbl;

struct IInternetProtocolInfo
{
    struct IInternetProtocolInfoVtbl *lpVtbl;
};

typedef enum _tagINTERNETFEATURELIST
{
    FEATURE_OBJECT_CACHING = 0,
    FEATURE_ZONE_ELEVATION = (FEATURE_OBJECT_CACHING + 1),
    FEATURE_MIME_HANDLING = (FEATURE_ZONE_ELEVATION + 1),
    FEATURE_MIME_SNIFFING = (FEATURE_MIME_HANDLING + 1),
    FEATURE_WINDOW_RESTRICTIONS = (FEATURE_MIME_SNIFFING + 1),
    FEATURE_WEBOC_POPUPMANAGEMENT = (FEATURE_WINDOW_RESTRICTIONS + 1),
    FEATURE_BEHAVIORS = (FEATURE_WEBOC_POPUPMANAGEMENT + 1),
    FEATURE_DISABLE_MK_PROTOCOL = (FEATURE_BEHAVIORS + 1),
    FEATURE_LOCALMACHINE_LOCKDOWN = (FEATURE_DISABLE_MK_PROTOCOL + 1),
    FEATURE_SECURITYBAND = (FEATURE_LOCALMACHINE_LOCKDOWN + 1),
    FEATURE_RESTRICT_ACTIVEXINSTALL = (FEATURE_SECURITYBAND + 1),
    FEATURE_VALIDATE_NAVIGATE_URL = (FEATURE_RESTRICT_ACTIVEXINSTALL + 1),
    FEATURE_RESTRICT_FILEDOWNLOAD = (FEATURE_VALIDATE_NAVIGATE_URL + 1),
    FEATURE_ADDON_MANAGEMENT = (FEATURE_RESTRICT_FILEDOWNLOAD + 1),
    FEATURE_PROTOCOL_LOCKDOWN = (FEATURE_ADDON_MANAGEMENT + 1),
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = (FEATURE_PROTOCOL_LOCKDOWN + 1),
    FEATURE_SAFE_BINDTOOBJECT = (FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1),
    FEATURE_UNC_SAVEDFILECHECK = (FEATURE_SAFE_BINDTOOBJECT + 1),
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = (FEATURE_UNC_SAVEDFILECHECK + 1),
    FEATURE_TABBED_BROWSING = (FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1),
    FEATURE_SSLUX = (FEATURE_TABBED_BROWSING + 1),
    FEATURE_DISABLE_NAVIGATION_SOUNDS = (FEATURE_SSLUX + 1),
    FEATURE_DISABLE_LEGACY_COMPRESSION = (FEATURE_DISABLE_NAVIGATION_SOUNDS + 1),
    FEATURE_FORCE_ADDR_AND_STATUS = (FEATURE_DISABLE_LEGACY_COMPRESSION + 1),
    FEATURE_XMLHTTP = (FEATURE_FORCE_ADDR_AND_STATUS + 1),
    FEATURE_DISABLE_TELNET_PROTOCOL = (FEATURE_XMLHTTP + 1),
    FEATURE_FEEDS = (FEATURE_DISABLE_TELNET_PROTOCOL + 1),
    FEATURE_BLOCK_INPUT_PROMPTS = (FEATURE_FEEDS + 1),
    FEATURE_ENTRY_COUNT = (FEATURE_BLOCK_INPUT_PROMPTS + 1)
} INTERNETFEATURELIST;

typedef struct IInternetSecurityMgrSiteVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetSecurityMgrSite *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetSecurityMgrSite *This);

    ULONG(__stdcall *Release)
    (
        IInternetSecurityMgrSite *This);

    HRESULT(__stdcall *GetWindow)
    (
        IInternetSecurityMgrSite *This,
        HWND *phwnd);

    HRESULT(__stdcall *EnableModeless)
    (
        IInternetSecurityMgrSite *This,
        BOOL fEnable);

} IInternetSecurityMgrSiteVtbl;

struct IInternetSecurityMgrSite
{
    struct IInternetSecurityMgrSiteVtbl *lpVtbl;
};

typedef enum __MIDL_IInternetSecurityManager_0001
{
    PUAF_DEFAULT = 0,
    PUAF_NOUI = 0x1,
    PUAF_ISFILE = 0x2,
    PUAF_WARN_IF_DENIED = 0x4,
    PUAF_FORCEUI_FOREGROUND = 0x8,
    PUAF_CHECK_TIFS = 0x10,
    PUAF_DONTCHECKBOXINDIALOG = 0x20,
    PUAF_TRUSTED = 0x40,
    PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
    PUAF_ENFORCERESTRICTED = 0x100,
    PUAF_NOSAVEDFILECHECK = 0x200,
    PUAF_REQUIRESAVEDFILECHECK = 0x400,
    PUAF_DONT_USE_CACHE = 0x1000,
    PUAF_RESERVED1 = 0x2000,
    PUAF_RESERVED2 = 0x4000,
    PUAF_LMZ_UNLOCKED = 0x10000,
    PUAF_LMZ_LOCKED = 0x20000,
    PUAF_DEFAULTZONEPOL = 0x40000,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
    PUAF_NOUIIFLOCKED = 0x100000,
    PUAF_DRAGPROTOCOLCHECK = 0x200000
} PUAF;

typedef enum __MIDL_IInternetSecurityManager_0002
{
    PUAFOUT_DEFAULT = 0,
    PUAFOUT_ISLOCKZONEPOLICY = 0x1
} PUAFOUT;
typedef enum __MIDL_IInternetSecurityManager_0003
{
    SZM_CREATE = 0,
    SZM_DELETE = 0x1
} SZM_FLAGS;

typedef struct IInternetSecurityManagerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetSecurityManager *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetSecurityManager *This);

    ULONG(__stdcall *Release)
    (
        IInternetSecurityManager *This);

    HRESULT(__stdcall *SetSecuritySite)
    (
        IInternetSecurityManager *This,
        IInternetSecurityMgrSite *pSite);

    HRESULT(__stdcall *GetSecuritySite)
    (
        IInternetSecurityManager *This,
        IInternetSecurityMgrSite **ppSite);

    HRESULT(__stdcall *MapUrlToZone)
    (
        IInternetSecurityManager *This,
        LPCWSTR pwszUrl,
        DWORD *pdwZone,
        DWORD dwFlags);

    HRESULT(__stdcall *GetSecurityId)
    (
        IInternetSecurityManager *This,

        LPCWSTR pwszUrl,

        BYTE *pbSecurityId,

        DWORD *pcbSecurityId,

        DWORD_PTR dwReserved);

    HRESULT(__stdcall *ProcessUrlAction)
    (
        IInternetSecurityManager *This,
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);

    HRESULT(__stdcall *QueryCustomPolicy)
    (
        IInternetSecurityManager *This,
        LPCWSTR pwszUrl,
        const GUID *const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);

    HRESULT(__stdcall *SetZoneMapping)
    (
        IInternetSecurityManager *This,
        DWORD dwZone,
        LPCWSTR lpszPattern,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneMappings)
    (
        IInternetSecurityManager *This,
        DWORD dwZone,
        IEnumString **ppenumString,
        DWORD dwFlags);

} IInternetSecurityManagerVtbl;

struct IInternetSecurityManager
{
    struct IInternetSecurityManagerVtbl *lpVtbl;
};

typedef struct IInternetSecurityManagerExVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetSecurityManagerEx *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetSecurityManagerEx *This);

    ULONG(__stdcall *Release)
    (
        IInternetSecurityManagerEx *This);

    HRESULT(__stdcall *SetSecuritySite)
    (
        IInternetSecurityManagerEx *This,
        IInternetSecurityMgrSite *pSite);

    HRESULT(__stdcall *GetSecuritySite)
    (
        IInternetSecurityManagerEx *This,
        IInternetSecurityMgrSite **ppSite);

    HRESULT(__stdcall *MapUrlToZone)
    (
        IInternetSecurityManagerEx *This,
        LPCWSTR pwszUrl,
        DWORD *pdwZone,
        DWORD dwFlags);

    HRESULT(__stdcall *GetSecurityId)
    (
        IInternetSecurityManagerEx *This,

        LPCWSTR pwszUrl,

        BYTE *pbSecurityId,

        DWORD *pcbSecurityId,

        DWORD_PTR dwReserved);

    HRESULT(__stdcall *ProcessUrlAction)
    (
        IInternetSecurityManagerEx *This,
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);

    HRESULT(__stdcall *QueryCustomPolicy)
    (
        IInternetSecurityManagerEx *This,
        LPCWSTR pwszUrl,
        const GUID *const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);

    HRESULT(__stdcall *SetZoneMapping)
    (
        IInternetSecurityManagerEx *This,
        DWORD dwZone,
        LPCWSTR lpszPattern,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneMappings)
    (
        IInternetSecurityManagerEx *This,
        DWORD dwZone,
        IEnumString **ppenumString,
        DWORD dwFlags);

    HRESULT(__stdcall *ProcessUrlActionEx)
    (
        IInternetSecurityManagerEx *This,
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved,
        DWORD *pdwOutFlags);

} IInternetSecurityManagerExVtbl;

struct IInternetSecurityManagerEx
{
    struct IInternetSecurityManagerExVtbl *lpVtbl;
};

typedef struct IInternetSecurityManagerEx2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetSecurityManagerEx2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetSecurityManagerEx2 *This);

    ULONG(__stdcall *Release)
    (
        IInternetSecurityManagerEx2 *This);

    HRESULT(__stdcall *SetSecuritySite)
    (
        IInternetSecurityManagerEx2 *This,
        IInternetSecurityMgrSite *pSite);

    HRESULT(__stdcall *GetSecuritySite)
    (
        IInternetSecurityManagerEx2 *This,
        IInternetSecurityMgrSite **ppSite);

    HRESULT(__stdcall *MapUrlToZone)
    (
        IInternetSecurityManagerEx2 *This,
        LPCWSTR pwszUrl,
        DWORD *pdwZone,
        DWORD dwFlags);

    HRESULT(__stdcall *GetSecurityId)
    (
        IInternetSecurityManagerEx2 *This,

        LPCWSTR pwszUrl,

        BYTE *pbSecurityId,

        DWORD *pcbSecurityId,

        DWORD_PTR dwReserved);

    HRESULT(__stdcall *ProcessUrlAction)
    (
        IInternetSecurityManagerEx2 *This,
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);

    HRESULT(__stdcall *QueryCustomPolicy)
    (
        IInternetSecurityManagerEx2 *This,
        LPCWSTR pwszUrl,
        const GUID *const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);

    HRESULT(__stdcall *SetZoneMapping)
    (
        IInternetSecurityManagerEx2 *This,
        DWORD dwZone,
        LPCWSTR lpszPattern,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneMappings)
    (
        IInternetSecurityManagerEx2 *This,
        DWORD dwZone,
        IEnumString **ppenumString,
        DWORD dwFlags);

    HRESULT(__stdcall *ProcessUrlActionEx)
    (
        IInternetSecurityManagerEx2 *This,
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved,
        DWORD *pdwOutFlags);

    HRESULT(__stdcall *MapUrlToZoneEx2)
    (
        IInternetSecurityManagerEx2 *This,

        IUri *pUri,
        DWORD *pdwZone,
        DWORD dwFlags,

        LPWSTR *ppwszMappedUrl,

        DWORD *pdwOutFlags);

    HRESULT(__stdcall *ProcessUrlActionEx2)
    (
        IInternetSecurityManagerEx2 *This,

        IUri *pUri,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD_PTR dwReserved,
        DWORD *pdwOutFlags);

    HRESULT(__stdcall *GetSecurityIdEx2)
    (
        IInternetSecurityManagerEx2 *This,

        IUri *pUri,

        BYTE *pbSecurityId,

        DWORD *pcbSecurityId,

        DWORD_PTR dwReserved);

    HRESULT(__stdcall *QueryCustomPolicyEx2)
    (
        IInternetSecurityManagerEx2 *This,

        IUri *pUri,
        const GUID *const guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD_PTR dwReserved);

} IInternetSecurityManagerEx2Vtbl;

struct IInternetSecurityManagerEx2
{
    struct IInternetSecurityManagerEx2Vtbl *lpVtbl;
};

typedef struct IZoneIdentifierVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IZoneIdentifier *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IZoneIdentifier *This);

    ULONG(__stdcall *Release)
    (
        IZoneIdentifier *This);

    HRESULT(__stdcall *GetId)
    (
        IZoneIdentifier *This,
        DWORD *pdwZone);

    HRESULT(__stdcall *SetId)
    (
        IZoneIdentifier *This,
        DWORD dwZone);

    HRESULT(__stdcall *Remove)
    (
        IZoneIdentifier *This);

} IZoneIdentifierVtbl;

struct IZoneIdentifier
{
    struct IZoneIdentifierVtbl *lpVtbl;
};

typedef struct IInternetHostSecurityManagerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetHostSecurityManager *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetHostSecurityManager *This);

    ULONG(__stdcall *Release)
    (
        IInternetHostSecurityManager *This);

    HRESULT(__stdcall *GetSecurityId)
    (
        IInternetHostSecurityManager *This,

        BYTE *pbSecurityId,

        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved);

    HRESULT(__stdcall *ProcessUrlAction)
    (
        IInternetHostSecurityManager *This,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,

        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved);

    HRESULT(__stdcall *QueryCustomPolicy)
    (
        IInternetHostSecurityManager *This,
        const GUID *const guidKey,

        BYTE **ppPolicy,

        DWORD *pcbPolicy,

        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved);

} IInternetHostSecurityManagerVtbl;

struct IInternetHostSecurityManager
{
    struct IInternetHostSecurityManagerVtbl *lpVtbl;
};

typedef IInternetZoneManager *LPURLZONEMANAGER;

typedef enum tagURLZONE
{
    URLZONE_INVALID = -1,
    URLZONE_PREDEFINED_MIN = 0,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET = (URLZONE_LOCAL_MACHINE + 1),
    URLZONE_TRUSTED = (URLZONE_INTRANET + 1),
    URLZONE_INTERNET = (URLZONE_TRUSTED + 1),
    URLZONE_UNTRUSTED = (URLZONE_INTERNET + 1),
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN = 1000,
    URLZONE_USER_MAX = 10000
} URLZONE;

typedef enum tagURLTEMPLATE
{
    URLTEMPLATE_CUSTOM = 0,
    URLTEMPLATE_PREDEFINED_MIN = 0x10000,
    URLTEMPLATE_LOW = 0x10000,
    URLTEMPLATE_MEDLOW = 0x10500,
    URLTEMPLATE_MEDIUM = 0x11000,
    URLTEMPLATE_MEDHIGH = 0x11500,
    URLTEMPLATE_HIGH = 0x12000,
    URLTEMPLATE_PREDEFINED_MAX = 0x20000
} URLTEMPLATE;

enum __MIDL_IInternetZoneManager_0001
{
    MAX_ZONE_PATH = 260,
    MAX_ZONE_DESCRIPTION = 200
};
typedef enum __MIDL_IInternetZoneManager_0002
{
    ZAFLAGS_CUSTOM_EDIT = 0x1,
    ZAFLAGS_ADD_SITES = 0x2,
    ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
    ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
    ZAFLAGS_NO_UI = 0x20,
    ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
    ZAFLAGS_UNC_AS_INTRANET = 0x80,
    ZAFLAGS_DETECT_INTRANET = 0x100,
    ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
    ZAFLAGS_NO_CACHE = 0x40000
} ZAFLAGS;

typedef struct _ZONEATTRIBUTES
{
    ULONG cbSize;
    WCHAR szDisplayName[260];
    WCHAR szDescription[200];
    WCHAR szIconPath[260];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
} ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
typedef enum _URLZONEREG
{
    URLZONEREG_DEFAULT = 0,
    URLZONEREG_HKLM = (URLZONEREG_DEFAULT + 1),
    URLZONEREG_HKCU = (URLZONEREG_HKLM + 1)
} URLZONEREG;

typedef struct IInternetZoneManagerVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetZoneManager *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetZoneManager *This);

    ULONG(__stdcall *Release)
    (
        IInternetZoneManager *This);

    HRESULT(__stdcall *GetZoneAttributes)
    (
        IInternetZoneManager *This,
        DWORD dwZone,

        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT(__stdcall *SetZoneAttributes)
    (
        IInternetZoneManager *This,
        DWORD dwZone,

        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT(__stdcall *GetZoneCustomPolicy)
    (
        IInternetZoneManager *This,
        DWORD dwZone,
        const GUID *const guidKey,

        BYTE **ppPolicy,

        DWORD *pcbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *SetZoneCustomPolicy)
    (
        IInternetZoneManager *This,
        DWORD dwZone,
        const GUID *const guidKey,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *GetZoneActionPolicy)
    (
        IInternetZoneManager *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *SetZoneActionPolicy)
    (
        IInternetZoneManager *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *PromptAction)
    (
        IInternetZoneManager *This,
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags);

    HRESULT(__stdcall *LogAction)
    (
        IInternetZoneManager *This,
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags);

    HRESULT(__stdcall *CreateZoneEnumerator)
    (
        IInternetZoneManager *This,
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneAt)
    (
        IInternetZoneManager *This,
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone);

    HRESULT(__stdcall *DestroyZoneEnumerator)
    (
        IInternetZoneManager *This,
        DWORD dwEnum);

    HRESULT(__stdcall *CopyTemplatePoliciesToZone)
    (
        IInternetZoneManager *This,
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved);

} IInternetZoneManagerVtbl;

struct IInternetZoneManager
{
    struct IInternetZoneManagerVtbl *lpVtbl;
};

typedef struct IInternetZoneManagerExVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetZoneManagerEx *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetZoneManagerEx *This);

    ULONG(__stdcall *Release)
    (
        IInternetZoneManagerEx *This);

    HRESULT(__stdcall *GetZoneAttributes)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,

        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT(__stdcall *SetZoneAttributes)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,

        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT(__stdcall *GetZoneCustomPolicy)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,
        const GUID *const guidKey,

        BYTE **ppPolicy,

        DWORD *pcbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *SetZoneCustomPolicy)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,
        const GUID *const guidKey,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *GetZoneActionPolicy)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *SetZoneActionPolicy)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *PromptAction)
    (
        IInternetZoneManagerEx *This,
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags);

    HRESULT(__stdcall *LogAction)
    (
        IInternetZoneManagerEx *This,
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags);

    HRESULT(__stdcall *CreateZoneEnumerator)
    (
        IInternetZoneManagerEx *This,
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneAt)
    (
        IInternetZoneManagerEx *This,
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone);

    HRESULT(__stdcall *DestroyZoneEnumerator)
    (
        IInternetZoneManagerEx *This,
        DWORD dwEnum);

    HRESULT(__stdcall *CopyTemplatePoliciesToZone)
    (
        IInternetZoneManagerEx *This,
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved);

    HRESULT(__stdcall *GetZoneActionPolicyEx)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);

    HRESULT(__stdcall *SetZoneActionPolicyEx)
    (
        IInternetZoneManagerEx *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);

} IInternetZoneManagerExVtbl;

struct IInternetZoneManagerEx
{
    struct IInternetZoneManagerExVtbl *lpVtbl;
};

typedef struct IInternetZoneManagerEx2Vtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IInternetZoneManagerEx2 *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IInternetZoneManagerEx2 *This);

    ULONG(__stdcall *Release)
    (
        IInternetZoneManagerEx2 *This);

    HRESULT(__stdcall *GetZoneAttributes)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,

        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT(__stdcall *SetZoneAttributes)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,

        ZONEATTRIBUTES *pZoneAttributes);

    HRESULT(__stdcall *GetZoneCustomPolicy)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,
        const GUID *const guidKey,

        BYTE **ppPolicy,

        DWORD *pcbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *SetZoneCustomPolicy)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,
        const GUID *const guidKey,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *GetZoneActionPolicy)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *SetZoneActionPolicy)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg);

    HRESULT(__stdcall *PromptAction)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags);

    HRESULT(__stdcall *LogAction)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags);

    HRESULT(__stdcall *CreateZoneEnumerator)
    (
        IInternetZoneManagerEx2 *This,
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneAt)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone);

    HRESULT(__stdcall *DestroyZoneEnumerator)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwEnum);

    HRESULT(__stdcall *CopyTemplatePoliciesToZone)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved);

    HRESULT(__stdcall *GetZoneActionPolicyEx)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);

    HRESULT(__stdcall *SetZoneActionPolicyEx)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,
        DWORD dwAction,

        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneAttributesEx)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes,
        DWORD dwFlags);

    HRESULT(__stdcall *GetZoneSecurityState)
    (
        IInternetZoneManagerEx2 *This,
        DWORD dwZoneIndex,
        BOOL fRespectPolicy,
        LPDWORD pdwState,
        BOOL *pfPolicyEncountered);

    HRESULT(__stdcall *GetIESecurityState)
    (
        IInternetZoneManagerEx2 *This,
        BOOL fRespectPolicy,
        LPDWORD pdwState,
        BOOL *pfPolicyEncountered,
        BOOL fNoCache);

    HRESULT(__stdcall *FixUnsecureSettings)
    (
        IInternetZoneManagerEx2 *This);

} IInternetZoneManagerEx2Vtbl;

struct IInternetZoneManagerEx2
{
    struct IInternetZoneManagerEx2Vtbl *lpVtbl;
};

typedef struct _tagCODEBASEHOLD
{
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
} CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
{
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
} SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;

typedef struct ISoftDistExtVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ISoftDistExt *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ISoftDistExt *This);

    ULONG(__stdcall *Release)
    (
        ISoftDistExt *This);

    HRESULT(__stdcall *ProcessSoftDist)
    (
        ISoftDistExt *This,
        LPCWSTR szCDFURL,
        IXMLElement *pSoftDistElement,
        LPSOFTDISTINFO lpsdi);

    HRESULT(__stdcall *GetFirstCodeBase)
    (
        ISoftDistExt *This,

        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize);

    HRESULT(__stdcall *GetNextCodeBase)
    (
        ISoftDistExt *This,

        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize);

    HRESULT(__stdcall *AsyncInstallDistributionUnit)
    (
        ISoftDistExt *This,
        IBindCtx *pbc,
        LPVOID pvReserved,
        DWORD flags,
        LPCODEBASEHOLD lpcbh);

} ISoftDistExtVtbl;

struct ISoftDistExt
{
    struct ISoftDistExtVtbl *lpVtbl;
};

typedef ICatalogFileInfo *LPCATALOGFILEINFO;
typedef struct ICatalogFileInfoVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        ICatalogFileInfo *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        ICatalogFileInfo *This);

    ULONG(__stdcall *Release)
    (
        ICatalogFileInfo *This);

    HRESULT(__stdcall *GetCatalogFile)
    (
        ICatalogFileInfo *This,

        LPSTR *ppszCatalogFile);

    HRESULT(__stdcall *GetJavaTrust)
    (
        ICatalogFileInfo *This,
        void **ppJavaTrust);

} ICatalogFileInfoVtbl;

struct ICatalogFileInfo
{
    struct ICatalogFileInfoVtbl *lpVtbl;
};

typedef IDataFilter *LPDATAFILTER;
typedef struct IDataFilterVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IDataFilter *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IDataFilter *This);

    ULONG(__stdcall *Release)
    (
        IDataFilter *This);

    HRESULT(__stdcall *DoEncode)
    (
        IDataFilter *This,
        DWORD dwFlags,
        LONG lInBufferSize,
        BYTE *pbInBuffer,
        LONG lOutBufferSize,
        BYTE *pbOutBuffer,
        LONG lInBytesAvailable,
        LONG *plInBytesRead,
        LONG *plOutBytesWritten,
        DWORD dwReserved);

    HRESULT(__stdcall *DoDecode)
    (
        IDataFilter *This,
        DWORD dwFlags,
        LONG lInBufferSize,
        BYTE *pbInBuffer,
        LONG lOutBufferSize,
        BYTE *pbOutBuffer,
        LONG lInBytesAvailable,
        LONG *plInBytesRead,
        LONG *plOutBytesWritten,
        DWORD dwReserved);

    HRESULT(__stdcall *SetEncodingLevel)
    (
        IDataFilter *This,
        DWORD dwEncLevel);

} IDataFilterVtbl;

struct IDataFilter
{
    struct IDataFilterVtbl *lpVtbl;
};
typedef struct _tagPROTOCOLFILTERDATA
{
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
} PROTOCOLFILTERDATA;

typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
{
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
} DATAINFO;

typedef struct IEncodingFilterFactoryVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IEncodingFilterFactory *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IEncodingFilterFactory *This);

    ULONG(__stdcall *Release)
    (
        IEncodingFilterFactory *This);

    HRESULT(__stdcall *FindBestFilter)
    (
        IEncodingFilterFactory *This,
        LPCWSTR pwzCodeIn,
        LPCWSTR pwzCodeOut,
        DATAINFO info,
        IDataFilter **ppDF);

    HRESULT(__stdcall *GetDefaultFilter)
    (
        IEncodingFilterFactory *This,
        LPCWSTR pwzCodeIn,
        LPCWSTR pwzCodeOut,
        IDataFilter **ppDF);

} IEncodingFilterFactoryVtbl;

struct IEncodingFilterFactory
{
    struct IEncodingFilterFactoryVtbl *lpVtbl;
};

typedef struct _tagHIT_LOGGING_INFO
{
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
} HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

struct CONFIRMSAFETY
{
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
};
typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;
typedef struct IWrappedProtocolVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IWrappedProtocol *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IWrappedProtocol *This);

    ULONG(__stdcall *Release)
    (
        IWrappedProtocol *This);

    HRESULT(__stdcall *GetWrapperCode)
    (
        IWrappedProtocol *This,
        LONG *pnCode,
        DWORD_PTR dwReserved);

} IWrappedProtocolVtbl;

struct IWrappedProtocol
{
    struct IWrappedProtocolVtbl *lpVtbl;
};

typedef IGetBindHandle *LPGETBINDHANDLE;

typedef enum __MIDL_IGetBindHandle_0001
{
    BINDHANDLETYPES_APPCACHE = 0,
    BINDHANDLETYPES_DEPENDENCY = 0x1,
    BINDHANDLETYPES_COUNT = (BINDHANDLETYPES_DEPENDENCY + 1)
} BINDHANDLETYPES;

typedef struct IGetBindHandleVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IGetBindHandle *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IGetBindHandle *This);

    ULONG(__stdcall *Release)
    (
        IGetBindHandle *This);

    HRESULT(__stdcall *GetBindHandle)
    (
        IGetBindHandle *This,
        BINDHANDLETYPES enumRequestedHandle,
        HANDLE *pRetHandle);

} IGetBindHandleVtbl;

struct IGetBindHandle
{
    struct IGetBindHandleVtbl *lpVtbl;
};
typedef struct _tagPROTOCOL_ARGUMENT
{
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
} PROTOCOL_ARGUMENT;

typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;
typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;
typedef struct IBindCallbackRedirectVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBindCallbackRedirect *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBindCallbackRedirect *This);

    ULONG(__stdcall *Release)
    (
        IBindCallbackRedirect *This);

    HRESULT(__stdcall *Redirect)
    (
        IBindCallbackRedirect *This,
        LPCWSTR lpcUrl,
        VARIANT_BOOL *vbCancel);

} IBindCallbackRedirectVtbl;

struct IBindCallbackRedirect
{
    struct IBindCallbackRedirectVtbl *lpVtbl;
};

typedef struct IBindHttpSecurityVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (
        IBindHttpSecurity *This,
        const IID *const riid,

        void **ppvObject);

    ULONG(__stdcall *AddRef)
    (
        IBindHttpSecurity *This);

    ULONG(__stdcall *Release)
    (
        IBindHttpSecurity *This);

    HRESULT(__stdcall *GetIgnoreCertMask)
    (
        IBindHttpSecurity *This,
        DWORD *pdwIgnoreCertMask);

} IBindHttpSecurityVtbl;

struct IBindHttpSecurity
{
    struct IBindHttpSecurityVtbl *lpVtbl;
};

enum PIDMSI_STATUS_VALUE
{
    PIDMSI_STATUS_NORMAL = 0,
    PIDMSI_STATUS_NEW = (PIDMSI_STATUS_NORMAL + 1),
    PIDMSI_STATUS_PRELIM = (PIDMSI_STATUS_NEW + 1),
    PIDMSI_STATUS_DRAFT = (PIDMSI_STATUS_PRELIM + 1),
    PIDMSI_STATUS_INPROGRESS = (PIDMSI_STATUS_DRAFT + 1),
    PIDMSI_STATUS_EDIT = (PIDMSI_STATUS_INPROGRESS + 1),
    PIDMSI_STATUS_REVIEW = (PIDMSI_STATUS_EDIT + 1),
    PIDMSI_STATUS_PROOF = (PIDMSI_STATUS_REVIEW + 1),
    PIDMSI_STATUS_FINAL = (PIDMSI_STATUS_PROOF + 1),
    PIDMSI_STATUS_OTHER = 0x7fff
};

typedef struct tagSERIALIZEDPROPERTYVALUE
{
    DWORD dwType;
    BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;

typedef struct
{
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
} NUMPARSE;

typedef ITypeLib *LPTYPELIB;

typedef LONG DISPID;
typedef DISPID MEMBERID;

typedef ITypeInfo *LPTYPEINFO;

typedef ITypeComp *LPTYPECOMP;

typedef ICreateTypeLib *LPCREATETYPELIB;

typedef ICreateTypeInfo *LPCREATETYPEINFO;

typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;

typedef IDispatch *LPDISPATCH;

typedef struct tagPARAMDATA
{
    OLECHAR *szName;
    VARTYPE vt;
} PARAMDATA, *LPPARAMDATA;

typedef struct tagMETHODDATA
{
    OLECHAR *szName;
    PARAMDATA *ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
} METHODDATA, *LPMETHODDATA;

typedef struct tagINTERFACEDATA
{
    METHODDATA *pmethdata;
    UINT cMembers;
} INTERFACEDATA, *LPINTERFACEDATA;

typedef struct _OLESTREAM *LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD(*Get)
    (LPOLESTREAM, void *, DWORD);
    DWORD(*Put)
    (LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;

typedef UINT_PTR (*LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef struct tagOFN_NT4A
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;

typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;

typedef struct tagOFNA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;

} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;

} OPENFILENAMEW, *LPOPENFILENAMEW;

typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
typedef UINT_PTR (*LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

typedef struct _OFNOTIFYA
{
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPSTR pszFile;
} OFNOTIFYA, *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPWSTR pszFile;
} OFNOTIFYW, *LPOFNOTIFYW;

typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;

typedef struct _OFNOTIFYEXA
{
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPVOID psf;
    LPVOID pidl;
} OFNOTIFYEXA, *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPVOID psf;
    LPVOID pidl;
} OFNOTIFYEXW, *LPOFNOTIFYEXW;

typedef OFNOTIFYEXA OFNOTIFYEX;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
typedef struct tagCHOOSECOLORA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;

typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;

typedef UINT_PTR (*LPFRHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;

    DWORD Flags;
    LPSTR lpstrFindWhat;
    LPSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;

    DWORD Flags;
    LPWSTR lpstrFindWhat;
    LPWSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
} FINDREPLACEW, *LPFINDREPLACEW;

typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
typedef UINT_PTR (*LPCFHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTA lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    HINSTANCE hInstance;

    LPSTR lpszStyle;

    WORD nFontType;

    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;

} CHOOSEFONTA;
typedef struct tagCHOOSEFONTW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTW lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    HINSTANCE hInstance;

    LPWSTR lpszStyle;

    WORD nFontType;

    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;

} CHOOSEFONTW;

typedef CHOOSEFONTA CHOOSEFONT;

typedef CHOOSEFONTA *LPCHOOSEFONTA;
typedef CHOOSEFONTW *LPCHOOSEFONTW;

typedef LPCHOOSEFONTA LPCHOOSEFONT;

typedef const CHOOSEFONTA *PCCHOOSEFONTA;
typedef const CHOOSEFONTW *PCCHOOSEFONTW;

typedef CHOOSEFONTA CHOOSEFONT;
typedef PCCHOOSEFONTA PCCHOOSEFONT;

typedef UINT_PTR (*LPPRINTHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (*LPSETUPHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCSTR lpPrintTemplateName;
    LPCSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCWSTR lpPrintTemplateName;
    LPCWSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;

typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
typedef struct IPrintDialogCallback
{
    struct IPrintDialogCallbackVtbl *lpVtbl;
} IPrintDialogCallback;
typedef struct IPrintDialogCallbackVtbl IPrintDialogCallbackVtbl;
struct IPrintDialogCallbackVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (IPrintDialogCallback *This, const IID *const riid, void **ppvObj);
    ULONG(__stdcall *AddRef)
    (IPrintDialogCallback *This);
    ULONG(__stdcall *Release)
    (IPrintDialogCallback *This);

    HRESULT(__stdcall *InitDone)
    (IPrintDialogCallback *This);
    HRESULT(__stdcall *SelectionChange)
    (IPrintDialogCallback *This);
    HRESULT(__stdcall *HandleMessage)
    (IPrintDialogCallback *This, HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult);
};
typedef struct IPrintDialogServices
{
    struct IPrintDialogServicesVtbl *lpVtbl;
} IPrintDialogServices;
typedef struct IPrintDialogServicesVtbl IPrintDialogServicesVtbl;
struct IPrintDialogServicesVtbl
{

    HRESULT(__stdcall *QueryInterface)
    (IPrintDialogServices *This, const IID *const riid, void **ppvObj);
    ULONG(__stdcall *AddRef)
    (IPrintDialogServices *This);
    ULONG(__stdcall *Release)
    (IPrintDialogServices *This);

    HRESULT(__stdcall *GetCurrentDevMode)
    (IPrintDialogServices *This, LPDEVMODE pDevMode, UINT *pcbSize);
    HRESULT(__stdcall *GetCurrentPrinterName)
    (IPrintDialogServices *This, LPWSTR pPrinterName, UINT *pcchSize);
    HRESULT(__stdcall *GetCurrentPortName)
    (IPrintDialogServices *This, LPWSTR pPortName, UINT *pcchSize);
};

typedef struct tagPRINTPAGERANGE
{
    DWORD nFromPage;
    DWORD nToPage;
} PRINTPAGERANGE;
typedef PRINTPAGERANGE *LPPRINTPAGERANGE;
typedef const PRINTPAGERANGE *PCPRINTPAGERANGE;

typedef struct tagPDEXA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
} PRINTDLGEXA, *LPPRINTDLGEXA;

typedef struct tagPDEXW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCWSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
} PRINTDLGEXW, *LPPRINTDLGEXW;

typedef PRINTDLGEXA PRINTDLGEX;
typedef LPPRINTDLGEXA LPPRINTDLGEX;

typedef struct tagDEVNAMES
{
    WORD wDriverOffset;
    WORD wDeviceOffset;
    WORD wOutputOffset;
    WORD wDefault;
} DEVNAMES;
typedef DEVNAMES *LPDEVNAMES;
typedef const DEVNAMES *PCDEVNAMES;

typedef UINT_PTR (*LPPAGEPAINTHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (*LPPAGESETUPHOOK)(HWND, UINT, WPARAM, LPARAM);

typedef struct tagPSDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGA, *LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGW, *LPPAGESETUPDLGW;

typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;

typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
{
    union
    {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct
        {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
typedef struct _SERVICE_DESCRIPTIONA
{
    LPSTR lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;

typedef struct _SERVICE_DESCRIPTIONW
{
    LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;

typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;

typedef enum _SC_ACTION_TYPE
{
    SC_ACTION_NONE = 0,
    SC_ACTION_RESTART = 1,
    SC_ACTION_REBOOT = 2,
    SC_ACTION_RUN_COMMAND = 3,
    SC_ACTION_OWN_RESTART = 4
} SC_ACTION_TYPE;

typedef struct _SC_ACTION
{
    SC_ACTION_TYPE Type;
    DWORD Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA
{
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW
{
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;

typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;

typedef struct _SERVICE_DELAYED_AUTO_START_INFO
{
    BOOL fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;

typedef struct _SERVICE_FAILURE_ACTIONS_FLAG
{
    BOOL fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;

typedef struct _SERVICE_SID_INFO
{
    DWORD dwServiceSidType;
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;

typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA
{
    LPSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;

typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW
{
    LPWSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;

typedef struct _SERVICE_PRESHUTDOWN_INFO
{
    DWORD dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;

typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD dwDataType;
    DWORD cbData;
    PBYTE pData;
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;

typedef struct _SERVICE_TRIGGER
{
    DWORD dwTriggerType;
    DWORD dwAction;
    GUID *pTriggerSubtype;
    DWORD cDataItems;
    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;

typedef struct _SERVICE_TRIGGER_INFO
{
    DWORD cTriggers;
    PSERVICE_TRIGGER pTriggers;
    PBYTE pReserved;
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;

typedef struct _SERVICE_PREFERRED_NODE_INFO
{
    USHORT usPreferredNode;
    BOOLEAN fDelete;
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;

typedef struct _SERVICE_TIMECHANGE_INFO
{
    LARGE_INTEGER liNewTime;
    LARGE_INTEGER liOldTime;
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;

typedef struct _SERVICE_LAUNCH_PROTECTED_INFO
{
    DWORD dwLaunchProtected;
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;

struct SC_HANDLE__
{
    int unused;
};
typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__
{
    int unused;
};
typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

typedef enum _SC_STATUS_TYPE
{
    SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;

typedef enum _SC_ENUM_TYPE
{
    SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;

typedef struct _SERVICE_STATUS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;

typedef struct _ENUM_SERVICE_STATUSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;

typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;

typedef struct _ENUM_SERVICE_STATUS_PROCESSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;

typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;

typedef LPVOID SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA
{
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW
{
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;

typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;

typedef struct _QUERY_SERVICE_CONFIGA
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;

typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;

typedef void (*LPSERVICE_MAIN_FUNCTIONW)(
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors);

typedef void (*LPSERVICE_MAIN_FUNCTIONA)(
    DWORD dwNumServicesArgs,
    LPSTR *lpServiceArgVectors);
typedef struct _SERVICE_TABLE_ENTRYA
{
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
} SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW
{
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
} SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;

typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;

typedef void (*LPHANDLER_FUNCTION)(
    DWORD dwControl);

typedef DWORD (*LPHANDLER_FUNCTION_EX)(
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext);

typedef void (*PFN_SC_NOTIFY_CALLBACK)(
    PVOID pParameter);

typedef struct _SERVICE_NOTIFY_1
{
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A
{
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W
{
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;

typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;

typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;

typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;

typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA
{
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;

typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW
{
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;

typedef struct _SERVICE_START_REASON
{
    DWORD dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;

typedef struct _MODEMDEVCAPS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;

    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;

    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;

    BYTE abVariablePortion[1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;

    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;

    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;

    BYTE abVariablePortion[1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;

struct HIMC__
{
    int unused;
};
typedef struct HIMC__ *HIMC;
struct HIMCC__
{
    int unused;
};
typedef struct HIMCC__ *HIMCC;
typedef HKL *LPHKL;
typedef UINT *LPUINT;

typedef struct tagCOMPOSITIONFORM
{
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;

typedef struct tagCANDIDATEFORM
{
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;

typedef struct tagCANDIDATELIST
{
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;

typedef struct tagREGISTERWORDA
{
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW
{
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;

typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;

typedef struct tagRECONVERTSTRING
{
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;

typedef struct tagSTYLEBUFA
{
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW
{
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;

typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;

typedef struct tagIMEMENUITEMINFOA
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;

typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;

typedef struct tagIMECHARPOSITION
{
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;

typedef BOOL (*IMCENUMPROC)(HIMC, LPARAM);
typedef int (*REGISTERWORDENUMPROCA)(LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int (*REGISTERWORDENUMPROCW)(LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);

typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;

typedef unsigned long int u_int64;
typedef struct in_addr
{
    union
    {
        struct
        {
            UCHAR s_b1, s_b2, s_b3, s_b4;
        } S_un_b;
        struct
        {
            USHORT s_w1, s_w2;
        } S_un_w;
        ULONG S_addr;
    } S_un;

} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;
typedef USHORT ADDRESS_FAMILY;

typedef struct sockaddr
{
    ADDRESS_FAMILY sa_family;
    CHAR sa_data[14];
} SOCKADDR, *PSOCKADDR, *LPSOCKADDR;
typedef struct _SOCKET_ADDRESS
{
    LPSOCKADDR lpSockaddr;
    INT iSockaddrLength;
} SOCKET_ADDRESS, *PSOCKET_ADDRESS, *LPSOCKET_ADDRESS;

typedef struct _SOCKET_ADDRESS_LIST
{
    INT iAddressCount;
    SOCKET_ADDRESS Address[1];
} SOCKET_ADDRESS_LIST, *PSOCKET_ADDRESS_LIST, *LPSOCKET_ADDRESS_LIST;
typedef struct _CSADDR_INFO
{
    SOCKET_ADDRESS LocalAddr;
    SOCKET_ADDRESS RemoteAddr;
    INT iSocketType;
    INT iProtocol;
} CSADDR_INFO, *PCSADDR_INFO, *LPCSADDR_INFO;
typedef struct sockaddr_storage
{
    ADDRESS_FAMILY ss_family;
    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))];
    __int64 __ss_align;
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))];
} SOCKADDR_STORAGE_LH, *PSOCKADDR_STORAGE_LH, *LPSOCKADDR_STORAGE_LH;

typedef struct sockaddr_storage_xp
{
    short ss_family;

    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))];

    __int64 __ss_align;
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))];

} SOCKADDR_STORAGE_XP, *PSOCKADDR_STORAGE_XP, *LPSOCKADDR_STORAGE_XP;

typedef SOCKADDR_STORAGE_LH SOCKADDR_STORAGE;
typedef SOCKADDR_STORAGE *PSOCKADDR_STORAGE, *LPSOCKADDR_STORAGE;
typedef enum
{

    IPPROTO_HOPOPTS = 0,

    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_GGP = 3,

    IPPROTO_IPV4 = 4,

    IPPROTO_ST = 5,

    IPPROTO_TCP = 6,

    IPPROTO_CBT = 7,
    IPPROTO_EGP = 8,
    IPPROTO_IGP = 9,

    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,

    IPPROTO_RDP = 27,

    IPPROTO_IPV6 = 41,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,

    IPPROTO_ND = 77,

    IPPROTO_ICLFXBM = 78,

    IPPROTO_PIM = 103,
    IPPROTO_PGM = 113,
    IPPROTO_L2TP = 115,
    IPPROTO_SCTP = 132,

    IPPROTO_RAW = 255,

    IPPROTO_MAX = 256,

    IPPROTO_RESERVED_RAW = 257,
    IPPROTO_RESERVED_IPSEC = 258,
    IPPROTO_RESERVED_IPSECOFFLOAD = 259,
    IPPROTO_RESERVED_WNV = 260,
    IPPROTO_RESERVED_MAX = 261
} IPPROTO,
    *PIPROTO;

typedef enum
{
    ScopeLevelInterface = 1,
    ScopeLevelLink = 2,
    ScopeLevelSubnet = 3,
    ScopeLevelAdmin = 4,
    ScopeLevelSite = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal = 14,
    ScopeLevelCount = 16
} SCOPE_LEVEL;

typedef struct
{
    union
    {
        struct
        {
            ULONG Zone : 28;
            ULONG Level : 4;
        };
        ULONG Value;
    };
} SCOPE_ID, *PSCOPE_ID;

typedef struct sockaddr_in
{

    ADDRESS_FAMILY sin_family;

    USHORT sin_port;
    IN_ADDR sin_addr;
    CHAR sin_zero[8];
} SOCKADDR_IN, *PSOCKADDR_IN;

typedef struct _WSABUF
{
    ULONG len;
    CHAR *buf;
} WSABUF, *LPWSABUF;
typedef struct _WSAMSG
{
    LPSOCKADDR name;
    INT namelen;
    LPWSABUF lpBuffers;

    ULONG dwBufferCount;
    WSABUF Control;

    ULONG dwFlags;
} WSAMSG, *PWSAMSG, *LPWSAMSG;
typedef struct cmsghdr
{
    SIZE_T cmsg_len;
    INT cmsg_level;
    INT cmsg_type;

} WSACMSGHDR, *PWSACMSGHDR, *LPWSACMSGHDR;

typedef WSACMSGHDR CMSGHDR, *PCMSGHDR;
typedef struct addrinfo
{
    int ai_flags;
    int ai_family;
    int ai_socktype;
    int ai_protocol;
    size_t ai_addrlen;
    char *ai_canonname;
    struct sockaddr *ai_addr;
    struct addrinfo *ai_next;
} ADDRINFOA, *PADDRINFOA;

typedef struct addrinfoW
{
    int ai_flags;
    int ai_family;
    int ai_socktype;
    int ai_protocol;
    size_t ai_addrlen;
    PWSTR ai_canonname;
    struct sockaddr *ai_addr;
    struct addrinfoW *ai_next;
} ADDRINFOW, *PADDRINFOW;

typedef struct addrinfoexA
{
    int ai_flags;
    int ai_family;
    int ai_socktype;
    int ai_protocol;
    size_t ai_addrlen;
    char *ai_canonname;
    struct sockaddr *ai_addr;
    void *ai_blob;
    size_t ai_bloblen;
    LPGUID ai_provider;
    struct addrinfoexA *ai_next;
} ADDRINFOEXA, *PADDRINFOEXA, *LPADDRINFOEXA;

typedef struct addrinfoexW
{
    int ai_flags;
    int ai_family;
    int ai_socktype;
    int ai_protocol;
    size_t ai_addrlen;
    PWSTR ai_canonname;
    struct sockaddr *ai_addr;
    void *ai_blob;
    size_t ai_bloblen;
    LPGUID ai_provider;
    struct addrinfoexW *ai_next;
} ADDRINFOEXW, *PADDRINFOEXW, *LPADDRINFOEXW;

typedef UINT_PTR SOCKET;
typedef struct fd_set
{
    u_int fd_count;
    SOCKET fd_array[64];
} fd_set;

struct timeval
{
    long tv_sec;
    long tv_usec;
};
struct hostent
{
    char *h_name;
    char **h_aliases;
    short h_addrtype;
    short h_length;
    char **h_addr_list;
};
struct netent
{
    char *n_name;
    char **n_aliases;
    short n_addrtype;
    u_long n_net;
};

struct servent
{
    char *s_name;
    char **s_aliases;

    short s_port;
    char *s_proto;
};

struct protoent
{
    char *p_name;
    char **p_aliases;
    short p_proto;
};
typedef struct WSAData
{
    WORD wVersion;
    WORD wHighVersion;

    char szDescription[256 + 1];
    char szSystemStatus[128 + 1];
    unsigned short iMaxSockets;
    unsigned short iMaxUdpDg;
    char *lpVendorInfo;

} WSADATA, *LPWSADATA;
struct sockproto
{
    u_short sp_family;
    u_short sp_protocol;
};
struct linger
{
    u_short l_onoff;
    u_short l_linger;
};
typedef struct _OVERLAPPED *LPWSAOVERLAPPED;

typedef ULONG SERVICETYPE;
typedef struct _flowspec
{
    ULONG TokenRate;
    ULONG TokenBucketSize;
    ULONG PeakBandwidth;
    ULONG Latency;
    ULONG DelayVariation;
    SERVICETYPE ServiceType;
    ULONG MaxSduSize;
    ULONG MinimumPolicedSize;

} FLOWSPEC, *PFLOWSPEC, *LPFLOWSPEC;
typedef struct
{

    ULONG ObjectType;
    ULONG ObjectLength;

} QOS_OBJECT_HDR, *LPQOS_OBJECT_HDR;
typedef struct _QOS_SD_MODE
{

    QOS_OBJECT_HDR ObjectHdr;
    ULONG ShapeDiscardMode;

} QOS_SD_MODE, *LPQOS_SD_MODE;
typedef struct _QOS_SHAPING_RATE
{

    QOS_OBJECT_HDR ObjectHdr;
    ULONG ShapingRate;

} QOS_SHAPING_RATE, *LPQOS_SHAPING_RATE;

typedef struct _QualityOfService
{
    FLOWSPEC SendingFlowspec;
    FLOWSPEC ReceivingFlowspec;
    WSABUF ProviderSpecific;
} QOS, *LPQOS;

typedef unsigned int GROUP;
typedef struct _WSANETWORKEVENTS
{
    long lNetworkEvents;
    int iErrorCode[10];
} WSANETWORKEVENTS, *LPWSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN
{
    int ChainLen;

    DWORD ChainEntries[7];
} WSAPROTOCOLCHAIN, *LPWSAPROTOCOLCHAIN;

typedef struct _WSAPROTOCOL_INFOA
{
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    CHAR szProtocol[255 + 1];
} WSAPROTOCOL_INFOA, *LPWSAPROTOCOL_INFOA;

typedef struct _WSAPROTOCOL_INFOW
{
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    WCHAR szProtocol[255 + 1];
} WSAPROTOCOL_INFOW, *LPWSAPROTOCOL_INFOW;

typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
typedef int (*LPCONDITIONPROC)(
    LPWSABUF lpCallerId,
    LPWSABUF lpCallerData,
    LPQOS lpSQOS,
    LPQOS lpGQOS,
    LPWSABUF lpCalleeId,
    LPWSABUF lpCalleeData,
    GROUP *g,
    DWORD_PTR dwCallbackData);

typedef void (*LPWSAOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwError,
    DWORD cbTransferred,
    LPWSAOVERLAPPED lpOverlapped,
    DWORD dwFlags);
typedef enum _WSACOMPLETIONTYPE
{
    NSP_NOTIFY_IMMEDIATELY = 0,
    NSP_NOTIFY_HWND,
    NSP_NOTIFY_EVENT,
    NSP_NOTIFY_PORT,
    NSP_NOTIFY_APC,
} WSACOMPLETIONTYPE,
    *PWSACOMPLETIONTYPE, *LPWSACOMPLETIONTYPE;

typedef struct _WSACOMPLETION
{
    WSACOMPLETIONTYPE Type;
    union
    {
        struct
        {
            HWND hWnd;
            UINT uMsg;
            WPARAM context;
        } WindowMessage;
        struct
        {
            LPWSAOVERLAPPED lpOverlapped;
        } Event;
        struct
        {
            LPWSAOVERLAPPED lpOverlapped;
            LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;
        } Apc;
        struct
        {
            LPWSAOVERLAPPED lpOverlapped;
            HANDLE hPort;
            ULONG_PTR Key;
        } Port;
    } Parameters;
} WSACOMPLETION, *PWSACOMPLETION, *LPWSACOMPLETION;
typedef struct _AFPROTOCOLS
{
    INT iAddressFamily;
    INT iProtocol;
} AFPROTOCOLS, *PAFPROTOCOLS, *LPAFPROTOCOLS;
typedef enum _WSAEcomparator
{
    COMP_EQUAL = 0,
    COMP_NOTLESS
} WSAECOMPARATOR,
    *PWSAECOMPARATOR, *LPWSAECOMPARATOR;

typedef struct _WSAVersion
{
    DWORD dwVersion;
    WSAECOMPARATOR ecHow;
} WSAVERSION, *PWSAVERSION, *LPWSAVERSION;

typedef struct _WSAQuerySetA
{
    DWORD dwSize;
    LPSTR lpszServiceInstanceName;
    LPGUID lpServiceClassId;
    LPWSAVERSION lpVersion;
    LPSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSETA, *PWSAQUERYSETA, *LPWSAQUERYSETA;

typedef struct _WSAQuerySetW
{
    DWORD dwSize;
    LPWSTR lpszServiceInstanceName;
    LPGUID lpServiceClassId;
    LPWSAVERSION lpVersion;
    LPWSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPWSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPWSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSETW, *PWSAQUERYSETW, *LPWSAQUERYSETW;

typedef struct _WSAQuerySet2A
{
    DWORD dwSize;
    LPSTR lpszServiceInstanceName;
    LPWSAVERSION lpVersion;
    LPSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSET2A, *PWSAQUERYSET2A, *LPWSAQUERYSET2A;
typedef struct _WSAQuerySet2W
{
    DWORD dwSize;
    LPWSTR lpszServiceInstanceName;
    LPWSAVERSION lpVersion;
    LPWSTR lpszComment;
    DWORD dwNameSpace;
    LPGUID lpNSProviderId;
    LPWSTR lpszContext;
    DWORD dwNumberOfProtocols;
    LPAFPROTOCOLS lpafpProtocols;
    LPWSTR lpszQueryString;
    DWORD dwNumberOfCsAddrs;
    LPCSADDR_INFO lpcsaBuffer;
    DWORD dwOutputFlags;
    LPBLOB lpBlob;
} WSAQUERYSET2W, *PWSAQUERYSET2W, *LPWSAQUERYSET2W;

typedef WSAQUERYSETA WSAQUERYSET;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef WSAQUERYSET2A WSAQUERYSET2;
typedef PWSAQUERYSET2A PWSAQUERYSET2;
typedef LPWSAQUERYSET2A LPWSAQUERYSET2;
typedef enum _WSAESETSERVICEOP
{
    RNRSERVICE_REGISTER = 0,
    RNRSERVICE_DEREGISTER,
    RNRSERVICE_DELETE
} WSAESETSERVICEOP,
    *PWSAESETSERVICEOP, *LPWSAESETSERVICEOP;

typedef struct _WSANSClassInfoA
{
    LPSTR lpszName;
    DWORD dwNameSpace;
    DWORD dwValueType;
    DWORD dwValueSize;
    LPVOID lpValue;
} WSANSCLASSINFOA, *PWSANSCLASSINFOA, *LPWSANSCLASSINFOA;

typedef struct _WSANSClassInfoW
{
    LPWSTR lpszName;
    DWORD dwNameSpace;
    DWORD dwValueType;
    DWORD dwValueSize;
    LPVOID lpValue;
} WSANSCLASSINFOW, *PWSANSCLASSINFOW, *LPWSANSCLASSINFOW;

typedef WSANSCLASSINFOA WSANSCLASSINFO;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;

typedef struct _WSAServiceClassInfoA
{
    LPGUID lpServiceClassId;
    LPSTR lpszServiceClassName;
    DWORD dwCount;
    LPWSANSCLASSINFOA lpClassInfos;
} WSASERVICECLASSINFOA, *PWSASERVICECLASSINFOA, *LPWSASERVICECLASSINFOA;

typedef struct _WSAServiceClassInfoW
{
    LPGUID lpServiceClassId;
    LPWSTR lpszServiceClassName;
    DWORD dwCount;
    LPWSANSCLASSINFOW lpClassInfos;
} WSASERVICECLASSINFOW, *PWSASERVICECLASSINFOW, *LPWSASERVICECLASSINFOW;

typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;

typedef struct _WSANAMESPACE_INFOA
{
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPSTR lpszIdentifier;
} WSANAMESPACE_INFOA, *PWSANAMESPACE_INFOA, *LPWSANAMESPACE_INFOA;

typedef struct _WSANAMESPACE_INFOW
{
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPWSTR lpszIdentifier;
} WSANAMESPACE_INFOW, *PWSANAMESPACE_INFOW, *LPWSANAMESPACE_INFOW;

typedef struct _WSANAMESPACE_INFOEXA
{
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPSTR lpszIdentifier;
    BLOB ProviderSpecific;
} WSANAMESPACE_INFOEXA, *PWSANAMESPACE_INFOEXA, *LPWSANAMESPACE_INFOEXA;

typedef struct _WSANAMESPACE_INFOEXW
{
    GUID NSProviderId;
    DWORD dwNameSpace;
    BOOL fActive;
    DWORD dwVersion;
    LPWSTR lpszIdentifier;
    BLOB ProviderSpecific;
} WSANAMESPACE_INFOEXW, *PWSANAMESPACE_INFOEXW, *LPWSANAMESPACE_INFOEXW;

typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef WSANAMESPACE_INFOEXA WSANAMESPACE_INFOEX;
typedef PWSANAMESPACE_INFOEXA PWSANAMESPACE_INFOEX;
typedef LPWSANAMESPACE_INFOEXA LPWSANAMESPACE_INFOEX;
typedef struct pollfd
{
    SOCKET fd;
    SHORT events;
    SHORT revents;
} WSAPOLLFD, *PWSAPOLLFD, *LPWSAPOLLFD;

typedef struct sockaddr_in *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;

typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;

typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;

typedef enum _WSA_COMPATIBILITY_BEHAVIOR_ID
{
    WsaBehaviorAll = 0,
    WsaBehaviorReceiveBuffering,
    WsaBehaviorAutoTuning
} WSA_COMPATIBILITY_BEHAVIOR_ID,
    *PWSA_COMPATIBILITY_BEHAVIOR_ID;

typedef struct _WSA_COMPATIBILITY_MODE
{
    WSA_COMPATIBILITY_BEHAVIOR_ID BehaviorId;
    ULONG TargetOsVersion;
} WSA_COMPATIBILITY_MODE, *PWSA_COMPATIBILITY_MODE;

typedef struct RIO_BUFFERID_t *RIO_BUFFERID, **PRIO_BUFFERID;
typedef struct RIO_CQ_t *RIO_CQ, **PRIO_CQ;
typedef struct RIO_RQ_t *RIO_RQ, **PRIO_RQ;

typedef struct _RIORESULT
{
    LONG Status;
    ULONG BytesTransferred;
    ULONGLONG SocketContext;
    ULONGLONG RequestContext;
} RIORESULT, *PRIORESULT;

typedef struct _RIO_BUF
{
    RIO_BUFFERID BufferId;
    ULONG Offset;
    ULONG Length;
} RIO_BUF, *PRIO_BUF;
typedef struct _RIO_CMSG_BUFFER
{
    ULONG TotalLength;

} RIO_CMSG_BUFFER, *PRIO_CMSG_BUFFER;

typedef struct _TRANSMIT_FILE_BUFFERS
{
    LPVOID Head;
    DWORD HeadLength;
    LPVOID Tail;
    DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;

typedef BOOL (*LPFN_TRANSMITFILE)(
    SOCKET hSocket,
    HANDLE hFile,
    DWORD nNumberOfBytesToWrite,
    DWORD nNumberOfBytesPerSend,
    LPOVERLAPPED lpOverlapped,
    LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
    DWORD dwReserved);
typedef BOOL (*LPFN_ACCEPTEX)(
    SOCKET sListenSocket,
    SOCKET sAcceptSocket,
    PVOID lpOutputBuffer,
    DWORD dwReceiveDataLength,
    DWORD dwLocalAddressLength,
    DWORD dwRemoteAddressLength,
    LPDWORD lpdwBytesReceived,
    LPOVERLAPPED lpOverlapped);
typedef void (*LPFN_GETACCEPTEXSOCKADDRS)(
    PVOID lpOutputBuffer,
    DWORD dwReceiveDataLength,
    DWORD dwLocalAddressLength,
    DWORD dwRemoteAddressLength,
    struct sockaddr **LocalSockaddr,
    LPINT LocalSockaddrLength,
    struct sockaddr **RemoteSockaddr,
    LPINT RemoteSockaddrLength);

typedef struct _TRANSMIT_PACKETS_ELEMENT
{
    ULONG dwElFlags;

    ULONG cLength;
    union
    {
        struct
        {
            LARGE_INTEGER nFileOffset;
            HANDLE hFile;
        };
        PVOID pBuffer;
    };
} TRANSMIT_PACKETS_ELEMENT, *PTRANSMIT_PACKETS_ELEMENT, *LPTRANSMIT_PACKETS_ELEMENT;

typedef BOOL (*LPFN_TRANSMITPACKETS)(
    SOCKET hSocket,
    LPTRANSMIT_PACKETS_ELEMENT lpPacketArray,
    DWORD nElementCount,
    DWORD nSendSize,
    LPOVERLAPPED lpOverlapped,
    DWORD dwFlags);
typedef BOOL (*LPFN_CONNECTEX)(
    SOCKET s,
    const struct sockaddr *name,
    int namelen,
    PVOID lpSendBuffer,
    DWORD dwSendDataLength,
    LPDWORD lpdwBytesSent,
    LPOVERLAPPED lpOverlapped);
typedef BOOL (*LPFN_DISCONNECTEX)(
    SOCKET s,
    LPOVERLAPPED lpOverlapped,
    DWORD dwFlags,
    DWORD dwReserved);

typedef enum _NLA_BLOB_DATA_TYPE
{
    NLA_RAW_DATA = 0,
    NLA_INTERFACE = 1,
    NLA_802_1X_LOCATION = 2,
    NLA_CONNECTIVITY = 3,
    NLA_ICS = 4,
} NLA_BLOB_DATA_TYPE,
    *PNLA_BLOB_DATA_TYPE;

typedef enum _NLA_CONNECTIVITY_TYPE
{
    NLA_NETWORK_AD_HOC = 0,
    NLA_NETWORK_MANAGED = 1,
    NLA_NETWORK_UNMANAGED = 2,
    NLA_NETWORK_UNKNOWN = 3,
} NLA_CONNECTIVITY_TYPE,
    *PNLA_CONNECTIVITY_TYPE;

typedef enum _NLA_INTERNET
{
    NLA_INTERNET_UNKNOWN = 0,
    NLA_INTERNET_NO = 1,
    NLA_INTERNET_YES = 2,
} NLA_INTERNET,
    *PNLA_INTERNET;

typedef struct _NLA_BLOB
{

    struct
    {
        NLA_BLOB_DATA_TYPE type;
        DWORD dwSize;
        DWORD nextOffset;
    } header;

    union
    {

        CHAR rawData[1];

        struct
        {
            DWORD dwType;
            DWORD dwSpeed;
            CHAR adapterName[1];
        } interfaceData;

        struct
        {
            CHAR information[1];
        } locationData;

        struct
        {
            NLA_CONNECTIVITY_TYPE type;
            NLA_INTERNET internet;
        } connectivity;

        struct
        {
            struct
            {
                DWORD speed;
                DWORD type;
                DWORD state;
                WCHAR machineName[256];
                WCHAR sharedAdapterName[256];
            } remote;
        } ICS;

    } data;

} NLA_BLOB, *PNLA_BLOB, *LPNLA_BLOB;

typedef INT (*LPFN_WSARECVMSG)(
    SOCKET s,
    LPWSAMSG lpMsg,
    LPDWORD lpdwNumberOfBytesRecvd,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
typedef struct
{
    int result;
    ULONG fds;
    INT timeout;
    WSAPOLLFD fdArray[0];
} WSAPOLLDATA, *LPWSAPOLLDATA;

typedef struct
{
    LPWSAMSG lpMsg;
    DWORD dwFlags;
    LPDWORD lpNumberOfBytesSent;
    LPWSAOVERLAPPED lpOverlapped;
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine;
} WSASENDMSG, *LPWSASENDMSG;
typedef INT (*LPFN_WSASENDMSG)(
    SOCKET s,
    LPWSAMSG lpMsg,
    DWORD dwFlags,
    LPDWORD lpNumberOfBytesSent,
    LPWSAOVERLAPPED lpOverlapped,
    LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
typedef INT (*LPFN_WSAPOLL)(
    LPWSAPOLLFD fdarray,
    ULONG nfds,
    INT timeout);
typedef BOOL (*LPFN_RIORECEIVE)(
    RIO_RQ SocketQueue,
    PRIO_BUF pData,
    ULONG DataBufferCount,
    DWORD Flags,
    PVOID RequestContext);

typedef int (*LPFN_RIORECEIVEEX)(
    RIO_RQ SocketQueue,
    PRIO_BUF pData,
    ULONG DataBufferCount,
    PRIO_BUF pLocalAddress,
    PRIO_BUF pRemoteAddress,
    PRIO_BUF pControlContext,
    PRIO_BUF pFlags,
    DWORD Flags,
    PVOID RequestContext);

typedef BOOL (*LPFN_RIOSEND)(
    RIO_RQ SocketQueue,
    PRIO_BUF pData,
    ULONG DataBufferCount,
    DWORD Flags,
    PVOID RequestContext);

typedef BOOL (*LPFN_RIOSENDEX)(
    RIO_RQ SocketQueue,
    PRIO_BUF pData,
    ULONG DataBufferCount,
    PRIO_BUF pLocalAddress,
    PRIO_BUF pRemoteAddress,
    PRIO_BUF pControlContext,
    PRIO_BUF pFlags,
    DWORD Flags,
    PVOID RequestContext);

typedef void (*LPFN_RIOCLOSECOMPLETIONQUEUE)(
    RIO_CQ CQ);

typedef enum _RIO_NOTIFICATION_COMPLETION_TYPE
{
    RIO_EVENT_COMPLETION = 1,
    RIO_IOCP_COMPLETION = 2,
} RIO_NOTIFICATION_COMPLETION_TYPE,
    *PRIO_NOTIFICATION_COMPLETION_TYPE;
#pragma warning(push)

typedef struct _RIO_NOTIFICATION_COMPLETION
{
    RIO_NOTIFICATION_COMPLETION_TYPE Type;
    union
    {
        struct
        {
            HANDLE EventHandle;
            BOOL NotifyReset;
        } Event;
        struct
        {
            HANDLE IocpHandle;
            PVOID CompletionKey;
            PVOID Overlapped;
        } Iocp;
    };
} RIO_NOTIFICATION_COMPLETION, *PRIO_NOTIFICATION_COMPLETION;

typedef RIO_CQ (*LPFN_RIOCREATECOMPLETIONQUEUE)(
    DWORD QueueSize,
    PRIO_NOTIFICATION_COMPLETION NotificationCompletion);

typedef RIO_RQ (*LPFN_RIOCREATEREQUESTQUEUE)(
    SOCKET Socket,
    ULONG MaxOutstandingReceive,
    ULONG MaxReceiveDataBuffers,
    ULONG MaxOutstandingSend,
    ULONG MaxSendDataBuffers,
    RIO_CQ ReceiveCQ,
    RIO_CQ SendCQ,
    PVOID SocketContext);

typedef ULONG (*LPFN_RIODEQUEUECOMPLETION)(
    RIO_CQ CQ,
    PRIORESULT Array,
    ULONG ArraySize);

typedef void (*LPFN_RIODEREGISTERBUFFER)(
    RIO_BUFFERID BufferId);

typedef INT (*LPFN_RIONOTIFY)(
    RIO_CQ CQ);

typedef RIO_BUFFERID (*LPFN_RIOREGISTERBUFFER)(
    PCHAR DataBuffer,
    DWORD DataLength);

typedef BOOL (*LPFN_RIORESIZECOMPLETIONQUEUE)(
    RIO_CQ CQ,
    DWORD QueueSize);

typedef BOOL (*LPFN_RIORESIZEREQUESTQUEUE)(
    RIO_RQ RQ,
    DWORD MaxOutstandingReceive,
    DWORD MaxOutstandingSend);

typedef struct _RIO_EXTENSION_FUNCTION_TABLE
{
    DWORD cbSize;

    LPFN_RIORECEIVE RIOReceive;
    LPFN_RIORECEIVEEX RIOReceiveEx;
    LPFN_RIOSEND RIOSend;
    LPFN_RIOSENDEX RIOSendEx;
    LPFN_RIOCLOSECOMPLETIONQUEUE RIOCloseCompletionQueue;
    LPFN_RIOCREATECOMPLETIONQUEUE RIOCreateCompletionQueue;
    LPFN_RIOCREATEREQUESTQUEUE RIOCreateRequestQueue;
    LPFN_RIODEQUEUECOMPLETION RIODequeueCompletion;
    LPFN_RIODEREGISTERBUFFER RIODeregisterBuffer;
    LPFN_RIONOTIFY RIONotify;
    LPFN_RIOREGISTERBUFFER RIORegisterBuffer;
    LPFN_RIORESIZECOMPLETIONQUEUE RIOResizeCompletionQueue;
    LPFN_RIORESIZEREQUESTQUEUE RIOResizeRequestQueue;
} RIO_EXTENSION_FUNCTION_TABLE, *PRIO_EXTENSION_FUNCTION_TABLE;

typedef struct in6_addr
{
    union
    {
        UCHAR Byte[16];
        USHORT Word[8];
    } u;
} IN6_ADDR, *PIN6_ADDR, *LPIN6_ADDR;

struct sockaddr_in6_old
{
    SHORT sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    IN6_ADDR sin6_addr;
};

typedef union sockaddr_gen
{
    struct sockaddr Address;
    struct sockaddr_in AddressIn;
    struct sockaddr_in6_old AddressIn6;
} sockaddr_gen;

typedef struct _INTERFACE_INFO
{
    ULONG iiFlags;
    sockaddr_gen iiAddress;
    sockaddr_gen iiBroadcastAddress;
    sockaddr_gen iiNetmask;
} INTERFACE_INFO, *LPINTERFACE_INFO;

typedef struct _INTERFACE_INFO_EX
{
    ULONG iiFlags;
    SOCKET_ADDRESS iiAddress;
    SOCKET_ADDRESS iiBroadcastAddress;
    SOCKET_ADDRESS iiNetmask;
} INTERFACE_INFO_EX, *LPINTERFACE_INFO_EX;
typedef enum _PMTUD_STATE
{
    IP_PMTUDISC_NOT_SET,
    IP_PMTUDISC_DO,
    IP_PMTUDISC_DONT,
    IP_PMTUDISC_PROBE,
    IP_PMTUDISC_MAX
} PMTUD_STATE,
    *PPMTUD_STATE;

typedef struct sockaddr_in6
{
    ADDRESS_FAMILY sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    IN6_ADDR sin6_addr;
    union
    {
        ULONG sin6_scope_id;
        SCOPE_ID sin6_scope_struct;
    };
} SOCKADDR_IN6_LH, *PSOCKADDR_IN6_LH, *LPSOCKADDR_IN6_LH;

typedef struct sockaddr_in6_w2ksp1
{
    short sin6_family;
    USHORT sin6_port;
    ULONG sin6_flowinfo;
    struct in6_addr sin6_addr;
    ULONG sin6_scope_id;
} SOCKADDR_IN6_W2KSP1, *PSOCKADDR_IN6_W2KSP1, *LPSOCKADDR_IN6_W2KSP1;

typedef SOCKADDR_IN6_LH SOCKADDR_IN6;
typedef SOCKADDR_IN6_LH *PSOCKADDR_IN6;
typedef SOCKADDR_IN6_LH *LPSOCKADDR_IN6;
typedef union _SOCKADDR_INET
{
    SOCKADDR_IN Ipv4;
    SOCKADDR_IN6 Ipv6;
    ADDRESS_FAMILY si_family;
} SOCKADDR_INET, *PSOCKADDR_INET;

typedef struct _sockaddr_in6_pair
{
    PSOCKADDR_IN6 SourceAddress;
    PSOCKADDR_IN6 DestinationAddress;
} SOCKADDR_IN6_PAIR, *PSOCKADDR_IN6_PAIR;

typedef enum
{
    MCAST_INCLUDE = 0,
    MCAST_EXCLUDE
} MULTICAST_MODE_TYPE;

typedef struct ip_mreq
{
    IN_ADDR imr_multiaddr;
    IN_ADDR imr_interface;
} IP_MREQ, *PIP_MREQ;

typedef struct ip_mreq_source
{
    IN_ADDR imr_multiaddr;
    IN_ADDR imr_sourceaddr;
    IN_ADDR imr_interface;
} IP_MREQ_SOURCE, *PIP_MREQ_SOURCE;

typedef struct ip_msfilter
{
    IN_ADDR imsf_multiaddr;
    IN_ADDR imsf_interface;
    MULTICAST_MODE_TYPE imsf_fmode;
    ULONG imsf_numsrc;
    IN_ADDR imsf_slist[1];
} IP_MSFILTER, *PIP_MSFILTER;
typedef struct ipv6_mreq
{
    IN6_ADDR ipv6mr_multiaddr;
    ULONG ipv6mr_interface;
} IPV6_MREQ, *PIPV6_MREQ;

typedef struct group_req
{
    ULONG gr_interface;
    SOCKADDR_STORAGE gr_group;
} GROUP_REQ, *PGROUP_REQ;

typedef struct group_source_req
{
    ULONG gsr_interface;
    SOCKADDR_STORAGE gsr_group;
    SOCKADDR_STORAGE gsr_source;
} GROUP_SOURCE_REQ, *PGROUP_SOURCE_REQ;

typedef struct group_filter
{
    ULONG gf_interface;
    SOCKADDR_STORAGE gf_group;
    MULTICAST_MODE_TYPE gf_fmode;
    ULONG gf_numsrc;
    SOCKADDR_STORAGE gf_slist[1];
} GROUP_FILTER, *PGROUP_FILTER;
typedef struct in_pktinfo
{
    IN_ADDR ipi_addr;
    ULONG ipi_ifindex;
} IN_PKTINFO, *PIN_PKTINFO;

typedef char __C_ASSERT__[(sizeof(IN_PKTINFO) == 8) ? 1 : -1];

typedef struct in6_pktinfo
{
    IN6_ADDR ipi6_addr;
    ULONG ipi6_ifindex;
} IN6_PKTINFO, *PIN6_PKTINFO;

typedef char __C_ASSERT__[(sizeof(IN6_PKTINFO) == 20) ? 1 : -1];

typedef struct in_pktinfo_ex
{
    IN_PKTINFO pkt_info;
    SCOPE_ID scope_id;
} IN_PKTINFO_EX, *PIN_PKTINFO_EX;

typedef struct in6_pktinfo_ex
{
    IN6_PKTINFO pkt_info;
    SCOPE_ID scope_id;
} IN6_PKTINFO_EX, *PIN6_PKTINFO_EX;

typedef struct in_recverr
{
    IPPROTO protocol;
    ULONG info;
    UINT8 type;
    UINT8 code;
} IN_RECVERR, *PIN_RECVERR;
typedef struct icmp_error_info
{
    SOCKADDR_INET srcaddress;
    IPPROTO protocol;
    UINT8 type;
    UINT8 code;
} ICMP_ERROR_INFO, *PICMP_ERROR_INFO;
typedef ADDRINFOA ADDRINFOT, *PADDRINFOT;

typedef ADDRINFOA ADDRINFO, *LPADDRINFO;

typedef ADDRINFOEXA ADDRINFOEX, *PADDRINFOEX;
typedef void (*LPLOOKUPSERVICE_COMPLETION_ROUTINE)(
    DWORD dwError,
    DWORD dwBytes,
    LPWSAOVERLAPPED lpOverlapped);

typedef int socklen_t;

struct _exception
{
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
};

struct _complex
{
    double x, y;
};
typedef long double float_t;
typedef long double double_t;

typedef union
{
    unsigned short _Sh[4];
    double _Val;
} _double_val;

typedef union
{
    unsigned short _Sh[2];
    float _Val;
} _float_val;

typedef union
{
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

typedef enum _crt_exit_return_mode
{
    _crt_exit_terminate_process,
    _crt_exit_return_to_caller
} _crt_exit_return_mode;

typedef enum _crt_exit_cleanup_mode
{
    _crt_exit_full_cleanup,
    _crt_exit_quick_cleanup,
    _crt_exit_no_cleanup
} _crt_exit_cleanup_mode;

typedef void(__stdcall *_tls_callback_type)(void *, unsigned long, void *);
typedef void (*_beginthread_proc_type)(void *);
typedef unsigned(__stdcall *_beginthreadex_proc_type)(void *);
typedef int (*_GetDllProcAddrProcType)(void);

typedef int sig_atomic_t;

typedef void (*_crt_signal_t)(int);

typedef unsigned short _ino_t;
typedef unsigned int _dev_t;
typedef long _off_t;

struct _stat32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat32i64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat64i32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};

struct _stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};

typedef struct
{
    long long __max_align_ll;
    long double __max_align_ld;
} max_align_t;

typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct
{
    int __val[2];
} __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void *__timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
typedef long int __fsword_t;
typedef long int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef char *__caddr_t;
typedef long int __intptr_t;
typedef unsigned int __socklen_t;
typedef int __sig_atomic_t;
typedef struct
{
    int __count;
    union
    {
        unsigned int __wch;
        char __wchb[4];
    } __value;
} __mbstate_t;
typedef struct _G_fpos_t
{
    __off_t __pos;
    __mbstate_t __state;
} __fpos_t;
typedef struct _G_fpos64_t
{
    __off64_t __pos;
    __mbstate_t __state;
} __fpos64_t;
struct _IO_FILE;
typedef struct _IO_FILE __FILE;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;
typedef void _IO_lock_t;

struct _IO_FILE
{
    int _flags;
    char *_IO_read_ptr;
    char *_IO_read_end;
    char *_IO_read_base;
    char *_IO_write_base;
    char *_IO_write_ptr;
    char *_IO_write_end;
    char *_IO_buf_base;
    char *_IO_buf_end;
    char *_IO_save_base;
    char *_IO_backup_base;
    char *_IO_save_end;
    struct _IO_marker *_markers;
    struct _IO_FILE *_chain;
    int _fileno;
    int _flags2;
    __off_t _old_offset;
    unsigned short _cur_column;
    signed char _vtable_offset;
    char _shortbuf[1];
    _IO_lock_t *_lock;
    __off64_t _offset;
    struct _IO_codecvt *_codecvt;
    struct _IO_wide_data *_wide_data;
    struct _IO_FILE *_freeres_list;
    void *_freeres_buf;
    size_t __pad5;
    int _mode;
    char _unused2[15 * sizeof(int) - 4 * sizeof(void *) - sizeof(size_t)];
};

typedef int (*LPFN_WSARECV)(SOCKET socket,
                            LPWSABUF buffers,
                            DWORD buffer_count,
                            LPDWORD bytes,
                            LPDWORD flags,
                            LPWSAOVERLAPPED overlapped,
                            LPWSAOVERLAPPED_COMPLETION_ROUTINE completion_routine);

typedef int (*LPFN_WSARECVFROM)(SOCKET socket,
                                LPWSABUF buffers,
                                DWORD buffer_count,
                                LPDWORD bytes,
                                LPDWORD flags,
                                struct sockaddr *addr,
                                LPINT addr_len,
                                LPWSAOVERLAPPED overlapped,
                                LPWSAOVERLAPPED_COMPLETION_ROUTINE completion_routine);

typedef LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
typedef struct _AFD_POLL_HANDLE_INFO
{
    HANDLE Handle;
    ULONG Events;
    NTSTATUS Status;
} AFD_POLL_HANDLE_INFO, *PAFD_POLL_HANDLE_INFO;

typedef struct _AFD_POLL_INFO
{
    LARGE_INTEGER Timeout;
    ULONG NumberOfHandles;
    ULONG Exclusive;
    AFD_POLL_HANDLE_INFO Handles[1];
} AFD_POLL_INFO, *PAFD_POLL_INFO;

/*
int _dup(int fd);
int _dup2(int fd1, int fd2);
int _write(int fd, const void *buffer, unsigned int count);
int _read(int const fd, void *const buffer, unsigned const buffer_size);
int _close(int _FileHandle);
int _commit(int _FileHandle);
int _eof(int _FileHandle);
long _filelength(int _FileHandle);
int _isatty(int _FileHandle);

intptr_t _get_osfhandle(int _FileHandle);
int _open_osfhandle(intptr_t _OSFileHandle, int _Flags);

int _fileno(FILE *stream);
FILE *fopen(const char *filename, const char *mode);
FILE *_fdopen(int _FileHandle, char const *_Mode);
int fclose(FILE *_Stream);
errno_t fopen_s(FILE **_Stream, char const *_FileName, char const *_Mode);
errno_t freopen_s(FILE **_Stream, char const *_FileName, char const *_Mode, FILE *_OldStream);
void clearerr(FILE *_Stream);
int fflush(FILE *_Stream);
*/
